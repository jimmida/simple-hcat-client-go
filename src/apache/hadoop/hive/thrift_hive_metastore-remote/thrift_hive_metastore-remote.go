// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"apache/hadoop/hive"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
	fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
	fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData, bool cascade)")
	fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
	fmt.Fprintln(os.Stderr, "   get_all_databases()")
	fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
	fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
	fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
	fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
	fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
	fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
	fmt.Fprintln(os.Stderr, "  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  void drop_table_with_environment_context(string dbname, string name, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
	fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
	fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
	fmt.Fprintln(os.Stderr, "   get_table_objects_by_name(string dbname,  tbl_names)")
	fmt.Fprintln(os.Stderr, "   get_table_names_by_filter(string dbname, string filter, i16 max_tables)")
	fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
	fmt.Fprintln(os.Stderr, "  void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  i32 add_partitions( new_parts)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  AddPartitionsResult add_partitions_req(AddPartitionsRequest request)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_with_environment_context(string db_name, string tbl_name,  part_vals, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_with_environment_context(string db_name, string tbl_name,  part_vals, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  DropPartitionsResult drop_partitions_req(DropPartitionsRequest req)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  Partition exchange_partition( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "  PartitionsByExprResult get_partitions_by_expr(PartitionsByExprRequest req)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_names(string db_name, string tbl_name,  names)")
	fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  void alter_partitions(string db_name, string tbl_name,  new_parts)")
	fmt.Fprintln(os.Stderr, "  void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void rename_partition(string db_name, string tbl_name,  part_vals, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  bool partition_name_has_valid_characters( part_vals, bool throw_exception)")
	fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
	fmt.Fprintln(os.Stderr, "  void markPartitionForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
	fmt.Fprintln(os.Stderr, "  bool isPartitionMarkedForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
	fmt.Fprintln(os.Stderr, "  Index add_index(Index new_index, Table index_table)")
	fmt.Fprintln(os.Stderr, "  void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)")
	fmt.Fprintln(os.Stderr, "  bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  Index get_index_by_name(string db_name, string tbl_name, string index_name)")
	fmt.Fprintln(os.Stderr, "   get_indexes(string db_name, string tbl_name, i16 max_indexes)")
	fmt.Fprintln(os.Stderr, "   get_index_names(string db_name, string tbl_name, i16 max_indexes)")
	fmt.Fprintln(os.Stderr, "  bool update_table_column_statistics(ColumnStatistics stats_obj)")
	fmt.Fprintln(os.Stderr, "  bool update_partition_column_statistics(ColumnStatistics stats_obj)")
	fmt.Fprintln(os.Stderr, "  ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  TableStatsResult get_table_statistics_req(TableStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  PartitionsStatsResult get_partitions_statistics_req(PartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  bool delete_table_column_statistics(string db_name, string tbl_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  void create_function(Function func)")
	fmt.Fprintln(os.Stderr, "  void drop_function(string dbName, string funcName)")
	fmt.Fprintln(os.Stderr, "  void alter_function(string dbName, string funcName, Function newFunc)")
	fmt.Fprintln(os.Stderr, "   get_functions(string dbName, string pattern)")
	fmt.Fprintln(os.Stderr, "  Function get_function(string dbName, string funcName)")
	fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
	fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
	fmt.Fprintln(os.Stderr, "   get_role_names()")
	fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
	fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "  GetPrincipalsInRoleResponse get_principals_in_role(GetPrincipalsInRoleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetRoleGrantsForPrincipalResponse get_role_grants_for_principal(GetRoleGrantsForPrincipalRequest request)")
	fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
	fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "   set_ugi(string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)")
	fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsResponse get_open_txns()")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsInfoResponse get_open_txns_info()")
	fmt.Fprintln(os.Stderr, "  OpenTxnsResponse open_txns(OpenTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void abort_txn(AbortTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void commit_txn(CommitTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse lock(LockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse check_lock(CheckLockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void unlock(UnlockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ShowLocksResponse show_locks(ShowLocksRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void heartbeat(HeartbeatRequest ids)")
	fmt.Fprintln(os.Stderr, "  HeartbeatTxnRangeResponse heartbeat_txn_range(HeartbeatTxnRangeRequest txns)")
	fmt.Fprintln(os.Stderr, "  void compact(CompactionRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ShowCompactResponse show_compact(ShowCompactRequest rqst)")
	fmt.Fprintln(os.Stderr, "  string getName()")
	fmt.Fprintln(os.Stderr, "  string getVersion()")
	fmt.Fprintln(os.Stderr, "  fb_status getStatus()")
	fmt.Fprintln(os.Stderr, "  string getStatusDetails()")
	fmt.Fprintln(os.Stderr, "   getCounters()")
	fmt.Fprintln(os.Stderr, "  i64 getCounter(string key)")
	fmt.Fprintln(os.Stderr, "  void setOption(string key, string value)")
	fmt.Fprintln(os.Stderr, "  string getOption(string key)")
	fmt.Fprintln(os.Stderr, "   getOptions()")
	fmt.Fprintln(os.Stderr, "  string getCpuProfile(i32 profileDurationInSec)")
	fmt.Fprintln(os.Stderr, "  i64 aliveSince()")
	fmt.Fprintln(os.Stderr, "  void reinitialize()")
	fmt.Fprintln(os.Stderr, "  void shutdown()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := hive.NewThriftHiveMetastoreClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "create_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
			flag.Usage()
		}
		arg328 := flag.Arg(1)
		mbTrans329 := thrift.NewTMemoryBufferLen(len(arg328))
		defer mbTrans329.Close()
		_, err330 := mbTrans329.WriteString(arg328)
		if err330 != nil {
			Usage()
			return
		}
		factory331 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt332 := factory331.GetProtocol(mbTrans329)
		argvalue0 := hive.NewDatabase()
		err333 := argvalue0.Read(jsProt332)
		if err333 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateDatabase(value0))
		fmt.Print("\n")
		break
	case "get_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabase(value0))
		fmt.Print("\n")
		break
	case "drop_database":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropDatabase requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropDatabase(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_databases":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabases(value0))
		fmt.Print("\n")
		break
	case "get_all_databases":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllDatabases())
		fmt.Print("\n")
		break
	case "alter_database":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg340 := flag.Arg(2)
		mbTrans341 := thrift.NewTMemoryBufferLen(len(arg340))
		defer mbTrans341.Close()
		_, err342 := mbTrans341.WriteString(arg340)
		if err342 != nil {
			Usage()
			return
		}
		factory343 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt344 := factory343.GetProtocol(mbTrans341)
		argvalue1 := hive.NewDatabase()
		err345 := argvalue1.Read(jsProt344)
		if err345 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AlterDatabase(value0, value1))
		fmt.Print("\n")
		break
	case "get_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetType(value0))
		fmt.Print("\n")
		break
	case "create_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
			flag.Usage()
		}
		arg347 := flag.Arg(1)
		mbTrans348 := thrift.NewTMemoryBufferLen(len(arg347))
		defer mbTrans348.Close()
		_, err349 := mbTrans348.WriteString(arg347)
		if err349 != nil {
			Usage()
			return
		}
		factory350 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt351 := factory350.GetProtocol(mbTrans348)
		argvalue0 := hive.NewType()
		err352 := argvalue0.Read(jsProt351)
		if err352 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateType(value0))
		fmt.Print("\n")
		break
	case "drop_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropType(value0))
		fmt.Print("\n")
		break
	case "get_type_all":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTypeAll(value0))
		fmt.Print("\n")
		break
	case "get_fields":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFields(value0, value1))
		fmt.Print("\n")
		break
	case "get_schema":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetSchema(value0, value1))
		fmt.Print("\n")
		break
	case "create_table":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
			flag.Usage()
		}
		arg359 := flag.Arg(1)
		mbTrans360 := thrift.NewTMemoryBufferLen(len(arg359))
		defer mbTrans360.Close()
		_, err361 := mbTrans360.WriteString(arg359)
		if err361 != nil {
			Usage()
			return
		}
		factory362 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt363 := factory362.GetProtocol(mbTrans360)
		argvalue0 := hive.NewTable()
		err364 := argvalue0.Read(jsProt363)
		if err364 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateTable(value0))
		fmt.Print("\n")
		break
	case "create_table_with_environment_context":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateTableWithEnvironmentContext requires 2 args")
			flag.Usage()
		}
		arg365 := flag.Arg(1)
		mbTrans366 := thrift.NewTMemoryBufferLen(len(arg365))
		defer mbTrans366.Close()
		_, err367 := mbTrans366.WriteString(arg365)
		if err367 != nil {
			Usage()
			return
		}
		factory368 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt369 := factory368.GetProtocol(mbTrans366)
		argvalue0 := hive.NewTable()
		err370 := argvalue0.Read(jsProt369)
		if err370 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg371 := flag.Arg(2)
		mbTrans372 := thrift.NewTMemoryBufferLen(len(arg371))
		defer mbTrans372.Close()
		_, err373 := mbTrans372.WriteString(arg371)
		if err373 != nil {
			Usage()
			return
		}
		factory374 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt375 := factory374.GetProtocol(mbTrans372)
		argvalue1 := hive.NewEnvironmentContext()
		err376 := argvalue1.Read(jsProt375)
		if err376 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateTableWithEnvironmentContext(value0, value1))
		fmt.Print("\n")
		break
	case "drop_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropTable(value0, value1, value2))
		fmt.Print("\n")
		break
	case "drop_table_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropTableWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		arg383 := flag.Arg(4)
		mbTrans384 := thrift.NewTMemoryBufferLen(len(arg383))
		defer mbTrans384.Close()
		_, err385 := mbTrans384.WriteString(arg383)
		if err385 != nil {
			Usage()
			return
		}
		factory386 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt387 := factory386.GetProtocol(mbTrans384)
		argvalue3 := hive.NewEnvironmentContext()
		err388 := argvalue3.Read(jsProt387)
		if err388 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.DropTableWithEnvironmentContext(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_tables":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTables(value0, value1))
		fmt.Print("\n")
		break
	case "get_all_tables":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetAllTables(value0))
		fmt.Print("\n")
		break
	case "get_table":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTable(value0, value1))
		fmt.Print("\n")
		break
	case "get_table_objects_by_name":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTableObjectsByName requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg395 := flag.Arg(2)
		mbTrans396 := thrift.NewTMemoryBufferLen(len(arg395))
		defer mbTrans396.Close()
		_, err397 := mbTrans396.WriteString(arg395)
		if err397 != nil {
			Usage()
			return
		}
		factory398 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt399 := factory398.GetProtocol(mbTrans396)
		containerStruct1 := hive.NewGetTableObjectsByNameArgs()
		err400 := containerStruct1.ReadField2(jsProt399)
		if err400 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.TblNames
		value1 := argvalue1
		fmt.Print(client.GetTableObjectsByName(value0, value1))
		fmt.Print("\n")
		break
	case "get_table_names_by_filter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableNamesByFilter requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err403 := (strconv.Atoi(flag.Arg(3)))
		if err403 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetTableNamesByFilter(value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg406 := flag.Arg(3)
		mbTrans407 := thrift.NewTMemoryBufferLen(len(arg406))
		defer mbTrans407.Close()
		_, err408 := mbTrans407.WriteString(arg406)
		if err408 != nil {
			Usage()
			return
		}
		factory409 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt410 := factory409.GetProtocol(mbTrans407)
		argvalue2 := hive.NewTable()
		err411 := argvalue2.Read(jsProt410)
		if err411 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterTable(value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterTableWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg414 := flag.Arg(3)
		mbTrans415 := thrift.NewTMemoryBufferLen(len(arg414))
		defer mbTrans415.Close()
		_, err416 := mbTrans415.WriteString(arg414)
		if err416 != nil {
			Usage()
			return
		}
		factory417 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt418 := factory417.GetProtocol(mbTrans415)
		argvalue2 := hive.NewTable()
		err419 := argvalue2.Read(jsProt418)
		if err419 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg420 := flag.Arg(4)
		mbTrans421 := thrift.NewTMemoryBufferLen(len(arg420))
		defer mbTrans421.Close()
		_, err422 := mbTrans421.WriteString(arg420)
		if err422 != nil {
			Usage()
			return
		}
		factory423 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt424 := factory423.GetProtocol(mbTrans421)
		argvalue3 := hive.NewEnvironmentContext()
		err425 := argvalue3.Read(jsProt424)
		if err425 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterTableWithEnvironmentContext(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "add_partition":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
			flag.Usage()
		}
		arg426 := flag.Arg(1)
		mbTrans427 := thrift.NewTMemoryBufferLen(len(arg426))
		defer mbTrans427.Close()
		_, err428 := mbTrans427.WriteString(arg426)
		if err428 != nil {
			Usage()
			return
		}
		factory429 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt430 := factory429.GetProtocol(mbTrans427)
		argvalue0 := hive.NewPartition()
		err431 := argvalue0.Read(jsProt430)
		if err431 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartition(value0))
		fmt.Print("\n")
		break
	case "add_partition_with_environment_context":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddPartitionWithEnvironmentContext requires 2 args")
			flag.Usage()
		}
		arg432 := flag.Arg(1)
		mbTrans433 := thrift.NewTMemoryBufferLen(len(arg432))
		defer mbTrans433.Close()
		_, err434 := mbTrans433.WriteString(arg432)
		if err434 != nil {
			Usage()
			return
		}
		factory435 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt436 := factory435.GetProtocol(mbTrans433)
		argvalue0 := hive.NewPartition()
		err437 := argvalue0.Read(jsProt436)
		if err437 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg438 := flag.Arg(2)
		mbTrans439 := thrift.NewTMemoryBufferLen(len(arg438))
		defer mbTrans439.Close()
		_, err440 := mbTrans439.WriteString(arg438)
		if err440 != nil {
			Usage()
			return
		}
		factory441 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt442 := factory441.GetProtocol(mbTrans439)
		argvalue1 := hive.NewEnvironmentContext()
		err443 := argvalue1.Read(jsProt442)
		if err443 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AddPartitionWithEnvironmentContext(value0, value1))
		fmt.Print("\n")
		break
	case "add_partitions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitions requires 1 args")
			flag.Usage()
		}
		arg444 := flag.Arg(1)
		mbTrans445 := thrift.NewTMemoryBufferLen(len(arg444))
		defer mbTrans445.Close()
		_, err446 := mbTrans445.WriteString(arg444)
		if err446 != nil {
			Usage()
			return
		}
		factory447 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt448 := factory447.GetProtocol(mbTrans445)
		containerStruct0 := hive.NewAddPartitionsArgs()
		err449 := containerStruct0.ReadField1(jsProt448)
		if err449 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.NewParts_
		value0 := argvalue0
		fmt.Print(client.AddPartitions(value0))
		fmt.Print("\n")
		break
	case "append_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg452 := flag.Arg(3)
		mbTrans453 := thrift.NewTMemoryBufferLen(len(arg452))
		defer mbTrans453.Close()
		_, err454 := mbTrans453.WriteString(arg452)
		if err454 != nil {
			Usage()
			return
		}
		factory455 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt456 := factory455.GetProtocol(mbTrans453)
		containerStruct2 := hive.NewAppendPartitionArgs()
		err457 := containerStruct2.ReadField3(jsProt456)
		if err457 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.AppendPartition(value0, value1, value2))
		fmt.Print("\n")
		break
	case "add_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg458 := flag.Arg(1)
		mbTrans459 := thrift.NewTMemoryBufferLen(len(arg458))
		defer mbTrans459.Close()
		_, err460 := mbTrans459.WriteString(arg458)
		if err460 != nil {
			Usage()
			return
		}
		factory461 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt462 := factory461.GetProtocol(mbTrans459)
		argvalue0 := hive.NewAddPartitionsRequest()
		err463 := argvalue0.Read(jsProt462)
		if err463 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartitionsReq(value0))
		fmt.Print("\n")
		break
	case "append_partition_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendPartitionWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg466 := flag.Arg(3)
		mbTrans467 := thrift.NewTMemoryBufferLen(len(arg466))
		defer mbTrans467.Close()
		_, err468 := mbTrans467.WriteString(arg466)
		if err468 != nil {
			Usage()
			return
		}
		factory469 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt470 := factory469.GetProtocol(mbTrans467)
		containerStruct2 := hive.NewAppendPartitionWithEnvironmentContextArgs()
		err471 := containerStruct2.ReadField3(jsProt470)
		if err471 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		arg472 := flag.Arg(4)
		mbTrans473 := thrift.NewTMemoryBufferLen(len(arg472))
		defer mbTrans473.Close()
		_, err474 := mbTrans473.WriteString(arg472)
		if err474 != nil {
			Usage()
			return
		}
		factory475 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt476 := factory475.GetProtocol(mbTrans473)
		argvalue3 := hive.NewEnvironmentContext()
		err477 := argvalue3.Read(jsProt476)
		if err477 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AppendPartitionWithEnvironmentContext(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "append_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AppendPartitionByName(value0, value1, value2))
		fmt.Print("\n")
		break
	case "append_partition_by_name_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByNameWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg484 := flag.Arg(4)
		mbTrans485 := thrift.NewTMemoryBufferLen(len(arg484))
		defer mbTrans485.Close()
		_, err486 := mbTrans485.WriteString(arg484)
		if err486 != nil {
			Usage()
			return
		}
		factory487 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt488 := factory487.GetProtocol(mbTrans485)
		argvalue3 := hive.NewEnvironmentContext()
		err489 := argvalue3.Read(jsProt488)
		if err489 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AppendPartitionByNameWithEnvironmentContext(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg492 := flag.Arg(3)
		mbTrans493 := thrift.NewTMemoryBufferLen(len(arg492))
		defer mbTrans493.Close()
		_, err494 := mbTrans493.WriteString(arg492)
		if err494 != nil {
			Usage()
			return
		}
		factory495 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt496 := factory495.GetProtocol(mbTrans493)
		containerStruct2 := hive.NewDropPartitionArgs()
		err497 := containerStruct2.ReadField3(jsProt496)
		if err497 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartition(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_with_environment_context":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DropPartitionWithEnvironmentContext requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg501 := flag.Arg(3)
		mbTrans502 := thrift.NewTMemoryBufferLen(len(arg501))
		defer mbTrans502.Close()
		_, err503 := mbTrans502.WriteString(arg501)
		if err503 != nil {
			Usage()
			return
		}
		factory504 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt505 := factory504.GetProtocol(mbTrans502)
		containerStruct2 := hive.NewDropPartitionWithEnvironmentContextArgs()
		err506 := containerStruct2.ReadField3(jsProt505)
		if err506 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg508 := flag.Arg(5)
		mbTrans509 := thrift.NewTMemoryBufferLen(len(arg508))
		defer mbTrans509.Close()
		_, err510 := mbTrans509.WriteString(arg508)
		if err510 != nil {
			Usage()
			return
		}
		factory511 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt512 := factory511.GetProtocol(mbTrans509)
		argvalue4 := hive.NewEnvironmentContext()
		err513 := argvalue4.Read(jsProt512)
		if err513 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.DropPartitionWithEnvironmentContext(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_partition_by_name":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartitionByName(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_by_name_with_environment_context":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DropPartitionByNameWithEnvironmentContext requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg522 := flag.Arg(5)
		mbTrans523 := thrift.NewTMemoryBufferLen(len(arg522))
		defer mbTrans523.Close()
		_, err524 := mbTrans523.WriteString(arg522)
		if err524 != nil {
			Usage()
			return
		}
		factory525 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt526 := factory525.GetProtocol(mbTrans523)
		argvalue4 := hive.NewEnvironmentContext()
		err527 := argvalue4.Read(jsProt526)
		if err527 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.DropPartitionByNameWithEnvironmentContext(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg528 := flag.Arg(1)
		mbTrans529 := thrift.NewTMemoryBufferLen(len(arg528))
		defer mbTrans529.Close()
		_, err530 := mbTrans529.WriteString(arg528)
		if err530 != nil {
			Usage()
			return
		}
		factory531 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt532 := factory531.GetProtocol(mbTrans529)
		argvalue0 := hive.NewDropPartitionsRequest()
		err533 := argvalue0.Read(jsProt532)
		if err533 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropPartitionsReq(value0))
		fmt.Print("\n")
		break
	case "get_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg536 := flag.Arg(3)
		mbTrans537 := thrift.NewTMemoryBufferLen(len(arg536))
		defer mbTrans537.Close()
		_, err538 := mbTrans537.WriteString(arg536)
		if err538 != nil {
			Usage()
			return
		}
		factory539 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt540 := factory539.GetProtocol(mbTrans537)
		containerStruct2 := hive.NewGetPartitionArgs()
		err541 := containerStruct2.ReadField3(jsProt540)
		if err541 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.GetPartition(value0, value1, value2))
		fmt.Print("\n")
		break
	case "exchange_partition":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ExchangePartition requires 5 args")
			flag.Usage()
		}
		arg542 := flag.Arg(1)
		mbTrans543 := thrift.NewTMemoryBufferLen(len(arg542))
		defer mbTrans543.Close()
		_, err544 := mbTrans543.WriteString(arg542)
		if err544 != nil {
			Usage()
			return
		}
		factory545 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt546 := factory545.GetProtocol(mbTrans543)
		containerStruct0 := hive.NewExchangePartitionArgs()
		err547 := containerStruct0.ReadField1(jsProt546)
		if err547 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartitionSpecs
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.ExchangePartition(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg554 := flag.Arg(3)
		mbTrans555 := thrift.NewTMemoryBufferLen(len(arg554))
		defer mbTrans555.Close()
		_, err556 := mbTrans555.WriteString(arg554)
		if err556 != nil {
			Usage()
			return
		}
		factory557 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt558 := factory557.GetProtocol(mbTrans555)
		containerStruct2 := hive.NewGetPartitionWithAuthArgs()
		err559 := containerStruct2.ReadField3(jsProt558)
		if err559 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg561 := flag.Arg(5)
		mbTrans562 := thrift.NewTMemoryBufferLen(len(arg561))
		defer mbTrans562.Close()
		_, err563 := mbTrans562.WriteString(arg561)
		if err563 != nil {
			Usage()
			return
		}
		factory564 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt565 := factory564.GetProtocol(mbTrans562)
		containerStruct4 := hive.NewGetPartitionWithAuthArgs()
		err566 := containerStruct4.ReadField5(jsProt565)
		if err566 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionWithAuth(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetPartitionByName(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err572 := (strconv.Atoi(flag.Arg(3)))
		if err572 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitions(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err575 := (strconv.Atoi(flag.Arg(3)))
		if err575 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg577 := flag.Arg(5)
		mbTrans578 := thrift.NewTMemoryBufferLen(len(arg577))
		defer mbTrans578.Close()
		_, err579 := mbTrans578.WriteString(arg577)
		if err579 != nil {
			Usage()
			return
		}
		factory580 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt581 := factory580.GetProtocol(mbTrans578)
		containerStruct4 := hive.NewGetPartitionsWithAuthArgs()
		err582 := containerStruct4.ReadField5(jsProt581)
		if err582 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionsWithAuth(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err585 := (strconv.Atoi(flag.Arg(3)))
		if err585 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitionNames(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg588 := flag.Arg(3)
		mbTrans589 := thrift.NewTMemoryBufferLen(len(arg588))
		defer mbTrans589.Close()
		_, err590 := mbTrans589.WriteString(arg588)
		if err590 != nil {
			Usage()
			return
		}
		factory591 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt592 := factory591.GetProtocol(mbTrans589)
		containerStruct2 := hive.NewGetPartitionsPsArgs()
		err593 := containerStruct2.ReadField3(jsProt592)
		if err593 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err594 := (strconv.Atoi(flag.Arg(4)))
		if err594 != nil {
			Usage()
			return
		}
		argvalue3 := byte(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsPs(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_ps_with_auth":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg597 := flag.Arg(3)
		mbTrans598 := thrift.NewTMemoryBufferLen(len(arg597))
		defer mbTrans598.Close()
		_, err599 := mbTrans598.WriteString(arg597)
		if err599 != nil {
			Usage()
			return
		}
		factory600 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt601 := factory600.GetProtocol(mbTrans598)
		containerStruct2 := hive.NewGetPartitionsPsWithAuthArgs()
		err602 := containerStruct2.ReadField3(jsProt601)
		if err602 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err603 := (strconv.Atoi(flag.Arg(4)))
		if err603 != nil {
			Usage()
			return
		}
		argvalue3 := byte(tmp3)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		arg605 := flag.Arg(6)
		mbTrans606 := thrift.NewTMemoryBufferLen(len(arg605))
		defer mbTrans606.Close()
		_, err607 := mbTrans606.WriteString(arg605)
		if err607 != nil {
			Usage()
			return
		}
		factory608 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt609 := factory608.GetProtocol(mbTrans606)
		containerStruct5 := hive.NewGetPartitionsPsWithAuthArgs()
		err610 := containerStruct5.ReadField6(jsProt609)
		if err610 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.GroupNames
		value5 := argvalue5
		fmt.Print(client.GetPartitionsPsWithAuth(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "get_partition_names_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg613 := flag.Arg(3)
		mbTrans614 := thrift.NewTMemoryBufferLen(len(arg613))
		defer mbTrans614.Close()
		_, err615 := mbTrans614.WriteString(arg613)
		if err615 != nil {
			Usage()
			return
		}
		factory616 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt617 := factory616.GetProtocol(mbTrans614)
		containerStruct2 := hive.NewGetPartitionNamesPsArgs()
		err618 := containerStruct2.ReadField3(jsProt617)
		if err618 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err619 := (strconv.Atoi(flag.Arg(4)))
		if err619 != nil {
			Usage()
			return
		}
		argvalue3 := byte(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionNamesPs(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_by_filter":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err623 := (strconv.Atoi(flag.Arg(4)))
		if err623 != nil {
			Usage()
			return
		}
		argvalue3 := byte(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsByFilter(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_by_expr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByExpr requires 1 args")
			flag.Usage()
		}
		arg624 := flag.Arg(1)
		mbTrans625 := thrift.NewTMemoryBufferLen(len(arg624))
		defer mbTrans625.Close()
		_, err626 := mbTrans625.WriteString(arg624)
		if err626 != nil {
			Usage()
			return
		}
		factory627 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt628 := factory627.GetProtocol(mbTrans625)
		argvalue0 := hive.NewPartitionsByExprRequest()
		err629 := argvalue0.Read(jsProt628)
		if err629 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsByExpr(value0))
		fmt.Print("\n")
		break
	case "get_partitions_by_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg632 := flag.Arg(3)
		mbTrans633 := thrift.NewTMemoryBufferLen(len(arg632))
		defer mbTrans633.Close()
		_, err634 := mbTrans633.WriteString(arg632)
		if err634 != nil {
			Usage()
			return
		}
		factory635 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt636 := factory635.GetProtocol(mbTrans633)
		containerStruct2 := hive.NewGetPartitionsByNamesArgs()
		err637 := containerStruct2.ReadField3(jsProt636)
		if err637 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Names
		value2 := argvalue2
		fmt.Print(client.GetPartitionsByNames(value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg640 := flag.Arg(3)
		mbTrans641 := thrift.NewTMemoryBufferLen(len(arg640))
		defer mbTrans641.Close()
		_, err642 := mbTrans641.WriteString(arg640)
		if err642 != nil {
			Usage()
			return
		}
		factory643 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt644 := factory643.GetProtocol(mbTrans641)
		argvalue2 := hive.NewPartition()
		err645 := argvalue2.Read(jsProt644)
		if err645 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterPartition(value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg648 := flag.Arg(3)
		mbTrans649 := thrift.NewTMemoryBufferLen(len(arg648))
		defer mbTrans649.Close()
		_, err650 := mbTrans649.WriteString(arg648)
		if err650 != nil {
			Usage()
			return
		}
		factory651 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt652 := factory651.GetProtocol(mbTrans649)
		containerStruct2 := hive.NewAlterPartitionsArgs()
		err653 := containerStruct2.ReadField3(jsProt652)
		if err653 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.NewParts_
		value2 := argvalue2
		fmt.Print(client.AlterPartitions(value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partition_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterPartitionWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg656 := flag.Arg(3)
		mbTrans657 := thrift.NewTMemoryBufferLen(len(arg656))
		defer mbTrans657.Close()
		_, err658 := mbTrans657.WriteString(arg656)
		if err658 != nil {
			Usage()
			return
		}
		factory659 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt660 := factory659.GetProtocol(mbTrans657)
		argvalue2 := hive.NewPartition()
		err661 := argvalue2.Read(jsProt660)
		if err661 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg662 := flag.Arg(4)
		mbTrans663 := thrift.NewTMemoryBufferLen(len(arg662))
		defer mbTrans663.Close()
		_, err664 := mbTrans663.WriteString(arg662)
		if err664 != nil {
			Usage()
			return
		}
		factory665 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt666 := factory665.GetProtocol(mbTrans663)
		argvalue3 := hive.NewEnvironmentContext()
		err667 := argvalue3.Read(jsProt666)
		if err667 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterPartitionWithEnvironmentContext(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "rename_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "RenamePartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg670 := flag.Arg(3)
		mbTrans671 := thrift.NewTMemoryBufferLen(len(arg670))
		defer mbTrans671.Close()
		_, err672 := mbTrans671.WriteString(arg670)
		if err672 != nil {
			Usage()
			return
		}
		factory673 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt674 := factory673.GetProtocol(mbTrans671)
		containerStruct2 := hive.NewRenamePartitionArgs()
		err675 := containerStruct2.ReadField3(jsProt674)
		if err675 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		arg676 := flag.Arg(4)
		mbTrans677 := thrift.NewTMemoryBufferLen(len(arg676))
		defer mbTrans677.Close()
		_, err678 := mbTrans677.WriteString(arg676)
		if err678 != nil {
			Usage()
			return
		}
		factory679 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt680 := factory679.GetProtocol(mbTrans677)
		argvalue3 := hive.NewPartition()
		err681 := argvalue3.Read(jsProt680)
		if err681 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.RenamePartition(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "partition_name_has_valid_characters":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PartitionNameHasValidCharacters requires 2 args")
			flag.Usage()
		}
		arg682 := flag.Arg(1)
		mbTrans683 := thrift.NewTMemoryBufferLen(len(arg682))
		defer mbTrans683.Close()
		_, err684 := mbTrans683.WriteString(arg682)
		if err684 != nil {
			Usage()
			return
		}
		factory685 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt686 := factory685.GetProtocol(mbTrans683)
		containerStruct0 := hive.NewPartitionNameHasValidCharactersArgs()
		err687 := containerStruct0.ReadField1(jsProt686)
		if err687 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartVals
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.PartitionNameHasValidCharacters(value0, value1))
		fmt.Print("\n")
		break
	case "get_config_value":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetConfigValue(value0, value1))
		fmt.Print("\n")
		break
	case "partition_name_to_vals":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToVals(value0))
		fmt.Print("\n")
		break
	case "partition_name_to_spec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToSpec(value0))
		fmt.Print("\n")
		break
	case "markPartitionForEvent":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MarkPartitionForEvent requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg695 := flag.Arg(3)
		mbTrans696 := thrift.NewTMemoryBufferLen(len(arg695))
		defer mbTrans696.Close()
		_, err697 := mbTrans696.WriteString(arg695)
		if err697 != nil {
			Usage()
			return
		}
		factory698 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt699 := factory698.GetProtocol(mbTrans696)
		containerStruct2 := hive.NewMarkPartitionForEventArgs()
		err700 := containerStruct2.ReadField3(jsProt699)
		if err700 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := hive.PartitionEventType(tmp3)
		value3 := argvalue3
		fmt.Print(client.MarkPartitionForEvent(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "isPartitionMarkedForEvent":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "IsPartitionMarkedForEvent requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg703 := flag.Arg(3)
		mbTrans704 := thrift.NewTMemoryBufferLen(len(arg703))
		defer mbTrans704.Close()
		_, err705 := mbTrans704.WriteString(arg703)
		if err705 != nil {
			Usage()
			return
		}
		factory706 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt707 := factory706.GetProtocol(mbTrans704)
		containerStruct2 := hive.NewIsPartitionMarkedForEventArgs()
		err708 := containerStruct2.ReadField3(jsProt707)
		if err708 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := hive.PartitionEventType(tmp3)
		value3 := argvalue3
		fmt.Print(client.IsPartitionMarkedForEvent(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "add_index":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddIndex requires 2 args")
			flag.Usage()
		}
		arg709 := flag.Arg(1)
		mbTrans710 := thrift.NewTMemoryBufferLen(len(arg709))
		defer mbTrans710.Close()
		_, err711 := mbTrans710.WriteString(arg709)
		if err711 != nil {
			Usage()
			return
		}
		factory712 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt713 := factory712.GetProtocol(mbTrans710)
		argvalue0 := hive.NewIndex()
		err714 := argvalue0.Read(jsProt713)
		if err714 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg715 := flag.Arg(2)
		mbTrans716 := thrift.NewTMemoryBufferLen(len(arg715))
		defer mbTrans716.Close()
		_, err717 := mbTrans716.WriteString(arg715)
		if err717 != nil {
			Usage()
			return
		}
		factory718 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt719 := factory718.GetProtocol(mbTrans716)
		argvalue1 := hive.NewTable()
		err720 := argvalue1.Read(jsProt719)
		if err720 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AddIndex(value0, value1))
		fmt.Print("\n")
		break
	case "alter_index":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterIndex requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg724 := flag.Arg(4)
		mbTrans725 := thrift.NewTMemoryBufferLen(len(arg724))
		defer mbTrans725.Close()
		_, err726 := mbTrans725.WriteString(arg724)
		if err726 != nil {
			Usage()
			return
		}
		factory727 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt728 := factory727.GetProtocol(mbTrans725)
		argvalue3 := hive.NewIndex()
		err729 := argvalue3.Read(jsProt728)
		if err729 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterIndex(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_index_by_name":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropIndexByName requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropIndexByName(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_index_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetIndexByName(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_indexes":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexes requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err739 := (strconv.Atoi(flag.Arg(3)))
		if err739 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetIndexes(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_index_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err742 := (strconv.Atoi(flag.Arg(3)))
		if err742 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetIndexNames(value0, value1, value2))
		fmt.Print("\n")
		break
	case "update_table_column_statistics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateTableColumnStatistics requires 1 args")
			flag.Usage()
		}
		arg743 := flag.Arg(1)
		mbTrans744 := thrift.NewTMemoryBufferLen(len(arg743))
		defer mbTrans744.Close()
		_, err745 := mbTrans744.WriteString(arg743)
		if err745 != nil {
			Usage()
			return
		}
		factory746 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt747 := factory746.GetProtocol(mbTrans744)
		argvalue0 := hive.NewColumnStatistics()
		err748 := argvalue0.Read(jsProt747)
		if err748 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateTableColumnStatistics(value0))
		fmt.Print("\n")
		break
	case "update_partition_column_statistics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatistics requires 1 args")
			flag.Usage()
		}
		arg749 := flag.Arg(1)
		mbTrans750 := thrift.NewTMemoryBufferLen(len(arg749))
		defer mbTrans750.Close()
		_, err751 := mbTrans750.WriteString(arg749)
		if err751 != nil {
			Usage()
			return
		}
		factory752 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt753 := factory752.GetProtocol(mbTrans750)
		argvalue0 := hive.NewColumnStatistics()
		err754 := argvalue0.Read(jsProt753)
		if err754 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdatePartitionColumnStatistics(value0))
		fmt.Print("\n")
		break
	case "get_table_column_statistics":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableColumnStatistics requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetTableColumnStatistics(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_column_statistics":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionColumnStatistics requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.GetPartitionColumnStatistics(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_table_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg762 := flag.Arg(1)
		mbTrans763 := thrift.NewTMemoryBufferLen(len(arg762))
		defer mbTrans763.Close()
		_, err764 := mbTrans763.WriteString(arg762)
		if err764 != nil {
			Usage()
			return
		}
		factory765 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt766 := factory765.GetProtocol(mbTrans763)
		argvalue0 := hive.NewTableStatsRequest()
		err767 := argvalue0.Read(jsProt766)
		if err767 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableStatisticsReq(value0))
		fmt.Print("\n")
		break
	case "get_partitions_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg768 := flag.Arg(1)
		mbTrans769 := thrift.NewTMemoryBufferLen(len(arg768))
		defer mbTrans769.Close()
		_, err770 := mbTrans769.WriteString(arg768)
		if err770 != nil {
			Usage()
			return
		}
		factory771 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt772 := factory771.GetProtocol(mbTrans769)
		argvalue0 := hive.NewPartitionsStatsRequest()
		err773 := argvalue0.Read(jsProt772)
		if err773 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsStatisticsReq(value0))
		fmt.Print("\n")
		break
	case "delete_partition_column_statistics":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DeletePartitionColumnStatistics requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.DeletePartitionColumnStatistics(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "delete_table_column_statistics":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DeleteTableColumnStatistics requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.DeleteTableColumnStatistics(value0, value1, value2))
		fmt.Print("\n")
		break
	case "create_function":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateFunction requires 1 args")
			flag.Usage()
		}
		arg781 := flag.Arg(1)
		mbTrans782 := thrift.NewTMemoryBufferLen(len(arg781))
		defer mbTrans782.Close()
		_, err783 := mbTrans782.WriteString(arg781)
		if err783 != nil {
			Usage()
			return
		}
		factory784 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt785 := factory784.GetProtocol(mbTrans782)
		argvalue0 := hive.NewFunction()
		err786 := argvalue0.Read(jsProt785)
		if err786 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateFunction(value0))
		fmt.Print("\n")
		break
	case "drop_function":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DropFunction requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DropFunction(value0, value1))
		fmt.Print("\n")
		break
	case "alter_function":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterFunction requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg791 := flag.Arg(3)
		mbTrans792 := thrift.NewTMemoryBufferLen(len(arg791))
		defer mbTrans792.Close()
		_, err793 := mbTrans792.WriteString(arg791)
		if err793 != nil {
			Usage()
			return
		}
		factory794 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt795 := factory794.GetProtocol(mbTrans792)
		argvalue2 := hive.NewFunction()
		err796 := argvalue2.Read(jsProt795)
		if err796 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterFunction(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_functions":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFunctions requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFunctions(value0, value1))
		fmt.Print("\n")
		break
	case "get_function":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFunction requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFunction(value0, value1))
		fmt.Print("\n")
		break
	case "create_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
			flag.Usage()
		}
		arg801 := flag.Arg(1)
		mbTrans802 := thrift.NewTMemoryBufferLen(len(arg801))
		defer mbTrans802.Close()
		_, err803 := mbTrans802.WriteString(arg801)
		if err803 != nil {
			Usage()
			return
		}
		factory804 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt805 := factory804.GetProtocol(mbTrans802)
		argvalue0 := hive.NewRole()
		err806 := argvalue0.Read(jsProt805)
		if err806 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateRole(value0))
		fmt.Print("\n")
		break
	case "drop_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropRole(value0))
		fmt.Print("\n")
		break
	case "get_role_names":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRoleNames())
		fmt.Print("\n")
		break
	case "grant_role":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive.PrincipalType(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		tmp4, err := (strconv.Atoi(flag.Arg(5)))
		if err != nil {
			Usage()
			return
		}
		argvalue4 := hive.PrincipalType(tmp4)
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GrantRole(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "revoke_role":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive.PrincipalType(tmp2)
		value2 := argvalue2
		fmt.Print(client.RevokeRole(value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_roles":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive.PrincipalType(tmp1)
		value1 := argvalue1
		fmt.Print(client.ListRoles(value0, value1))
		fmt.Print("\n")
		break
	case "get_principals_in_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPrincipalsInRole requires 1 args")
			flag.Usage()
		}
		arg815 := flag.Arg(1)
		mbTrans816 := thrift.NewTMemoryBufferLen(len(arg815))
		defer mbTrans816.Close()
		_, err817 := mbTrans816.WriteString(arg815)
		if err817 != nil {
			Usage()
			return
		}
		factory818 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt819 := factory818.GetProtocol(mbTrans816)
		argvalue0 := hive.NewGetPrincipalsInRoleRequest()
		err820 := argvalue0.Read(jsProt819)
		if err820 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPrincipalsInRole(value0))
		fmt.Print("\n")
		break
	case "get_role_grants_for_principal":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRoleGrantsForPrincipal requires 1 args")
			flag.Usage()
		}
		arg821 := flag.Arg(1)
		mbTrans822 := thrift.NewTMemoryBufferLen(len(arg821))
		defer mbTrans822.Close()
		_, err823 := mbTrans822.WriteString(arg821)
		if err823 != nil {
			Usage()
			return
		}
		factory824 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt825 := factory824.GetProtocol(mbTrans822)
		argvalue0 := hive.NewGetRoleGrantsForPrincipalRequest()
		err826 := argvalue0.Read(jsProt825)
		if err826 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetRoleGrantsForPrincipal(value0))
		fmt.Print("\n")
		break
	case "get_privilege_set":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
			flag.Usage()
		}
		arg827 := flag.Arg(1)
		mbTrans828 := thrift.NewTMemoryBufferLen(len(arg827))
		defer mbTrans828.Close()
		_, err829 := mbTrans828.WriteString(arg827)
		if err829 != nil {
			Usage()
			return
		}
		factory830 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt831 := factory830.GetProtocol(mbTrans828)
		argvalue0 := hive.NewHiveObjectRef()
		err832 := argvalue0.Read(jsProt831)
		if err832 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg834 := flag.Arg(3)
		mbTrans835 := thrift.NewTMemoryBufferLen(len(arg834))
		defer mbTrans835.Close()
		_, err836 := mbTrans835.WriteString(arg834)
		if err836 != nil {
			Usage()
			return
		}
		factory837 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt838 := factory837.GetProtocol(mbTrans835)
		containerStruct2 := hive.NewGetPrivilegeSetArgs()
		err839 := containerStruct2.ReadField3(jsProt838)
		if err839 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.GroupNames
		value2 := argvalue2
		fmt.Print(client.GetPrivilegeSet(value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_privileges":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive.PrincipalType(tmp1)
		value1 := argvalue1
		arg841 := flag.Arg(3)
		mbTrans842 := thrift.NewTMemoryBufferLen(len(arg841))
		defer mbTrans842.Close()
		_, err843 := mbTrans842.WriteString(arg841)
		if err843 != nil {
			Usage()
			return
		}
		factory844 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt845 := factory844.GetProtocol(mbTrans842)
		argvalue2 := hive.NewHiveObjectRef()
		err846 := argvalue2.Read(jsProt845)
		if err846 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.ListPrivileges(value0, value1, value2))
		fmt.Print("\n")
		break
	case "grant_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
			flag.Usage()
		}
		arg847 := flag.Arg(1)
		mbTrans848 := thrift.NewTMemoryBufferLen(len(arg847))
		defer mbTrans848.Close()
		_, err849 := mbTrans848.WriteString(arg847)
		if err849 != nil {
			Usage()
			return
		}
		factory850 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt851 := factory850.GetProtocol(mbTrans848)
		argvalue0 := hive.NewPrivilegeBag()
		err852 := argvalue0.Read(jsProt851)
		if err852 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantPrivileges(value0))
		fmt.Print("\n")
		break
	case "revoke_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
			flag.Usage()
		}
		arg853 := flag.Arg(1)
		mbTrans854 := thrift.NewTMemoryBufferLen(len(arg853))
		defer mbTrans854.Close()
		_, err855 := mbTrans854.WriteString(arg853)
		if err855 != nil {
			Usage()
			return
		}
		factory856 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt857 := factory856.GetProtocol(mbTrans854)
		argvalue0 := hive.NewPrivilegeBag()
		err858 := argvalue0.Read(jsProt857)
		if err858 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RevokePrivileges(value0))
		fmt.Print("\n")
		break
	case "set_ugi":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetUgi requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg860 := flag.Arg(2)
		mbTrans861 := thrift.NewTMemoryBufferLen(len(arg860))
		defer mbTrans861.Close()
		_, err862 := mbTrans861.WriteString(arg860)
		if err862 != nil {
			Usage()
			return
		}
		factory863 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt864 := factory863.GetProtocol(mbTrans861)
		containerStruct1 := hive.NewSetUgiArgs()
		err865 := containerStruct1.ReadField2(jsProt864)
		if err865 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.GroupNames
		value1 := argvalue1
		fmt.Print(client.SetUgi(value0, value1))
		fmt.Print("\n")
		break
	case "get_delegation_token":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetDelegationToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetDelegationToken(value0, value1))
		fmt.Print("\n")
		break
	case "renew_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RenewDelegationToken(value0))
		fmt.Print("\n")
		break
	case "cancel_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.CancelDelegationToken(value0))
		fmt.Print("\n")
		break
	case "get_open_txns":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOpenTxns requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOpenTxns())
		fmt.Print("\n")
		break
	case "get_open_txns_info":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOpenTxnsInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOpenTxnsInfo())
		fmt.Print("\n")
		break
	case "open_txns":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OpenTxns requires 1 args")
			flag.Usage()
		}
		arg870 := flag.Arg(1)
		mbTrans871 := thrift.NewTMemoryBufferLen(len(arg870))
		defer mbTrans871.Close()
		_, err872 := mbTrans871.WriteString(arg870)
		if err872 != nil {
			Usage()
			return
		}
		factory873 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt874 := factory873.GetProtocol(mbTrans871)
		argvalue0 := hive.NewOpenTxnRequest()
		err875 := argvalue0.Read(jsProt874)
		if err875 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OpenTxns(value0))
		fmt.Print("\n")
		break
	case "abort_txn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AbortTxn requires 1 args")
			flag.Usage()
		}
		arg876 := flag.Arg(1)
		mbTrans877 := thrift.NewTMemoryBufferLen(len(arg876))
		defer mbTrans877.Close()
		_, err878 := mbTrans877.WriteString(arg876)
		if err878 != nil {
			Usage()
			return
		}
		factory879 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt880 := factory879.GetProtocol(mbTrans877)
		argvalue0 := hive.NewAbortTxnRequest()
		err881 := argvalue0.Read(jsProt880)
		if err881 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AbortTxn(value0))
		fmt.Print("\n")
		break
	case "commit_txn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CommitTxn requires 1 args")
			flag.Usage()
		}
		arg882 := flag.Arg(1)
		mbTrans883 := thrift.NewTMemoryBufferLen(len(arg882))
		defer mbTrans883.Close()
		_, err884 := mbTrans883.WriteString(arg882)
		if err884 != nil {
			Usage()
			return
		}
		factory885 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt886 := factory885.GetProtocol(mbTrans883)
		argvalue0 := hive.NewCommitTxnRequest()
		err887 := argvalue0.Read(jsProt886)
		if err887 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CommitTxn(value0))
		fmt.Print("\n")
		break
	case "lock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Lock requires 1 args")
			flag.Usage()
		}
		arg888 := flag.Arg(1)
		mbTrans889 := thrift.NewTMemoryBufferLen(len(arg888))
		defer mbTrans889.Close()
		_, err890 := mbTrans889.WriteString(arg888)
		if err890 != nil {
			Usage()
			return
		}
		factory891 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt892 := factory891.GetProtocol(mbTrans889)
		argvalue0 := hive.NewLockRequest()
		err893 := argvalue0.Read(jsProt892)
		if err893 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Lock(value0))
		fmt.Print("\n")
		break
	case "check_lock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CheckLock requires 1 args")
			flag.Usage()
		}
		arg894 := flag.Arg(1)
		mbTrans895 := thrift.NewTMemoryBufferLen(len(arg894))
		defer mbTrans895.Close()
		_, err896 := mbTrans895.WriteString(arg894)
		if err896 != nil {
			Usage()
			return
		}
		factory897 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt898 := factory897.GetProtocol(mbTrans895)
		argvalue0 := hive.NewCheckLockRequest()
		err899 := argvalue0.Read(jsProt898)
		if err899 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CheckLock(value0))
		fmt.Print("\n")
		break
	case "unlock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Unlock requires 1 args")
			flag.Usage()
		}
		arg900 := flag.Arg(1)
		mbTrans901 := thrift.NewTMemoryBufferLen(len(arg900))
		defer mbTrans901.Close()
		_, err902 := mbTrans901.WriteString(arg900)
		if err902 != nil {
			Usage()
			return
		}
		factory903 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt904 := factory903.GetProtocol(mbTrans901)
		argvalue0 := hive.NewUnlockRequest()
		err905 := argvalue0.Read(jsProt904)
		if err905 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Unlock(value0))
		fmt.Print("\n")
		break
	case "show_locks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ShowLocks requires 1 args")
			flag.Usage()
		}
		arg906 := flag.Arg(1)
		mbTrans907 := thrift.NewTMemoryBufferLen(len(arg906))
		defer mbTrans907.Close()
		_, err908 := mbTrans907.WriteString(arg906)
		if err908 != nil {
			Usage()
			return
		}
		factory909 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt910 := factory909.GetProtocol(mbTrans907)
		argvalue0 := hive.NewShowLocksRequest()
		err911 := argvalue0.Read(jsProt910)
		if err911 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ShowLocks(value0))
		fmt.Print("\n")
		break
	case "heartbeat":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Heartbeat requires 1 args")
			flag.Usage()
		}
		arg912 := flag.Arg(1)
		mbTrans913 := thrift.NewTMemoryBufferLen(len(arg912))
		defer mbTrans913.Close()
		_, err914 := mbTrans913.WriteString(arg912)
		if err914 != nil {
			Usage()
			return
		}
		factory915 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt916 := factory915.GetProtocol(mbTrans913)
		argvalue0 := hive.NewHeartbeatRequest()
		err917 := argvalue0.Read(jsProt916)
		if err917 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Heartbeat(value0))
		fmt.Print("\n")
		break
	case "heartbeat_txn_range":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "HeartbeatTxnRange requires 1 args")
			flag.Usage()
		}
		arg918 := flag.Arg(1)
		mbTrans919 := thrift.NewTMemoryBufferLen(len(arg918))
		defer mbTrans919.Close()
		_, err920 := mbTrans919.WriteString(arg918)
		if err920 != nil {
			Usage()
			return
		}
		factory921 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt922 := factory921.GetProtocol(mbTrans919)
		argvalue0 := hive.NewHeartbeatTxnRangeRequest()
		err923 := argvalue0.Read(jsProt922)
		if err923 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.HeartbeatTxnRange(value0))
		fmt.Print("\n")
		break
	case "compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact requires 1 args")
			flag.Usage()
		}
		arg924 := flag.Arg(1)
		mbTrans925 := thrift.NewTMemoryBufferLen(len(arg924))
		defer mbTrans925.Close()
		_, err926 := mbTrans925.WriteString(arg924)
		if err926 != nil {
			Usage()
			return
		}
		factory927 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt928 := factory927.GetProtocol(mbTrans925)
		argvalue0 := hive.NewCompactionRequest()
		err929 := argvalue0.Read(jsProt928)
		if err929 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Compact(value0))
		fmt.Print("\n")
		break
	case "show_compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ShowCompact requires 1 args")
			flag.Usage()
		}
		arg930 := flag.Arg(1)
		mbTrans931 := thrift.NewTMemoryBufferLen(len(arg930))
		defer mbTrans931.Close()
		_, err932 := mbTrans931.WriteString(arg930)
		if err932 != nil {
			Usage()
			return
		}
		factory933 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt934 := factory933.GetProtocol(mbTrans931)
		argvalue0 := hive.NewShowCompactRequest()
		err935 := argvalue0.Read(jsProt934)
		if err935 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ShowCompact(value0))
		fmt.Print("\n")
		break
	case "getName":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetName requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetName())
		fmt.Print("\n")
		break
	case "getVersion":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetVersion requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetVersion())
		fmt.Print("\n")
		break
	case "getStatus":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetStatus requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetStatus())
		fmt.Print("\n")
		break
	case "getStatusDetails":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetStatusDetails requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetStatusDetails())
		fmt.Print("\n")
		break
	case "getCounters":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCounters requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCounters())
		fmt.Print("\n")
		break
	case "getCounter":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCounter requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetCounter(value0))
		fmt.Print("\n")
		break
	case "setOption":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetOption requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SetOption(value0, value1))
		fmt.Print("\n")
		break
	case "getOption":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetOption requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetOption(value0))
		fmt.Print("\n")
		break
	case "getOptions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOptions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOptions())
		fmt.Print("\n")
		break
	case "getCpuProfile":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCpuProfile requires 1 args")
			flag.Usage()
		}
		tmp0, err940 := (strconv.Atoi(flag.Arg(1)))
		if err940 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetCpuProfile(value0))
		fmt.Print("\n")
		break
	case "aliveSince":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "AliveSince requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.AliveSince())
		fmt.Print("\n")
		break
	case "reinitialize":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Reinitialize requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Reinitialize())
		fmt.Print("\n")
		break
	case "shutdown":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Shutdown requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Shutdown())
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
