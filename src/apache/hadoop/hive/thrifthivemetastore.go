// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hive

import (
	"bytes"
	"fb303"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = fb303.GoUnusedProtection__

type ThriftHiveMetastore interface {
	fb303.FacebookService
	//This interface is live.

	// Parameters:
	//  - Database
	CreateDatabase(database *Database) (err error)
	// Parameters:
	//  - Name
	GetDatabase(name string) (r *Database, err error)
	// Parameters:
	//  - Name
	//  - DeleteData
	//  - Cascade
	DropDatabase(name string, deleteData bool, cascade bool) (err error)
	// Parameters:
	//  - Pattern
	GetDatabases(pattern string) (r []string, err error)
	GetAllDatabases() (r []string, err error)
	// Parameters:
	//  - Dbname
	//  - Db
	AlterDatabase(dbname string, db *Database) (err error)
	// Parameters:
	//  - Name
	GetType(name string) (r *Type, err error)
	// Parameters:
	//  - TypeA1
	CreateType(type_a1 *Type) (r bool, err error)
	// Parameters:
	//  - TypeA1
	DropType(type_a1 string) (r bool, err error)
	// Parameters:
	//  - Name
	GetTypeAll(name string) (r map[string]*Type, err error)
	// Parameters:
	//  - DbName
	//  - TableName
	GetFields(db_name string, table_name string) (r []*FieldSchema, err error)
	// Parameters:
	//  - DbName
	//  - TableName
	GetSchema(db_name string, table_name string) (r []*FieldSchema, err error)
	// Parameters:
	//  - Tbl
	CreateTable(tbl *Table) (err error)
	// Parameters:
	//  - Tbl
	//  - EnvironmentContext
	CreateTableWithEnvironmentContext(tbl *Table, environment_context *EnvironmentContext) (err error)
	// Parameters:
	//  - Dbname
	//  - Name
	//  - DeleteData
	DropTable(dbname string, name string, deleteData bool) (err error)
	// Parameters:
	//  - Dbname
	//  - Name
	//  - DeleteData
	//  - EnvironmentContext
	DropTableWithEnvironmentContext(dbname string, name string, deleteData bool, environment_context *EnvironmentContext) (err error)
	// Parameters:
	//  - DbName
	//  - Pattern
	GetTables(db_name string, pattern string) (r []string, err error)
	// Parameters:
	//  - DbName
	GetAllTables(db_name string) (r []string, err error)
	// Parameters:
	//  - Dbname
	//  - TblName
	GetTable(dbname string, tbl_name string) (r *Table, err error)
	// Parameters:
	//  - Dbname
	//  - TblNames
	GetTableObjectsByName(dbname string, tbl_names []string) (r []*Table, err error)
	// Parameters:
	//  - Dbname
	//  - Filter
	//  - MaxTables
	GetTableNamesByFilter(dbname string, filter string, max_tables int16) (r []string, err error)
	// Parameters:
	//  - Dbname
	//  - TblName
	//  - NewTbl_
	AlterTable(dbname string, tbl_name string, new_tbl *Table) (err error)
	// Parameters:
	//  - Dbname
	//  - TblName
	//  - NewTbl_
	//  - EnvironmentContext
	AlterTableWithEnvironmentContext(dbname string, tbl_name string, new_tbl *Table, environment_context *EnvironmentContext) (err error)
	// Parameters:
	//  - NewPart_
	AddPartition(new_part *Partition) (r *Partition, err error)
	// Parameters:
	//  - NewPart_
	//  - EnvironmentContext
	AddPartitionWithEnvironmentContext(new_part *Partition, environment_context *EnvironmentContext) (r *Partition, err error)
	// Parameters:
	//  - NewParts_
	AddPartitions(new_parts []*Partition) (r int32, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	AppendPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, err error)
	// Parameters:
	//  - Request
	AddPartitionsReq(request *AddPartitionsRequest) (r *AddPartitionsResult_, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - EnvironmentContext
	AppendPartitionWithEnvironmentContext(db_name string, tbl_name string, part_vals []string, environment_context *EnvironmentContext) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	AppendPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	//  - EnvironmentContext
	AppendPartitionByNameWithEnvironmentContext(db_name string, tbl_name string, part_name string, environment_context *EnvironmentContext) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - DeleteData
	DropPartition(db_name string, tbl_name string, part_vals []string, deleteData bool) (r bool, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - DeleteData
	//  - EnvironmentContext
	DropPartitionWithEnvironmentContext(db_name string, tbl_name string, part_vals []string, deleteData bool, environment_context *EnvironmentContext) (r bool, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	//  - DeleteData
	DropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool) (r bool, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	//  - DeleteData
	//  - EnvironmentContext
	DropPartitionByNameWithEnvironmentContext(db_name string, tbl_name string, part_name string, deleteData bool, environment_context *EnvironmentContext) (r bool, err error)
	// Parameters:
	//  - Req
	DropPartitionsReq(req *DropPartitionsRequest) (r *DropPartitionsResult_, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	GetPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, err error)
	// Parameters:
	//  - PartitionSpecs
	//  - SourceDb
	//  - SourceTableName
	//  - DestDb
	//  - DestTableName
	ExchangePartition(partitionSpecs map[string]string, source_db string, source_table_name string, dest_db string, dest_table_name string) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - UserName
	//  - GroupNames
	GetPartitionWithAuth(db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	GetPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxParts
	GetPartitions(db_name string, tbl_name string, max_parts int16) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxParts
	//  - UserName
	//  - GroupNames
	GetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxParts
	GetPartitionNames(db_name string, tbl_name string, max_parts int16) (r []string, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - MaxParts
	GetPartitionsPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - MaxParts
	//  - UserName
	//  - GroupNames
	GetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - MaxParts
	GetPartitionNamesPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []string, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - Filter
	//  - MaxParts
	GetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16) (r []*Partition, err error)
	// Parameters:
	//  - Req
	GetPartitionsByExpr(req *PartitionsByExprRequest) (r *PartitionsByExprResult_, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - Names
	GetPartitionsByNames(db_name string, tbl_name string, names []string) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - NewPart_
	AlterPartition(db_name string, tbl_name string, new_part *Partition) (err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - NewParts_
	AlterPartitions(db_name string, tbl_name string, new_parts []*Partition) (err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - NewPart_
	//  - EnvironmentContext
	AlterPartitionWithEnvironmentContext(db_name string, tbl_name string, new_part *Partition, environment_context *EnvironmentContext) (err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - NewPart_
	RenamePartition(db_name string, tbl_name string, part_vals []string, new_part *Partition) (err error)
	// Parameters:
	//  - PartVals
	//  - ThrowException
	PartitionNameHasValidCharacters(part_vals []string, throw_exception bool) (r bool, err error)
	// Parameters:
	//  - Name
	//  - DefaultValue
	GetConfigValue(name string, defaultValue string) (r string, err error)
	// Parameters:
	//  - PartName
	PartitionNameToVals(part_name string) (r []string, err error)
	// Parameters:
	//  - PartName
	PartitionNameToSpec(part_name string) (r map[string]string, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - EventType
	MarkPartitionForEvent(db_name string, tbl_name string, part_vals map[string]string, eventType PartitionEventType) (err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - EventType
	IsPartitionMarkedForEvent(db_name string, tbl_name string, part_vals map[string]string, eventType PartitionEventType) (r bool, err error)
	// Parameters:
	//  - NewIndex_
	//  - IndexTable
	AddIndex(new_index *Index, index_table *Table) (r *Index, err error)
	// Parameters:
	//  - Dbname
	//  - BaseTblName
	//  - IdxName
	//  - NewIdx_
	AlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - IndexName
	//  - DeleteData
	DropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool) (r bool, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - IndexName
	GetIndexByName(db_name string, tbl_name string, index_name string) (r *Index, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxIndexes
	GetIndexes(db_name string, tbl_name string, max_indexes int16) (r []*Index, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxIndexes
	GetIndexNames(db_name string, tbl_name string, max_indexes int16) (r []string, err error)
	// Parameters:
	//  - StatsObj
	UpdateTableColumnStatistics(stats_obj *ColumnStatistics) (r bool, err error)
	// Parameters:
	//  - StatsObj
	UpdatePartitionColumnStatistics(stats_obj *ColumnStatistics) (r bool, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - ColName
	GetTableColumnStatistics(db_name string, tbl_name string, col_name string) (r *ColumnStatistics, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	//  - ColName
	GetPartitionColumnStatistics(db_name string, tbl_name string, part_name string, col_name string) (r *ColumnStatistics, err error)
	// Parameters:
	//  - Request
	GetTableStatisticsReq(request *TableStatsRequest) (r *TableStatsResult_, err error)
	// Parameters:
	//  - Request
	GetPartitionsStatisticsReq(request *PartitionsStatsRequest) (r *PartitionsStatsResult_, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	//  - ColName
	DeletePartitionColumnStatistics(db_name string, tbl_name string, part_name string, col_name string) (r bool, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - ColName
	DeleteTableColumnStatistics(db_name string, tbl_name string, col_name string) (r bool, err error)
	// Parameters:
	//  - FuncA1
	CreateFunction(func_a1 *Function) (err error)
	// Parameters:
	//  - DbName
	//  - FuncName
	DropFunction(dbName string, funcName string) (err error)
	// Parameters:
	//  - DbName
	//  - FuncName
	//  - NewFunc_
	AlterFunction(dbName string, funcName string, newFunc *Function) (err error)
	// Parameters:
	//  - DbName
	//  - Pattern
	GetFunctions(dbName string, pattern string) (r []string, err error)
	// Parameters:
	//  - DbName
	//  - FuncName
	GetFunction(dbName string, funcName string) (r *Function, err error)
	// Parameters:
	//  - Role
	CreateRole(role *Role) (r bool, err error)
	// Parameters:
	//  - RoleName
	DropRole(role_name string) (r bool, err error)
	GetRoleNames() (r []string, err error)
	// Parameters:
	//  - RoleName
	//  - PrincipalName
	//  - PrincipalType
	//  - Grantor
	//  - GrantorType
	//  - GrantOption
	GrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (r bool, err error)
	// Parameters:
	//  - RoleName
	//  - PrincipalName
	//  - PrincipalType
	RevokeRole(role_name string, principal_name string, principal_type PrincipalType) (r bool, err error)
	// Parameters:
	//  - PrincipalName
	//  - PrincipalType
	ListRoles(principal_name string, principal_type PrincipalType) (r []*Role, err error)
	// Parameters:
	//  - Request
	GetPrincipalsInRole(request *GetPrincipalsInRoleRequest) (r *GetPrincipalsInRoleResponse, err error)
	// Parameters:
	//  - Request
	GetRoleGrantsForPrincipal(request *GetRoleGrantsForPrincipalRequest) (r *GetRoleGrantsForPrincipalResponse, err error)
	// Parameters:
	//  - HiveObject
	//  - UserName
	//  - GroupNames
	GetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names []string) (r *PrincipalPrivilegeSet, err error)
	// Parameters:
	//  - PrincipalName
	//  - PrincipalType
	//  - HiveObject
	ListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (r []*HiveObjectPrivilege, err error)
	// Parameters:
	//  - Privileges
	GrantPrivileges(privileges *PrivilegeBag) (r bool, err error)
	// Parameters:
	//  - Privileges
	RevokePrivileges(privileges *PrivilegeBag) (r bool, err error)
	// Parameters:
	//  - UserName
	//  - GroupNames
	SetUgi(user_name string, group_names []string) (r []string, err error)
	// Parameters:
	//  - TokenOwner
	//  - RenewerKerberosPrincipalName
	GetDelegationToken(token_owner string, renewer_kerberos_principal_name string) (r string, err error)
	// Parameters:
	//  - TokenStrForm
	RenewDelegationToken(token_str_form string) (r int64, err error)
	// Parameters:
	//  - TokenStrForm
	CancelDelegationToken(token_str_form string) (err error)
	GetOpenTxns() (r *GetOpenTxnsResponse, err error)
	GetOpenTxnsInfo() (r *GetOpenTxnsInfoResponse, err error)
	// Parameters:
	//  - Rqst
	OpenTxns(rqst *OpenTxnRequest) (r *OpenTxnsResponse, err error)
	// Parameters:
	//  - Rqst
	AbortTxn(rqst *AbortTxnRequest) (err error)
	// Parameters:
	//  - Rqst
	CommitTxn(rqst *CommitTxnRequest) (err error)
	// Parameters:
	//  - Rqst
	Lock(rqst *LockRequest) (r *LockResponse, err error)
	// Parameters:
	//  - Rqst
	CheckLock(rqst *CheckLockRequest) (r *LockResponse, err error)
	// Parameters:
	//  - Rqst
	Unlock(rqst *UnlockRequest) (err error)
	// Parameters:
	//  - Rqst
	ShowLocks(rqst *ShowLocksRequest) (r *ShowLocksResponse, err error)
	// Parameters:
	//  - Ids
	Heartbeat(ids *HeartbeatRequest) (err error)
	// Parameters:
	//  - Txns
	HeartbeatTxnRange(txns *HeartbeatTxnRangeRequest) (r *HeartbeatTxnRangeResponse, err error)
	// Parameters:
	//  - Rqst
	Compact(rqst *CompactionRequest) (err error)
	// Parameters:
	//  - Rqst
	ShowCompact(rqst *ShowCompactRequest) (r *ShowCompactResponse, err error)
}

//This interface is live.
type ThriftHiveMetastoreClient struct {
	*fb303.FacebookServiceClient
}

func NewThriftHiveMetastoreClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftHiveMetastoreClient {
	return &ThriftHiveMetastoreClient{FacebookServiceClient: fb303.NewFacebookServiceClientFactory(t, f)}
}

func NewThriftHiveMetastoreClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftHiveMetastoreClient {
	return &ThriftHiveMetastoreClient{FacebookServiceClient: fb303.NewFacebookServiceClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Database
func (p *ThriftHiveMetastoreClient) CreateDatabase(database *Database) (err error) {
	if err = p.sendCreateDatabase(database); err != nil {
		return
	}
	return p.recvCreateDatabase()
}

func (p *ThriftHiveMetastoreClient) sendCreateDatabase(database *Database) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_database", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateDatabaseArgs{
		Database: database,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCreateDatabase() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error59 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error60 error
		error60, err = error59.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error60
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_database failed: out of sequence response")
		return
	}
	result := CreateDatabaseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	return
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetDatabase(name string) (r *Database, err error) {
	if err = p.sendGetDatabase(name); err != nil {
		return
	}
	return p.recvGetDatabase()
}

func (p *ThriftHiveMetastoreClient) sendGetDatabase(name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_database", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetDatabaseArgs{
		Name: name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetDatabase() (value *Database, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error61 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error62 error
		error62, err = error61.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error62
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_database failed: out of sequence response")
		return
	}
	result := GetDatabaseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Name
//  - DeleteData
//  - Cascade
func (p *ThriftHiveMetastoreClient) DropDatabase(name string, deleteData bool, cascade bool) (err error) {
	if err = p.sendDropDatabase(name, deleteData, cascade); err != nil {
		return
	}
	return p.recvDropDatabase()
}

func (p *ThriftHiveMetastoreClient) sendDropDatabase(name string, deleteData bool, cascade bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_database", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropDatabaseArgs{
		Name:       name,
		DeleteData: deleteData,
		Cascade:    cascade,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropDatabase() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error63 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error64 error
		error64, err = error63.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error64
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_database failed: out of sequence response")
		return
	}
	result := DropDatabaseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	return
}

// Parameters:
//  - Pattern
func (p *ThriftHiveMetastoreClient) GetDatabases(pattern string) (r []string, err error) {
	if err = p.sendGetDatabases(pattern); err != nil {
		return
	}
	return p.recvGetDatabases()
}

func (p *ThriftHiveMetastoreClient) sendGetDatabases(pattern string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_databases", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetDatabasesArgs{
		Pattern: pattern,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetDatabases() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error65 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error66 error
		error66, err = error65.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error66
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_databases failed: out of sequence response")
		return
	}
	result := GetDatabasesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

func (p *ThriftHiveMetastoreClient) GetAllDatabases() (r []string, err error) {
	if err = p.sendGetAllDatabases(); err != nil {
		return
	}
	return p.recvGetAllDatabases()
}

func (p *ThriftHiveMetastoreClient) sendGetAllDatabases() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_all_databases", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetAllDatabasesArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetAllDatabases() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error67 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error68 error
		error68, err = error67.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error68
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_all_databases failed: out of sequence response")
		return
	}
	result := GetAllDatabasesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dbname
//  - Db
func (p *ThriftHiveMetastoreClient) AlterDatabase(dbname string, db *Database) (err error) {
	if err = p.sendAlterDatabase(dbname, db); err != nil {
		return
	}
	return p.recvAlterDatabase()
}

func (p *ThriftHiveMetastoreClient) sendAlterDatabase(dbname string, db *Database) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_database", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AlterDatabaseArgs{
		Dbname: dbname,
		Db:     db,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterDatabase() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error69 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error70 error
		error70, err = error69.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error70
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_database failed: out of sequence response")
		return
	}
	result := AlterDatabaseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetType(name string) (r *Type, err error) {
	if err = p.sendGetType(name); err != nil {
		return
	}
	return p.recvGetType()
}

func (p *ThriftHiveMetastoreClient) sendGetType(name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_type", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTypeArgs{
		Name: name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetType() (value *Type, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error71 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error72 error
		error72, err = error71.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error72
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_type failed: out of sequence response")
		return
	}
	result := GetTypeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TypeA1
func (p *ThriftHiveMetastoreClient) CreateType(type_a1 *Type) (r bool, err error) {
	if err = p.sendCreateType(type_a1); err != nil {
		return
	}
	return p.recvCreateType()
}

func (p *ThriftHiveMetastoreClient) sendCreateType(type_a1 *Type) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_type", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateTypeArgs{
		TypeA1: type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCreateType() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error73 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error74 error
		error74, err = error73.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error74
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_type failed: out of sequence response")
		return
	}
	result := CreateTypeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TypeA1
func (p *ThriftHiveMetastoreClient) DropType(type_a1 string) (r bool, err error) {
	if err = p.sendDropType(type_a1); err != nil {
		return
	}
	return p.recvDropType()
}

func (p *ThriftHiveMetastoreClient) sendDropType(type_a1 string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_type", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropTypeArgs{
		TypeA1: type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropType() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error75 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error76 error
		error76, err = error75.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error76
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_type failed: out of sequence response")
		return
	}
	result := DropTypeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetTypeAll(name string) (r map[string]*Type, err error) {
	if err = p.sendGetTypeAll(name); err != nil {
		return
	}
	return p.recvGetTypeAll()
}

func (p *ThriftHiveMetastoreClient) sendGetTypeAll(name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_type_all", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTypeAllArgs{
		Name: name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetTypeAll() (value map[string]*Type, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error77 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error78 error
		error78, err = error77.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error78
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_type_all failed: out of sequence response")
		return
	}
	result := GetTypeAllResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TableName
func (p *ThriftHiveMetastoreClient) GetFields(db_name string, table_name string) (r []*FieldSchema, err error) {
	if err = p.sendGetFields(db_name, table_name); err != nil {
		return
	}
	return p.recvGetFields()
}

func (p *ThriftHiveMetastoreClient) sendGetFields(db_name string, table_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_fields", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetFieldsArgs{
		DbName:    db_name,
		TableName: table_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetFields() (value []*FieldSchema, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error79 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error80 error
		error80, err = error79.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error80
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_fields failed: out of sequence response")
		return
	}
	result := GetFieldsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TableName
func (p *ThriftHiveMetastoreClient) GetSchema(db_name string, table_name string) (r []*FieldSchema, err error) {
	if err = p.sendGetSchema(db_name, table_name); err != nil {
		return
	}
	return p.recvGetSchema()
}

func (p *ThriftHiveMetastoreClient) sendGetSchema(db_name string, table_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_schema", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetSchemaArgs{
		DbName:    db_name,
		TableName: table_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetSchema() (value []*FieldSchema, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error81 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error82 error
		error82, err = error81.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error82
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_schema failed: out of sequence response")
		return
	}
	result := GetSchemaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Tbl
func (p *ThriftHiveMetastoreClient) CreateTable(tbl *Table) (err error) {
	if err = p.sendCreateTable(tbl); err != nil {
		return
	}
	return p.recvCreateTable()
}

func (p *ThriftHiveMetastoreClient) sendCreateTable(tbl *Table) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateTableArgs{
		Tbl: tbl,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCreateTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error83 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error84 error
		error84, err = error83.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error84
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_table failed: out of sequence response")
		return
	}
	result := CreateTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	} else if result.O4 != nil {
		err = result.O4
		return
	}
	return
}

// Parameters:
//  - Tbl
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) CreateTableWithEnvironmentContext(tbl *Table, environment_context *EnvironmentContext) (err error) {
	if err = p.sendCreateTableWithEnvironmentContext(tbl, environment_context); err != nil {
		return
	}
	return p.recvCreateTableWithEnvironmentContext()
}

func (p *ThriftHiveMetastoreClient) sendCreateTableWithEnvironmentContext(tbl *Table, environment_context *EnvironmentContext) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_table_with_environment_context", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateTableWithEnvironmentContextArgs{
		Tbl:                tbl,
		EnvironmentContext: environment_context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCreateTableWithEnvironmentContext() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error85 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error86 error
		error86, err = error85.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error86
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_table_with_environment_context failed: out of sequence response")
		return
	}
	result := CreateTableWithEnvironmentContextResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	} else if result.O4 != nil {
		err = result.O4
		return
	}
	return
}

// Parameters:
//  - Dbname
//  - Name
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropTable(dbname string, name string, deleteData bool) (err error) {
	if err = p.sendDropTable(dbname, name, deleteData); err != nil {
		return
	}
	return p.recvDropTable()
}

func (p *ThriftHiveMetastoreClient) sendDropTable(dbname string, name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropTableArgs{
		Dbname:     dbname,
		Name:       name,
		DeleteData: deleteData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error87 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error88 error
		error88, err = error87.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error88
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_table failed: out of sequence response")
		return
	}
	result := DropTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	return
}

// Parameters:
//  - Dbname
//  - Name
//  - DeleteData
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) DropTableWithEnvironmentContext(dbname string, name string, deleteData bool, environment_context *EnvironmentContext) (err error) {
	if err = p.sendDropTableWithEnvironmentContext(dbname, name, deleteData, environment_context); err != nil {
		return
	}
	return p.recvDropTableWithEnvironmentContext()
}

func (p *ThriftHiveMetastoreClient) sendDropTableWithEnvironmentContext(dbname string, name string, deleteData bool, environment_context *EnvironmentContext) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_table_with_environment_context", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropTableWithEnvironmentContextArgs{
		Dbname:             dbname,
		Name:               name,
		DeleteData:         deleteData,
		EnvironmentContext: environment_context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropTableWithEnvironmentContext() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error89 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error90 error
		error90, err = error89.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error90
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_table_with_environment_context failed: out of sequence response")
		return
	}
	result := DropTableWithEnvironmentContextResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	return
}

// Parameters:
//  - DbName
//  - Pattern
func (p *ThriftHiveMetastoreClient) GetTables(db_name string, pattern string) (r []string, err error) {
	if err = p.sendGetTables(db_name, pattern); err != nil {
		return
	}
	return p.recvGetTables()
}

func (p *ThriftHiveMetastoreClient) sendGetTables(db_name string, pattern string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_tables", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTablesArgs{
		DbName:  db_name,
		Pattern: pattern,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetTables() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error91 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error92 error
		error92, err = error91.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error92
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_tables failed: out of sequence response")
		return
	}
	result := GetTablesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
func (p *ThriftHiveMetastoreClient) GetAllTables(db_name string) (r []string, err error) {
	if err = p.sendGetAllTables(db_name); err != nil {
		return
	}
	return p.recvGetAllTables()
}

func (p *ThriftHiveMetastoreClient) sendGetAllTables(db_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_all_tables", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetAllTablesArgs{
		DbName: db_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetAllTables() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error93 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error94 error
		error94, err = error93.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error94
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_all_tables failed: out of sequence response")
		return
	}
	result := GetAllTablesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dbname
//  - TblName
func (p *ThriftHiveMetastoreClient) GetTable(dbname string, tbl_name string) (r *Table, err error) {
	if err = p.sendGetTable(dbname, tbl_name); err != nil {
		return
	}
	return p.recvGetTable()
}

func (p *ThriftHiveMetastoreClient) sendGetTable(dbname string, tbl_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTableArgs{
		Dbname:  dbname,
		TblName: tbl_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetTable() (value *Table, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error95 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error96 error
		error96, err = error95.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error96
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_table failed: out of sequence response")
		return
	}
	result := GetTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dbname
//  - TblNames
func (p *ThriftHiveMetastoreClient) GetTableObjectsByName(dbname string, tbl_names []string) (r []*Table, err error) {
	if err = p.sendGetTableObjectsByName(dbname, tbl_names); err != nil {
		return
	}
	return p.recvGetTableObjectsByName()
}

func (p *ThriftHiveMetastoreClient) sendGetTableObjectsByName(dbname string, tbl_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_table_objects_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTableObjectsByNameArgs{
		Dbname:   dbname,
		TblNames: tbl_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetTableObjectsByName() (value []*Table, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error97 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error98 error
		error98, err = error97.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error98
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_table_objects_by_name failed: out of sequence response")
		return
	}
	result := GetTableObjectsByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dbname
//  - Filter
//  - MaxTables
func (p *ThriftHiveMetastoreClient) GetTableNamesByFilter(dbname string, filter string, max_tables int16) (r []string, err error) {
	if err = p.sendGetTableNamesByFilter(dbname, filter, max_tables); err != nil {
		return
	}
	return p.recvGetTableNamesByFilter()
}

func (p *ThriftHiveMetastoreClient) sendGetTableNamesByFilter(dbname string, filter string, max_tables int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_table_names_by_filter", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTableNamesByFilterArgs{
		Dbname:    dbname,
		Filter:    filter,
		MaxTables: max_tables,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetTableNamesByFilter() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error99 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error100 error
		error100, err = error99.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error100
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_table_names_by_filter failed: out of sequence response")
		return
	}
	result := GetTableNamesByFilterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dbname
//  - TblName
//  - NewTbl_
func (p *ThriftHiveMetastoreClient) AlterTable(dbname string, tbl_name string, new_tbl *Table) (err error) {
	if err = p.sendAlterTable(dbname, tbl_name, new_tbl); err != nil {
		return
	}
	return p.recvAlterTable()
}

func (p *ThriftHiveMetastoreClient) sendAlterTable(dbname string, tbl_name string, new_tbl *Table) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AlterTableArgs{
		Dbname:  dbname,
		TblName: tbl_name,
		NewTbl_: new_tbl,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error101 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error102 error
		error102, err = error101.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error102
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_table failed: out of sequence response")
		return
	}
	result := AlterTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - Dbname
//  - TblName
//  - NewTbl_
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) AlterTableWithEnvironmentContext(dbname string, tbl_name string, new_tbl *Table, environment_context *EnvironmentContext) (err error) {
	if err = p.sendAlterTableWithEnvironmentContext(dbname, tbl_name, new_tbl, environment_context); err != nil {
		return
	}
	return p.recvAlterTableWithEnvironmentContext()
}

func (p *ThriftHiveMetastoreClient) sendAlterTableWithEnvironmentContext(dbname string, tbl_name string, new_tbl *Table, environment_context *EnvironmentContext) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_table_with_environment_context", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AlterTableWithEnvironmentContextArgs{
		Dbname:             dbname,
		TblName:            tbl_name,
		NewTbl_:            new_tbl,
		EnvironmentContext: environment_context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterTableWithEnvironmentContext() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error103 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error104 error
		error104, err = error103.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error104
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_table_with_environment_context failed: out of sequence response")
		return
	}
	result := AlterTableWithEnvironmentContextResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - NewPart_
func (p *ThriftHiveMetastoreClient) AddPartition(new_part *Partition) (r *Partition, err error) {
	if err = p.sendAddPartition(new_part); err != nil {
		return
	}
	return p.recvAddPartition()
}

func (p *ThriftHiveMetastoreClient) sendAddPartition(new_part *Partition) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("add_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AddPartitionArgs{
		NewPart_: new_part,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAddPartition() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error105 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error106 error
		error106, err = error105.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error106
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add_partition failed: out of sequence response")
		return
	}
	result := AddPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - NewPart_
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) AddPartitionWithEnvironmentContext(new_part *Partition, environment_context *EnvironmentContext) (r *Partition, err error) {
	if err = p.sendAddPartitionWithEnvironmentContext(new_part, environment_context); err != nil {
		return
	}
	return p.recvAddPartitionWithEnvironmentContext()
}

func (p *ThriftHiveMetastoreClient) sendAddPartitionWithEnvironmentContext(new_part *Partition, environment_context *EnvironmentContext) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("add_partition_with_environment_context", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AddPartitionWithEnvironmentContextArgs{
		NewPart_:           new_part,
		EnvironmentContext: environment_context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAddPartitionWithEnvironmentContext() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error107 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error108 error
		error108, err = error107.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error108
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add_partition_with_environment_context failed: out of sequence response")
		return
	}
	result := AddPartitionWithEnvironmentContextResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - NewParts_
func (p *ThriftHiveMetastoreClient) AddPartitions(new_parts []*Partition) (r int32, err error) {
	if err = p.sendAddPartitions(new_parts); err != nil {
		return
	}
	return p.recvAddPartitions()
}

func (p *ThriftHiveMetastoreClient) sendAddPartitions(new_parts []*Partition) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("add_partitions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AddPartitionsArgs{
		NewParts_: new_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAddPartitions() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error109 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error110 error
		error110, err = error109.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error110
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add_partitions failed: out of sequence response")
		return
	}
	result := AddPartitionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
func (p *ThriftHiveMetastoreClient) AppendPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, err error) {
	if err = p.sendAppendPartition(db_name, tbl_name, part_vals); err != nil {
		return
	}
	return p.recvAppendPartition()
}

func (p *ThriftHiveMetastoreClient) sendAppendPartition(db_name string, tbl_name string, part_vals []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("append_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AppendPartitionArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartVals: part_vals,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAppendPartition() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error111 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error112 error
		error112, err = error111.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error112
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "append_partition failed: out of sequence response")
		return
	}
	result := AppendPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) AddPartitionsReq(request *AddPartitionsRequest) (r *AddPartitionsResult_, err error) {
	if err = p.sendAddPartitionsReq(request); err != nil {
		return
	}
	return p.recvAddPartitionsReq()
}

func (p *ThriftHiveMetastoreClient) sendAddPartitionsReq(request *AddPartitionsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("add_partitions_req", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AddPartitionsReqArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAddPartitionsReq() (value *AddPartitionsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error113 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error114 error
		error114, err = error113.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error114
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add_partitions_req failed: out of sequence response")
		return
	}
	result := AddPartitionsReqResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) AppendPartitionWithEnvironmentContext(db_name string, tbl_name string, part_vals []string, environment_context *EnvironmentContext) (r *Partition, err error) {
	if err = p.sendAppendPartitionWithEnvironmentContext(db_name, tbl_name, part_vals, environment_context); err != nil {
		return
	}
	return p.recvAppendPartitionWithEnvironmentContext()
}

func (p *ThriftHiveMetastoreClient) sendAppendPartitionWithEnvironmentContext(db_name string, tbl_name string, part_vals []string, environment_context *EnvironmentContext) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("append_partition_with_environment_context", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AppendPartitionWithEnvironmentContextArgs{
		DbName:             db_name,
		TblName:            tbl_name,
		PartVals:           part_vals,
		EnvironmentContext: environment_context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAppendPartitionWithEnvironmentContext() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error115 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error116 error
		error116, err = error115.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error116
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "append_partition_with_environment_context failed: out of sequence response")
		return
	}
	result := AppendPartitionWithEnvironmentContextResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
func (p *ThriftHiveMetastoreClient) AppendPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, err error) {
	if err = p.sendAppendPartitionByName(db_name, tbl_name, part_name); err != nil {
		return
	}
	return p.recvAppendPartitionByName()
}

func (p *ThriftHiveMetastoreClient) sendAppendPartitionByName(db_name string, tbl_name string, part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("append_partition_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AppendPartitionByNameArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartName: part_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAppendPartitionByName() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error117 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error118 error
		error118, err = error117.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error118
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "append_partition_by_name failed: out of sequence response")
		return
	}
	result := AppendPartitionByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) AppendPartitionByNameWithEnvironmentContext(db_name string, tbl_name string, part_name string, environment_context *EnvironmentContext) (r *Partition, err error) {
	if err = p.sendAppendPartitionByNameWithEnvironmentContext(db_name, tbl_name, part_name, environment_context); err != nil {
		return
	}
	return p.recvAppendPartitionByNameWithEnvironmentContext()
}

func (p *ThriftHiveMetastoreClient) sendAppendPartitionByNameWithEnvironmentContext(db_name string, tbl_name string, part_name string, environment_context *EnvironmentContext) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("append_partition_by_name_with_environment_context", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AppendPartitionByNameWithEnvironmentContextArgs{
		DbName:             db_name,
		TblName:            tbl_name,
		PartName:           part_name,
		EnvironmentContext: environment_context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAppendPartitionByNameWithEnvironmentContext() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error119 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error120 error
		error120, err = error119.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error120
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "append_partition_by_name_with_environment_context failed: out of sequence response")
		return
	}
	result := AppendPartitionByNameWithEnvironmentContextResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropPartition(db_name string, tbl_name string, part_vals []string, deleteData bool) (r bool, err error) {
	if err = p.sendDropPartition(db_name, tbl_name, part_vals, deleteData); err != nil {
		return
	}
	return p.recvDropPartition()
}

func (p *ThriftHiveMetastoreClient) sendDropPartition(db_name string, tbl_name string, part_vals []string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropPartitionArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		PartVals:   part_vals,
		DeleteData: deleteData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropPartition() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error121 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error122 error
		error122, err = error121.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error122
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_partition failed: out of sequence response")
		return
	}
	result := DropPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - DeleteData
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) DropPartitionWithEnvironmentContext(db_name string, tbl_name string, part_vals []string, deleteData bool, environment_context *EnvironmentContext) (r bool, err error) {
	if err = p.sendDropPartitionWithEnvironmentContext(db_name, tbl_name, part_vals, deleteData, environment_context); err != nil {
		return
	}
	return p.recvDropPartitionWithEnvironmentContext()
}

func (p *ThriftHiveMetastoreClient) sendDropPartitionWithEnvironmentContext(db_name string, tbl_name string, part_vals []string, deleteData bool, environment_context *EnvironmentContext) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_partition_with_environment_context", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropPartitionWithEnvironmentContextArgs{
		DbName:             db_name,
		TblName:            tbl_name,
		PartVals:           part_vals,
		DeleteData:         deleteData,
		EnvironmentContext: environment_context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropPartitionWithEnvironmentContext() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error123 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error124 error
		error124, err = error123.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error124
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_partition_with_environment_context failed: out of sequence response")
		return
	}
	result := DropPartitionWithEnvironmentContextResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool) (r bool, err error) {
	if err = p.sendDropPartitionByName(db_name, tbl_name, part_name, deleteData); err != nil {
		return
	}
	return p.recvDropPartitionByName()
}

func (p *ThriftHiveMetastoreClient) sendDropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_partition_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropPartitionByNameArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		PartName:   part_name,
		DeleteData: deleteData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropPartitionByName() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error125 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error126 error
		error126, err = error125.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error126
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_partition_by_name failed: out of sequence response")
		return
	}
	result := DropPartitionByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - DeleteData
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) DropPartitionByNameWithEnvironmentContext(db_name string, tbl_name string, part_name string, deleteData bool, environment_context *EnvironmentContext) (r bool, err error) {
	if err = p.sendDropPartitionByNameWithEnvironmentContext(db_name, tbl_name, part_name, deleteData, environment_context); err != nil {
		return
	}
	return p.recvDropPartitionByNameWithEnvironmentContext()
}

func (p *ThriftHiveMetastoreClient) sendDropPartitionByNameWithEnvironmentContext(db_name string, tbl_name string, part_name string, deleteData bool, environment_context *EnvironmentContext) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_partition_by_name_with_environment_context", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropPartitionByNameWithEnvironmentContextArgs{
		DbName:             db_name,
		TblName:            tbl_name,
		PartName:           part_name,
		DeleteData:         deleteData,
		EnvironmentContext: environment_context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropPartitionByNameWithEnvironmentContext() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error127 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error128 error
		error128, err = error127.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error128
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_partition_by_name_with_environment_context failed: out of sequence response")
		return
	}
	result := DropPartitionByNameWithEnvironmentContextResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) DropPartitionsReq(req *DropPartitionsRequest) (r *DropPartitionsResult_, err error) {
	if err = p.sendDropPartitionsReq(req); err != nil {
		return
	}
	return p.recvDropPartitionsReq()
}

func (p *ThriftHiveMetastoreClient) sendDropPartitionsReq(req *DropPartitionsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_partitions_req", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropPartitionsReqArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropPartitionsReq() (value *DropPartitionsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error129 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error130 error
		error130, err = error129.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error130
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_partitions_req failed: out of sequence response")
		return
	}
	result := DropPartitionsReqResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
func (p *ThriftHiveMetastoreClient) GetPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, err error) {
	if err = p.sendGetPartition(db_name, tbl_name, part_vals); err != nil {
		return
	}
	return p.recvGetPartition()
}

func (p *ThriftHiveMetastoreClient) sendGetPartition(db_name string, tbl_name string, part_vals []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartVals: part_vals,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartition() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error131 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error132 error
		error132, err = error131.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error132
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition failed: out of sequence response")
		return
	}
	result := GetPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PartitionSpecs
//  - SourceDb
//  - SourceTableName
//  - DestDb
//  - DestTableName
func (p *ThriftHiveMetastoreClient) ExchangePartition(partitionSpecs map[string]string, source_db string, source_table_name string, dest_db string, dest_table_name string) (r *Partition, err error) {
	if err = p.sendExchangePartition(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name); err != nil {
		return
	}
	return p.recvExchangePartition()
}

func (p *ThriftHiveMetastoreClient) sendExchangePartition(partitionSpecs map[string]string, source_db string, source_table_name string, dest_db string, dest_table_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("exchange_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ExchangePartitionArgs{
		PartitionSpecs:  partitionSpecs,
		SourceDb:        source_db,
		SourceTableName: source_table_name,
		DestDb:          dest_db,
		DestTableName:   dest_table_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvExchangePartition() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error133 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error134 error
		error134, err = error133.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error134
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "exchange_partition failed: out of sequence response")
		return
	}
	result := ExchangePartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	} else if result.O4 != nil {
		err = result.O4
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionWithAuth(db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (r *Partition, err error) {
	if err = p.sendGetPartitionWithAuth(db_name, tbl_name, part_vals, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPartitionWithAuth()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionWithAuth(db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition_with_auth", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionWithAuthArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		PartVals:   part_vals,
		UserName:   user_name,
		GroupNames: group_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionWithAuth() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error135 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error136 error
		error136, err = error135.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error136
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition_with_auth failed: out of sequence response")
		return
	}
	result := GetPartitionWithAuthResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
func (p *ThriftHiveMetastoreClient) GetPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, err error) {
	if err = p.sendGetPartitionByName(db_name, tbl_name, part_name); err != nil {
		return
	}
	return p.recvGetPartitionByName()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionByName(db_name string, tbl_name string, part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionByNameArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartName: part_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionByName() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error137 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error138 error
		error138, err = error137.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error138
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition_by_name failed: out of sequence response")
		return
	}
	result := GetPartitionByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitions(db_name string, tbl_name string, max_parts int16) (r []*Partition, err error) {
	if err = p.sendGetPartitions(db_name, tbl_name, max_parts); err != nil {
		return
	}
	return p.recvGetPartitions()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitions(db_name string, tbl_name string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionsArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitions() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error139 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error140 error
		error140, err = error139.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error140
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions failed: out of sequence response")
		return
	}
	result := GetPartitionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error) {
	if err = p.sendGetPartitionsWithAuth(db_name, tbl_name, max_parts, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPartitionsWithAuth()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_with_auth", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionsWithAuthArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		MaxParts:   max_parts,
		UserName:   user_name,
		GroupNames: group_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsWithAuth() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error141 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error142 error
		error142, err = error141.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error142
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_with_auth failed: out of sequence response")
		return
	}
	result := GetPartitionsWithAuthResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionNames(db_name string, tbl_name string, max_parts int16) (r []string, err error) {
	if err = p.sendGetPartitionNames(db_name, tbl_name, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionNames()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionNames(db_name string, tbl_name string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition_names", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionNamesArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionNames() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error143 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error144 error
		error144, err = error143.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error144
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition_names failed: out of sequence response")
		return
	}
	result := GetPartitionNamesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionsPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []*Partition, err error) {
	if err = p.sendGetPartitionsPs(db_name, tbl_name, part_vals, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionsPs()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_ps", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionsPsArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartVals: part_vals,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsPs() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error145 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error146 error
		error146, err = error145.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error146
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_ps failed: out of sequence response")
		return
	}
	result := GetPartitionsPsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error) {
	if err = p.sendGetPartitionsPsWithAuth(db_name, tbl_name, part_vals, max_parts, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPartitionsPsWithAuth()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionsPsWithAuthArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		PartVals:   part_vals,
		MaxParts:   max_parts,
		UserName:   user_name,
		GroupNames: group_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsPsWithAuth() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error147 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error148 error
		error148, err = error147.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error148
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_ps_with_auth failed: out of sequence response")
		return
	}
	result := GetPartitionsPsWithAuthResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionNamesPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []string, err error) {
	if err = p.sendGetPartitionNamesPs(db_name, tbl_name, part_vals, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionNamesPs()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionNamesPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition_names_ps", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionNamesPsArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartVals: part_vals,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionNamesPs() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error149 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error150 error
		error150, err = error149.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error150
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition_names_ps failed: out of sequence response")
		return
	}
	result := GetPartitionNamesPsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - Filter
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16) (r []*Partition, err error) {
	if err = p.sendGetPartitionsByFilter(db_name, tbl_name, filter, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionsByFilter()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_by_filter", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionsByFilterArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		Filter:   filter,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsByFilter() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error151 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error152 error
		error152, err = error151.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error152
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_by_filter failed: out of sequence response")
		return
	}
	result := GetPartitionsByFilterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) GetPartitionsByExpr(req *PartitionsByExprRequest) (r *PartitionsByExprResult_, err error) {
	if err = p.sendGetPartitionsByExpr(req); err != nil {
		return
	}
	return p.recvGetPartitionsByExpr()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsByExpr(req *PartitionsByExprRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_by_expr", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionsByExprArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsByExpr() (value *PartitionsByExprResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error153 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error154 error
		error154, err = error153.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error154
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_by_expr failed: out of sequence response")
		return
	}
	result := GetPartitionsByExprResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - Names
func (p *ThriftHiveMetastoreClient) GetPartitionsByNames(db_name string, tbl_name string, names []string) (r []*Partition, err error) {
	if err = p.sendGetPartitionsByNames(db_name, tbl_name, names); err != nil {
		return
	}
	return p.recvGetPartitionsByNames()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsByNames(db_name string, tbl_name string, names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_by_names", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionsByNamesArgs{
		DbName:  db_name,
		TblName: tbl_name,
		Names:   names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsByNames() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error155 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error156 error
		error156, err = error155.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error156
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_by_names failed: out of sequence response")
		return
	}
	result := GetPartitionsByNamesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - NewPart_
func (p *ThriftHiveMetastoreClient) AlterPartition(db_name string, tbl_name string, new_part *Partition) (err error) {
	if err = p.sendAlterPartition(db_name, tbl_name, new_part); err != nil {
		return
	}
	return p.recvAlterPartition()
}

func (p *ThriftHiveMetastoreClient) sendAlterPartition(db_name string, tbl_name string, new_part *Partition) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AlterPartitionArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		NewPart_: new_part,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterPartition() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error157 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error158 error
		error158, err = error157.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error158
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_partition failed: out of sequence response")
		return
	}
	result := AlterPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - NewParts_
func (p *ThriftHiveMetastoreClient) AlterPartitions(db_name string, tbl_name string, new_parts []*Partition) (err error) {
	if err = p.sendAlterPartitions(db_name, tbl_name, new_parts); err != nil {
		return
	}
	return p.recvAlterPartitions()
}

func (p *ThriftHiveMetastoreClient) sendAlterPartitions(db_name string, tbl_name string, new_parts []*Partition) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_partitions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AlterPartitionsArgs{
		DbName:    db_name,
		TblName:   tbl_name,
		NewParts_: new_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterPartitions() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error159 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error160 error
		error160, err = error159.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error160
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_partitions failed: out of sequence response")
		return
	}
	result := AlterPartitionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - NewPart_
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) AlterPartitionWithEnvironmentContext(db_name string, tbl_name string, new_part *Partition, environment_context *EnvironmentContext) (err error) {
	if err = p.sendAlterPartitionWithEnvironmentContext(db_name, tbl_name, new_part, environment_context); err != nil {
		return
	}
	return p.recvAlterPartitionWithEnvironmentContext()
}

func (p *ThriftHiveMetastoreClient) sendAlterPartitionWithEnvironmentContext(db_name string, tbl_name string, new_part *Partition, environment_context *EnvironmentContext) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_partition_with_environment_context", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AlterPartitionWithEnvironmentContextArgs{
		DbName:             db_name,
		TblName:            tbl_name,
		NewPart_:           new_part,
		EnvironmentContext: environment_context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterPartitionWithEnvironmentContext() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error161 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error162 error
		error162, err = error161.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error162
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_partition_with_environment_context failed: out of sequence response")
		return
	}
	result := AlterPartitionWithEnvironmentContextResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - NewPart_
func (p *ThriftHiveMetastoreClient) RenamePartition(db_name string, tbl_name string, part_vals []string, new_part *Partition) (err error) {
	if err = p.sendRenamePartition(db_name, tbl_name, part_vals, new_part); err != nil {
		return
	}
	return p.recvRenamePartition()
}

func (p *ThriftHiveMetastoreClient) sendRenamePartition(db_name string, tbl_name string, part_vals []string, new_part *Partition) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rename_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RenamePartitionArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartVals: part_vals,
		NewPart_: new_part,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvRenamePartition() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error163 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error164 error
		error164, err = error163.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error164
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rename_partition failed: out of sequence response")
		return
	}
	result := RenamePartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - PartVals
//  - ThrowException
func (p *ThriftHiveMetastoreClient) PartitionNameHasValidCharacters(part_vals []string, throw_exception bool) (r bool, err error) {
	if err = p.sendPartitionNameHasValidCharacters(part_vals, throw_exception); err != nil {
		return
	}
	return p.recvPartitionNameHasValidCharacters()
}

func (p *ThriftHiveMetastoreClient) sendPartitionNameHasValidCharacters(part_vals []string, throw_exception bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("partition_name_has_valid_characters", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PartitionNameHasValidCharactersArgs{
		PartVals:       part_vals,
		ThrowException: throw_exception,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvPartitionNameHasValidCharacters() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error165 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error166 error
		error166, err = error165.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error166
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "partition_name_has_valid_characters failed: out of sequence response")
		return
	}
	result := PartitionNameHasValidCharactersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Name
//  - DefaultValue
func (p *ThriftHiveMetastoreClient) GetConfigValue(name string, defaultValue string) (r string, err error) {
	if err = p.sendGetConfigValue(name, defaultValue); err != nil {
		return
	}
	return p.recvGetConfigValue()
}

func (p *ThriftHiveMetastoreClient) sendGetConfigValue(name string, defaultValue string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_config_value", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetConfigValueArgs{
		Name:         name,
		DefaultValue: defaultValue,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetConfigValue() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error167 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error168 error
		error168, err = error167.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error168
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_config_value failed: out of sequence response")
		return
	}
	result := GetConfigValueResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PartName
func (p *ThriftHiveMetastoreClient) PartitionNameToVals(part_name string) (r []string, err error) {
	if err = p.sendPartitionNameToVals(part_name); err != nil {
		return
	}
	return p.recvPartitionNameToVals()
}

func (p *ThriftHiveMetastoreClient) sendPartitionNameToVals(part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("partition_name_to_vals", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PartitionNameToValsArgs{
		PartName: part_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvPartitionNameToVals() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error169 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error170 error
		error170, err = error169.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error170
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "partition_name_to_vals failed: out of sequence response")
		return
	}
	result := PartitionNameToValsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PartName
func (p *ThriftHiveMetastoreClient) PartitionNameToSpec(part_name string) (r map[string]string, err error) {
	if err = p.sendPartitionNameToSpec(part_name); err != nil {
		return
	}
	return p.recvPartitionNameToSpec()
}

func (p *ThriftHiveMetastoreClient) sendPartitionNameToSpec(part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("partition_name_to_spec", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PartitionNameToSpecArgs{
		PartName: part_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvPartitionNameToSpec() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error171 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error172 error
		error172, err = error171.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error172
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "partition_name_to_spec failed: out of sequence response")
		return
	}
	result := PartitionNameToSpecResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - EventType
func (p *ThriftHiveMetastoreClient) MarkPartitionForEvent(db_name string, tbl_name string, part_vals map[string]string, eventType PartitionEventType) (err error) {
	if err = p.sendMarkPartitionForEvent(db_name, tbl_name, part_vals, eventType); err != nil {
		return
	}
	return p.recvMarkPartitionForEvent()
}

func (p *ThriftHiveMetastoreClient) sendMarkPartitionForEvent(db_name string, tbl_name string, part_vals map[string]string, eventType PartitionEventType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("markPartitionForEvent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MarkPartitionForEventArgs{
		DbName:    db_name,
		TblName:   tbl_name,
		PartVals:  part_vals,
		EventType: eventType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvMarkPartitionForEvent() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error173 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error174 error
		error174, err = error173.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error174
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "markPartitionForEvent failed: out of sequence response")
		return
	}
	result := MarkPartitionForEventResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	} else if result.O4 != nil {
		err = result.O4
		return
	} else if result.O5 != nil {
		err = result.O5
		return
	} else if result.O6 != nil {
		err = result.O6
		return
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - EventType
func (p *ThriftHiveMetastoreClient) IsPartitionMarkedForEvent(db_name string, tbl_name string, part_vals map[string]string, eventType PartitionEventType) (r bool, err error) {
	if err = p.sendIsPartitionMarkedForEvent(db_name, tbl_name, part_vals, eventType); err != nil {
		return
	}
	return p.recvIsPartitionMarkedForEvent()
}

func (p *ThriftHiveMetastoreClient) sendIsPartitionMarkedForEvent(db_name string, tbl_name string, part_vals map[string]string, eventType PartitionEventType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("isPartitionMarkedForEvent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IsPartitionMarkedForEventArgs{
		DbName:    db_name,
		TblName:   tbl_name,
		PartVals:  part_vals,
		EventType: eventType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvIsPartitionMarkedForEvent() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error175 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error176 error
		error176, err = error175.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error176
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isPartitionMarkedForEvent failed: out of sequence response")
		return
	}
	result := IsPartitionMarkedForEventResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	} else if result.O4 != nil {
		err = result.O4
		return
	} else if result.O5 != nil {
		err = result.O5
		return
	} else if result.O6 != nil {
		err = result.O6
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - NewIndex_
//  - IndexTable
func (p *ThriftHiveMetastoreClient) AddIndex(new_index *Index, index_table *Table) (r *Index, err error) {
	if err = p.sendAddIndex(new_index, index_table); err != nil {
		return
	}
	return p.recvAddIndex()
}

func (p *ThriftHiveMetastoreClient) sendAddIndex(new_index *Index, index_table *Table) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("add_index", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AddIndexArgs{
		NewIndex_:  new_index,
		IndexTable: index_table,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAddIndex() (value *Index, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error177 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error178 error
		error178, err = error177.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error178
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add_index failed: out of sequence response")
		return
	}
	result := AddIndexResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dbname
//  - BaseTblName
//  - IdxName
//  - NewIdx_
func (p *ThriftHiveMetastoreClient) AlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (err error) {
	if err = p.sendAlterIndex(dbname, base_tbl_name, idx_name, new_idx); err != nil {
		return
	}
	return p.recvAlterIndex()
}

func (p *ThriftHiveMetastoreClient) sendAlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_index", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AlterIndexArgs{
		Dbname:      dbname,
		BaseTblName: base_tbl_name,
		IdxName:     idx_name,
		NewIdx_:     new_idx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterIndex() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error179 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error180 error
		error180, err = error179.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error180
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_index failed: out of sequence response")
		return
	}
	result := AlterIndexResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - IndexName
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool) (r bool, err error) {
	if err = p.sendDropIndexByName(db_name, tbl_name, index_name, deleteData); err != nil {
		return
	}
	return p.recvDropIndexByName()
}

func (p *ThriftHiveMetastoreClient) sendDropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_index_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropIndexByNameArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		IndexName:  index_name,
		DeleteData: deleteData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropIndexByName() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error181 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error182 error
		error182, err = error181.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error182
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_index_by_name failed: out of sequence response")
		return
	}
	result := DropIndexByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - IndexName
func (p *ThriftHiveMetastoreClient) GetIndexByName(db_name string, tbl_name string, index_name string) (r *Index, err error) {
	if err = p.sendGetIndexByName(db_name, tbl_name, index_name); err != nil {
		return
	}
	return p.recvGetIndexByName()
}

func (p *ThriftHiveMetastoreClient) sendGetIndexByName(db_name string, tbl_name string, index_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_index_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetIndexByNameArgs{
		DbName:    db_name,
		TblName:   tbl_name,
		IndexName: index_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetIndexByName() (value *Index, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error183 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error184 error
		error184, err = error183.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error184
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_index_by_name failed: out of sequence response")
		return
	}
	result := GetIndexByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxIndexes
func (p *ThriftHiveMetastoreClient) GetIndexes(db_name string, tbl_name string, max_indexes int16) (r []*Index, err error) {
	if err = p.sendGetIndexes(db_name, tbl_name, max_indexes); err != nil {
		return
	}
	return p.recvGetIndexes()
}

func (p *ThriftHiveMetastoreClient) sendGetIndexes(db_name string, tbl_name string, max_indexes int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_indexes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetIndexesArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		MaxIndexes: max_indexes,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetIndexes() (value []*Index, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error185 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error186 error
		error186, err = error185.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error186
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_indexes failed: out of sequence response")
		return
	}
	result := GetIndexesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxIndexes
func (p *ThriftHiveMetastoreClient) GetIndexNames(db_name string, tbl_name string, max_indexes int16) (r []string, err error) {
	if err = p.sendGetIndexNames(db_name, tbl_name, max_indexes); err != nil {
		return
	}
	return p.recvGetIndexNames()
}

func (p *ThriftHiveMetastoreClient) sendGetIndexNames(db_name string, tbl_name string, max_indexes int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_index_names", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetIndexNamesArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		MaxIndexes: max_indexes,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetIndexNames() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error187 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error188 error
		error188, err = error187.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error188
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_index_names failed: out of sequence response")
		return
	}
	result := GetIndexNamesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - StatsObj
func (p *ThriftHiveMetastoreClient) UpdateTableColumnStatistics(stats_obj *ColumnStatistics) (r bool, err error) {
	if err = p.sendUpdateTableColumnStatistics(stats_obj); err != nil {
		return
	}
	return p.recvUpdateTableColumnStatistics()
}

func (p *ThriftHiveMetastoreClient) sendUpdateTableColumnStatistics(stats_obj *ColumnStatistics) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("update_table_column_statistics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateTableColumnStatisticsArgs{
		StatsObj: stats_obj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvUpdateTableColumnStatistics() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error189 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error190 error
		error190, err = error189.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error190
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "update_table_column_statistics failed: out of sequence response")
		return
	}
	result := UpdateTableColumnStatisticsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	} else if result.O4 != nil {
		err = result.O4
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - StatsObj
func (p *ThriftHiveMetastoreClient) UpdatePartitionColumnStatistics(stats_obj *ColumnStatistics) (r bool, err error) {
	if err = p.sendUpdatePartitionColumnStatistics(stats_obj); err != nil {
		return
	}
	return p.recvUpdatePartitionColumnStatistics()
}

func (p *ThriftHiveMetastoreClient) sendUpdatePartitionColumnStatistics(stats_obj *ColumnStatistics) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("update_partition_column_statistics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdatePartitionColumnStatisticsArgs{
		StatsObj: stats_obj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvUpdatePartitionColumnStatistics() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error191 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error192 error
		error192, err = error191.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error192
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "update_partition_column_statistics failed: out of sequence response")
		return
	}
	result := UpdatePartitionColumnStatisticsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	} else if result.O4 != nil {
		err = result.O4
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - ColName
func (p *ThriftHiveMetastoreClient) GetTableColumnStatistics(db_name string, tbl_name string, col_name string) (r *ColumnStatistics, err error) {
	if err = p.sendGetTableColumnStatistics(db_name, tbl_name, col_name); err != nil {
		return
	}
	return p.recvGetTableColumnStatistics()
}

func (p *ThriftHiveMetastoreClient) sendGetTableColumnStatistics(db_name string, tbl_name string, col_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_table_column_statistics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTableColumnStatisticsArgs{
		DbName:  db_name,
		TblName: tbl_name,
		ColName: col_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetTableColumnStatistics() (value *ColumnStatistics, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error193 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error194 error
		error194, err = error193.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error194
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_table_column_statistics failed: out of sequence response")
		return
	}
	result := GetTableColumnStatisticsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	} else if result.O4 != nil {
		err = result.O4
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - ColName
func (p *ThriftHiveMetastoreClient) GetPartitionColumnStatistics(db_name string, tbl_name string, part_name string, col_name string) (r *ColumnStatistics, err error) {
	if err = p.sendGetPartitionColumnStatistics(db_name, tbl_name, part_name, col_name); err != nil {
		return
	}
	return p.recvGetPartitionColumnStatistics()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionColumnStatistics(db_name string, tbl_name string, part_name string, col_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition_column_statistics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionColumnStatisticsArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartName: part_name,
		ColName:  col_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionColumnStatistics() (value *ColumnStatistics, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error195 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error196 error
		error196, err = error195.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error196
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition_column_statistics failed: out of sequence response")
		return
	}
	result := GetPartitionColumnStatisticsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	} else if result.O4 != nil {
		err = result.O4
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetTableStatisticsReq(request *TableStatsRequest) (r *TableStatsResult_, err error) {
	if err = p.sendGetTableStatisticsReq(request); err != nil {
		return
	}
	return p.recvGetTableStatisticsReq()
}

func (p *ThriftHiveMetastoreClient) sendGetTableStatisticsReq(request *TableStatsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_table_statistics_req", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTableStatisticsReqArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetTableStatisticsReq() (value *TableStatsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error197 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error198 error
		error198, err = error197.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error198
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_table_statistics_req failed: out of sequence response")
		return
	}
	result := GetTableStatisticsReqResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetPartitionsStatisticsReq(request *PartitionsStatsRequest) (r *PartitionsStatsResult_, err error) {
	if err = p.sendGetPartitionsStatisticsReq(request); err != nil {
		return
	}
	return p.recvGetPartitionsStatisticsReq()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsStatisticsReq(request *PartitionsStatsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_statistics_req", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionsStatisticsReqArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsStatisticsReq() (value *PartitionsStatsResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error199 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error200 error
		error200, err = error199.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error200
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_statistics_req failed: out of sequence response")
		return
	}
	result := GetPartitionsStatisticsReqResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - ColName
func (p *ThriftHiveMetastoreClient) DeletePartitionColumnStatistics(db_name string, tbl_name string, part_name string, col_name string) (r bool, err error) {
	if err = p.sendDeletePartitionColumnStatistics(db_name, tbl_name, part_name, col_name); err != nil {
		return
	}
	return p.recvDeletePartitionColumnStatistics()
}

func (p *ThriftHiveMetastoreClient) sendDeletePartitionColumnStatistics(db_name string, tbl_name string, part_name string, col_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delete_partition_column_statistics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeletePartitionColumnStatisticsArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartName: part_name,
		ColName:  col_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDeletePartitionColumnStatistics() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error201 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error202 error
		error202, err = error201.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error202
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delete_partition_column_statistics failed: out of sequence response")
		return
	}
	result := DeletePartitionColumnStatisticsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	} else if result.O4 != nil {
		err = result.O4
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - ColName
func (p *ThriftHiveMetastoreClient) DeleteTableColumnStatistics(db_name string, tbl_name string, col_name string) (r bool, err error) {
	if err = p.sendDeleteTableColumnStatistics(db_name, tbl_name, col_name); err != nil {
		return
	}
	return p.recvDeleteTableColumnStatistics()
}

func (p *ThriftHiveMetastoreClient) sendDeleteTableColumnStatistics(db_name string, tbl_name string, col_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delete_table_column_statistics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteTableColumnStatisticsArgs{
		DbName:  db_name,
		TblName: tbl_name,
		ColName: col_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDeleteTableColumnStatistics() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error203 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error204 error
		error204, err = error203.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error204
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delete_table_column_statistics failed: out of sequence response")
		return
	}
	result := DeleteTableColumnStatisticsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	} else if result.O4 != nil {
		err = result.O4
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - FuncA1
func (p *ThriftHiveMetastoreClient) CreateFunction(func_a1 *Function) (err error) {
	if err = p.sendCreateFunction(func_a1); err != nil {
		return
	}
	return p.recvCreateFunction()
}

func (p *ThriftHiveMetastoreClient) sendCreateFunction(func_a1 *Function) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_function", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateFunctionArgs{
		FuncA1: func_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCreateFunction() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error205 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error206 error
		error206, err = error205.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error206
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_function failed: out of sequence response")
		return
	}
	result := CreateFunctionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	} else if result.O4 != nil {
		err = result.O4
		return
	}
	return
}

// Parameters:
//  - DbName
//  - FuncName
func (p *ThriftHiveMetastoreClient) DropFunction(dbName string, funcName string) (err error) {
	if err = p.sendDropFunction(dbName, funcName); err != nil {
		return
	}
	return p.recvDropFunction()
}

func (p *ThriftHiveMetastoreClient) sendDropFunction(dbName string, funcName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_function", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropFunctionArgs{
		DbName:   dbName,
		FuncName: funcName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropFunction() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error207 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error208 error
		error208, err = error207.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error208
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_function failed: out of sequence response")
		return
	}
	result := DropFunctionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	return
}

// Parameters:
//  - DbName
//  - FuncName
//  - NewFunc_
func (p *ThriftHiveMetastoreClient) AlterFunction(dbName string, funcName string, newFunc *Function) (err error) {
	if err = p.sendAlterFunction(dbName, funcName, newFunc); err != nil {
		return
	}
	return p.recvAlterFunction()
}

func (p *ThriftHiveMetastoreClient) sendAlterFunction(dbName string, funcName string, newFunc *Function) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_function", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AlterFunctionArgs{
		DbName:   dbName,
		FuncName: funcName,
		NewFunc_: newFunc,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterFunction() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error209 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error210 error
		error210, err = error209.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error210
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_function failed: out of sequence response")
		return
	}
	result := AlterFunctionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - DbName
//  - Pattern
func (p *ThriftHiveMetastoreClient) GetFunctions(dbName string, pattern string) (r []string, err error) {
	if err = p.sendGetFunctions(dbName, pattern); err != nil {
		return
	}
	return p.recvGetFunctions()
}

func (p *ThriftHiveMetastoreClient) sendGetFunctions(dbName string, pattern string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_functions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetFunctionsArgs{
		DbName:  dbName,
		Pattern: pattern,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetFunctions() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error211 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error212 error
		error212, err = error211.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error212
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_functions failed: out of sequence response")
		return
	}
	result := GetFunctionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - FuncName
func (p *ThriftHiveMetastoreClient) GetFunction(dbName string, funcName string) (r *Function, err error) {
	if err = p.sendGetFunction(dbName, funcName); err != nil {
		return
	}
	return p.recvGetFunction()
}

func (p *ThriftHiveMetastoreClient) sendGetFunction(dbName string, funcName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_function", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetFunctionArgs{
		DbName:   dbName,
		FuncName: funcName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetFunction() (value *Function, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error213 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error214 error
		error214, err = error213.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error214
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_function failed: out of sequence response")
		return
	}
	result := GetFunctionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Role
func (p *ThriftHiveMetastoreClient) CreateRole(role *Role) (r bool, err error) {
	if err = p.sendCreateRole(role); err != nil {
		return
	}
	return p.recvCreateRole()
}

func (p *ThriftHiveMetastoreClient) sendCreateRole(role *Role) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateRoleArgs{
		Role: role,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCreateRole() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error215 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error216 error
		error216, err = error215.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error216
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_role failed: out of sequence response")
		return
	}
	result := CreateRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RoleName
func (p *ThriftHiveMetastoreClient) DropRole(role_name string) (r bool, err error) {
	if err = p.sendDropRole(role_name); err != nil {
		return
	}
	return p.recvDropRole()
}

func (p *ThriftHiveMetastoreClient) sendDropRole(role_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropRoleArgs{
		RoleName: role_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropRole() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error217 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error218 error
		error218, err = error217.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error218
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_role failed: out of sequence response")
		return
	}
	result := DropRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

func (p *ThriftHiveMetastoreClient) GetRoleNames() (r []string, err error) {
	if err = p.sendGetRoleNames(); err != nil {
		return
	}
	return p.recvGetRoleNames()
}

func (p *ThriftHiveMetastoreClient) sendGetRoleNames() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_role_names", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetRoleNamesArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetRoleNames() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error219 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error220 error
		error220, err = error219.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error220
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_role_names failed: out of sequence response")
		return
	}
	result := GetRoleNamesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
//  - Grantor
//  - GrantorType
//  - GrantOption
func (p *ThriftHiveMetastoreClient) GrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (r bool, err error) {
	if err = p.sendGrantRole(role_name, principal_name, principal_type, grantor, grantorType, grant_option); err != nil {
		return
	}
	return p.recvGrantRole()
}

func (p *ThriftHiveMetastoreClient) sendGrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("grant_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GrantRoleArgs{
		RoleName:      role_name,
		PrincipalName: principal_name,
		PrincipalType: principal_type,
		Grantor:       grantor,
		GrantorType:   grantorType,
		GrantOption:   grant_option,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGrantRole() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error221 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error222 error
		error222, err = error221.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error222
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "grant_role failed: out of sequence response")
		return
	}
	result := GrantRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
func (p *ThriftHiveMetastoreClient) RevokeRole(role_name string, principal_name string, principal_type PrincipalType) (r bool, err error) {
	if err = p.sendRevokeRole(role_name, principal_name, principal_type); err != nil {
		return
	}
	return p.recvRevokeRole()
}

func (p *ThriftHiveMetastoreClient) sendRevokeRole(role_name string, principal_name string, principal_type PrincipalType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("revoke_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RevokeRoleArgs{
		RoleName:      role_name,
		PrincipalName: principal_name,
		PrincipalType: principal_type,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvRevokeRole() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error223 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error224 error
		error224, err = error223.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error224
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "revoke_role failed: out of sequence response")
		return
	}
	result := RevokeRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PrincipalName
//  - PrincipalType
func (p *ThriftHiveMetastoreClient) ListRoles(principal_name string, principal_type PrincipalType) (r []*Role, err error) {
	if err = p.sendListRoles(principal_name, principal_type); err != nil {
		return
	}
	return p.recvListRoles()
}

func (p *ThriftHiveMetastoreClient) sendListRoles(principal_name string, principal_type PrincipalType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_roles", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListRolesArgs{
		PrincipalName: principal_name,
		PrincipalType: principal_type,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvListRoles() (value []*Role, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error225 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error226 error
		error226, err = error225.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error226
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_roles failed: out of sequence response")
		return
	}
	result := ListRolesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetPrincipalsInRole(request *GetPrincipalsInRoleRequest) (r *GetPrincipalsInRoleResponse, err error) {
	if err = p.sendGetPrincipalsInRole(request); err != nil {
		return
	}
	return p.recvGetPrincipalsInRole()
}

func (p *ThriftHiveMetastoreClient) sendGetPrincipalsInRole(request *GetPrincipalsInRoleRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_principals_in_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPrincipalsInRoleArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPrincipalsInRole() (value *GetPrincipalsInRoleResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error227 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error228 error
		error228, err = error227.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error228
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_principals_in_role failed: out of sequence response")
		return
	}
	result := GetPrincipalsInRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetRoleGrantsForPrincipal(request *GetRoleGrantsForPrincipalRequest) (r *GetRoleGrantsForPrincipalResponse, err error) {
	if err = p.sendGetRoleGrantsForPrincipal(request); err != nil {
		return
	}
	return p.recvGetRoleGrantsForPrincipal()
}

func (p *ThriftHiveMetastoreClient) sendGetRoleGrantsForPrincipal(request *GetRoleGrantsForPrincipalRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_role_grants_for_principal", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetRoleGrantsForPrincipalArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetRoleGrantsForPrincipal() (value *GetRoleGrantsForPrincipalResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error229 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error230 error
		error230, err = error229.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error230
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_role_grants_for_principal failed: out of sequence response")
		return
	}
	result := GetRoleGrantsForPrincipalResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - HiveObject
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names []string) (r *PrincipalPrivilegeSet, err error) {
	if err = p.sendGetPrivilegeSet(hiveObject, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPrivilegeSet()
}

func (p *ThriftHiveMetastoreClient) sendGetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_privilege_set", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPrivilegeSetArgs{
		HiveObject: hiveObject,
		UserName:   user_name,
		GroupNames: group_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPrivilegeSet() (value *PrincipalPrivilegeSet, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error231 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error232 error
		error232, err = error231.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error232
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_privilege_set failed: out of sequence response")
		return
	}
	result := GetPrivilegeSetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PrincipalName
//  - PrincipalType
//  - HiveObject
func (p *ThriftHiveMetastoreClient) ListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (r []*HiveObjectPrivilege, err error) {
	if err = p.sendListPrivileges(principal_name, principal_type, hiveObject); err != nil {
		return
	}
	return p.recvListPrivileges()
}

func (p *ThriftHiveMetastoreClient) sendListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_privileges", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListPrivilegesArgs{
		PrincipalName: principal_name,
		PrincipalType: principal_type,
		HiveObject:    hiveObject,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvListPrivileges() (value []*HiveObjectPrivilege, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error233 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error234 error
		error234, err = error233.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error234
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_privileges failed: out of sequence response")
		return
	}
	result := ListPrivilegesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Privileges
func (p *ThriftHiveMetastoreClient) GrantPrivileges(privileges *PrivilegeBag) (r bool, err error) {
	if err = p.sendGrantPrivileges(privileges); err != nil {
		return
	}
	return p.recvGrantPrivileges()
}

func (p *ThriftHiveMetastoreClient) sendGrantPrivileges(privileges *PrivilegeBag) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("grant_privileges", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GrantPrivilegesArgs{
		Privileges: privileges,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGrantPrivileges() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error235 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error236 error
		error236, err = error235.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error236
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "grant_privileges failed: out of sequence response")
		return
	}
	result := GrantPrivilegesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Privileges
func (p *ThriftHiveMetastoreClient) RevokePrivileges(privileges *PrivilegeBag) (r bool, err error) {
	if err = p.sendRevokePrivileges(privileges); err != nil {
		return
	}
	return p.recvRevokePrivileges()
}

func (p *ThriftHiveMetastoreClient) sendRevokePrivileges(privileges *PrivilegeBag) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("revoke_privileges", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RevokePrivilegesArgs{
		Privileges: privileges,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvRevokePrivileges() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error237 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error238 error
		error238, err = error237.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error238
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "revoke_privileges failed: out of sequence response")
		return
	}
	result := RevokePrivilegesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) SetUgi(user_name string, group_names []string) (r []string, err error) {
	if err = p.sendSetUgi(user_name, group_names); err != nil {
		return
	}
	return p.recvSetUgi()
}

func (p *ThriftHiveMetastoreClient) sendSetUgi(user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("set_ugi", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetUgiArgs{
		UserName:   user_name,
		GroupNames: group_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvSetUgi() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error239 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error240 error
		error240, err = error239.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error240
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "set_ugi failed: out of sequence response")
		return
	}
	result := SetUgiResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TokenOwner
//  - RenewerKerberosPrincipalName
func (p *ThriftHiveMetastoreClient) GetDelegationToken(token_owner string, renewer_kerberos_principal_name string) (r string, err error) {
	if err = p.sendGetDelegationToken(token_owner, renewer_kerberos_principal_name); err != nil {
		return
	}
	return p.recvGetDelegationToken()
}

func (p *ThriftHiveMetastoreClient) sendGetDelegationToken(token_owner string, renewer_kerberos_principal_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_delegation_token", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetDelegationTokenArgs{
		TokenOwner:                   token_owner,
		RenewerKerberosPrincipalName: renewer_kerberos_principal_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetDelegationToken() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error241 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error242 error
		error242, err = error241.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error242
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_delegation_token failed: out of sequence response")
		return
	}
	result := GetDelegationTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TokenStrForm
func (p *ThriftHiveMetastoreClient) RenewDelegationToken(token_str_form string) (r int64, err error) {
	if err = p.sendRenewDelegationToken(token_str_form); err != nil {
		return
	}
	return p.recvRenewDelegationToken()
}

func (p *ThriftHiveMetastoreClient) sendRenewDelegationToken(token_str_form string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("renew_delegation_token", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RenewDelegationTokenArgs{
		TokenStrForm: token_str_form,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvRenewDelegationToken() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error243 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error244 error
		error244, err = error243.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error244
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "renew_delegation_token failed: out of sequence response")
		return
	}
	result := RenewDelegationTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TokenStrForm
func (p *ThriftHiveMetastoreClient) CancelDelegationToken(token_str_form string) (err error) {
	if err = p.sendCancelDelegationToken(token_str_form); err != nil {
		return
	}
	return p.recvCancelDelegationToken()
}

func (p *ThriftHiveMetastoreClient) sendCancelDelegationToken(token_str_form string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("cancel_delegation_token", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CancelDelegationTokenArgs{
		TokenStrForm: token_str_form,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCancelDelegationToken() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error245 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error246 error
		error246, err = error245.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error246
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cancel_delegation_token failed: out of sequence response")
		return
	}
	result := CancelDelegationTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	return
}

func (p *ThriftHiveMetastoreClient) GetOpenTxns() (r *GetOpenTxnsResponse, err error) {
	if err = p.sendGetOpenTxns(); err != nil {
		return
	}
	return p.recvGetOpenTxns()
}

func (p *ThriftHiveMetastoreClient) sendGetOpenTxns() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_open_txns", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetOpenTxnsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetOpenTxns() (value *GetOpenTxnsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error247 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error248 error
		error248, err = error247.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error248
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_open_txns failed: out of sequence response")
		return
	}
	result := GetOpenTxnsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *ThriftHiveMetastoreClient) GetOpenTxnsInfo() (r *GetOpenTxnsInfoResponse, err error) {
	if err = p.sendGetOpenTxnsInfo(); err != nil {
		return
	}
	return p.recvGetOpenTxnsInfo()
}

func (p *ThriftHiveMetastoreClient) sendGetOpenTxnsInfo() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_open_txns_info", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetOpenTxnsInfoArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetOpenTxnsInfo() (value *GetOpenTxnsInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error249 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error250 error
		error250, err = error249.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error250
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_open_txns_info failed: out of sequence response")
		return
	}
	result := GetOpenTxnsInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) OpenTxns(rqst *OpenTxnRequest) (r *OpenTxnsResponse, err error) {
	if err = p.sendOpenTxns(rqst); err != nil {
		return
	}
	return p.recvOpenTxns()
}

func (p *ThriftHiveMetastoreClient) sendOpenTxns(rqst *OpenTxnRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("open_txns", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OpenTxnsArgs{
		Rqst: rqst,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvOpenTxns() (value *OpenTxnsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error251 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error252 error
		error252, err = error251.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error252
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "open_txns failed: out of sequence response")
		return
	}
	result := OpenTxnsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) AbortTxn(rqst *AbortTxnRequest) (err error) {
	if err = p.sendAbortTxn(rqst); err != nil {
		return
	}
	return p.recvAbortTxn()
}

func (p *ThriftHiveMetastoreClient) sendAbortTxn(rqst *AbortTxnRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("abort_txn", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AbortTxnArgs{
		Rqst: rqst,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAbortTxn() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error253 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error254 error
		error254, err = error253.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error254
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "abort_txn failed: out of sequence response")
		return
	}
	result := AbortTxnResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	return
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) CommitTxn(rqst *CommitTxnRequest) (err error) {
	if err = p.sendCommitTxn(rqst); err != nil {
		return
	}
	return p.recvCommitTxn()
}

func (p *ThriftHiveMetastoreClient) sendCommitTxn(rqst *CommitTxnRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("commit_txn", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CommitTxnArgs{
		Rqst: rqst,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCommitTxn() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error255 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error256 error
		error256, err = error255.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error256
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "commit_txn failed: out of sequence response")
		return
	}
	result := CommitTxnResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) Lock(rqst *LockRequest) (r *LockResponse, err error) {
	if err = p.sendLock(rqst); err != nil {
		return
	}
	return p.recvLock()
}

func (p *ThriftHiveMetastoreClient) sendLock(rqst *LockRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lock", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LockArgs{
		Rqst: rqst,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvLock() (value *LockResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error257 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error258 error
		error258, err = error257.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error258
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "lock failed: out of sequence response")
		return
	}
	result := LockResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) CheckLock(rqst *CheckLockRequest) (r *LockResponse, err error) {
	if err = p.sendCheckLock(rqst); err != nil {
		return
	}
	return p.recvCheckLock()
}

func (p *ThriftHiveMetastoreClient) sendCheckLock(rqst *CheckLockRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("check_lock", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CheckLockArgs{
		Rqst: rqst,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCheckLock() (value *LockResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error259 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error260 error
		error260, err = error259.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error260
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "check_lock failed: out of sequence response")
		return
	}
	result := CheckLockResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) Unlock(rqst *UnlockRequest) (err error) {
	if err = p.sendUnlock(rqst); err != nil {
		return
	}
	return p.recvUnlock()
}

func (p *ThriftHiveMetastoreClient) sendUnlock(rqst *UnlockRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unlock", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UnlockArgs{
		Rqst: rqst,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvUnlock() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error261 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error262 error
		error262, err = error261.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error262
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unlock failed: out of sequence response")
		return
	}
	result := UnlockResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) ShowLocks(rqst *ShowLocksRequest) (r *ShowLocksResponse, err error) {
	if err = p.sendShowLocks(rqst); err != nil {
		return
	}
	return p.recvShowLocks()
}

func (p *ThriftHiveMetastoreClient) sendShowLocks(rqst *ShowLocksRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("show_locks", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ShowLocksArgs{
		Rqst: rqst,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvShowLocks() (value *ShowLocksResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error263 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error264 error
		error264, err = error263.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error264
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "show_locks failed: out of sequence response")
		return
	}
	result := ShowLocksResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Ids
func (p *ThriftHiveMetastoreClient) Heartbeat(ids *HeartbeatRequest) (err error) {
	if err = p.sendHeartbeat(ids); err != nil {
		return
	}
	return p.recvHeartbeat()
}

func (p *ThriftHiveMetastoreClient) sendHeartbeat(ids *HeartbeatRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("heartbeat", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := HeartbeatArgs{
		Ids: ids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvHeartbeat() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error265 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error266 error
		error266, err = error265.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error266
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "heartbeat failed: out of sequence response")
		return
	}
	result := HeartbeatResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	return
}

// Parameters:
//  - Txns
func (p *ThriftHiveMetastoreClient) HeartbeatTxnRange(txns *HeartbeatTxnRangeRequest) (r *HeartbeatTxnRangeResponse, err error) {
	if err = p.sendHeartbeatTxnRange(txns); err != nil {
		return
	}
	return p.recvHeartbeatTxnRange()
}

func (p *ThriftHiveMetastoreClient) sendHeartbeatTxnRange(txns *HeartbeatTxnRangeRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("heartbeat_txn_range", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := HeartbeatTxnRangeArgs{
		Txns: txns,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvHeartbeatTxnRange() (value *HeartbeatTxnRangeResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error267 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error268 error
		error268, err = error267.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error268
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "heartbeat_txn_range failed: out of sequence response")
		return
	}
	result := HeartbeatTxnRangeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) Compact(rqst *CompactionRequest) (err error) {
	if err = p.sendCompact(rqst); err != nil {
		return
	}
	return p.recvCompact()
}

func (p *ThriftHiveMetastoreClient) sendCompact(rqst *CompactionRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("compact", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CompactArgs{
		Rqst: rqst,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCompact() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error269 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error270 error
		error270, err = error269.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error270
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "compact failed: out of sequence response")
		return
	}
	result := CompactResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) ShowCompact(rqst *ShowCompactRequest) (r *ShowCompactResponse, err error) {
	if err = p.sendShowCompact(rqst); err != nil {
		return
	}
	return p.recvShowCompact()
}

func (p *ThriftHiveMetastoreClient) sendShowCompact(rqst *ShowCompactRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("show_compact", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ShowCompactArgs{
		Rqst: rqst,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvShowCompact() (value *ShowCompactResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error271 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error272 error
		error272, err = error271.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error272
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "show_compact failed: out of sequence response")
		return
	}
	result := ShowCompactResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type ThriftHiveMetastoreProcessor struct {
	*fb303.FacebookServiceProcessor
}

func NewThriftHiveMetastoreProcessor(handler ThriftHiveMetastore) *ThriftHiveMetastoreProcessor {
	self273 := &ThriftHiveMetastoreProcessor{fb303.NewFacebookServiceProcessor(handler)}
	self273.AddToProcessorMap("create_database", &thriftHiveMetastoreProcessorCreateDatabase{handler: handler})
	self273.AddToProcessorMap("get_database", &thriftHiveMetastoreProcessorGetDatabase{handler: handler})
	self273.AddToProcessorMap("drop_database", &thriftHiveMetastoreProcessorDropDatabase{handler: handler})
	self273.AddToProcessorMap("get_databases", &thriftHiveMetastoreProcessorGetDatabases{handler: handler})
	self273.AddToProcessorMap("get_all_databases", &thriftHiveMetastoreProcessorGetAllDatabases{handler: handler})
	self273.AddToProcessorMap("alter_database", &thriftHiveMetastoreProcessorAlterDatabase{handler: handler})
	self273.AddToProcessorMap("get_type", &thriftHiveMetastoreProcessorGetType{handler: handler})
	self273.AddToProcessorMap("create_type", &thriftHiveMetastoreProcessorCreateType{handler: handler})
	self273.AddToProcessorMap("drop_type", &thriftHiveMetastoreProcessorDropType{handler: handler})
	self273.AddToProcessorMap("get_type_all", &thriftHiveMetastoreProcessorGetTypeAll{handler: handler})
	self273.AddToProcessorMap("get_fields", &thriftHiveMetastoreProcessorGetFields{handler: handler})
	self273.AddToProcessorMap("get_schema", &thriftHiveMetastoreProcessorGetSchema{handler: handler})
	self273.AddToProcessorMap("create_table", &thriftHiveMetastoreProcessorCreateTable{handler: handler})
	self273.AddToProcessorMap("create_table_with_environment_context", &thriftHiveMetastoreProcessorCreateTableWithEnvironmentContext{handler: handler})
	self273.AddToProcessorMap("drop_table", &thriftHiveMetastoreProcessorDropTable{handler: handler})
	self273.AddToProcessorMap("drop_table_with_environment_context", &thriftHiveMetastoreProcessorDropTableWithEnvironmentContext{handler: handler})
	self273.AddToProcessorMap("get_tables", &thriftHiveMetastoreProcessorGetTables{handler: handler})
	self273.AddToProcessorMap("get_all_tables", &thriftHiveMetastoreProcessorGetAllTables{handler: handler})
	self273.AddToProcessorMap("get_table", &thriftHiveMetastoreProcessorGetTable{handler: handler})
	self273.AddToProcessorMap("get_table_objects_by_name", &thriftHiveMetastoreProcessorGetTableObjectsByName{handler: handler})
	self273.AddToProcessorMap("get_table_names_by_filter", &thriftHiveMetastoreProcessorGetTableNamesByFilter{handler: handler})
	self273.AddToProcessorMap("alter_table", &thriftHiveMetastoreProcessorAlterTable{handler: handler})
	self273.AddToProcessorMap("alter_table_with_environment_context", &thriftHiveMetastoreProcessorAlterTableWithEnvironmentContext{handler: handler})
	self273.AddToProcessorMap("add_partition", &thriftHiveMetastoreProcessorAddPartition{handler: handler})
	self273.AddToProcessorMap("add_partition_with_environment_context", &thriftHiveMetastoreProcessorAddPartitionWithEnvironmentContext{handler: handler})
	self273.AddToProcessorMap("add_partitions", &thriftHiveMetastoreProcessorAddPartitions{handler: handler})
	self273.AddToProcessorMap("append_partition", &thriftHiveMetastoreProcessorAppendPartition{handler: handler})
	self273.AddToProcessorMap("add_partitions_req", &thriftHiveMetastoreProcessorAddPartitionsReq{handler: handler})
	self273.AddToProcessorMap("append_partition_with_environment_context", &thriftHiveMetastoreProcessorAppendPartitionWithEnvironmentContext{handler: handler})
	self273.AddToProcessorMap("append_partition_by_name", &thriftHiveMetastoreProcessorAppendPartitionByName{handler: handler})
	self273.AddToProcessorMap("append_partition_by_name_with_environment_context", &thriftHiveMetastoreProcessorAppendPartitionByNameWithEnvironmentContext{handler: handler})
	self273.AddToProcessorMap("drop_partition", &thriftHiveMetastoreProcessorDropPartition{handler: handler})
	self273.AddToProcessorMap("drop_partition_with_environment_context", &thriftHiveMetastoreProcessorDropPartitionWithEnvironmentContext{handler: handler})
	self273.AddToProcessorMap("drop_partition_by_name", &thriftHiveMetastoreProcessorDropPartitionByName{handler: handler})
	self273.AddToProcessorMap("drop_partition_by_name_with_environment_context", &thriftHiveMetastoreProcessorDropPartitionByNameWithEnvironmentContext{handler: handler})
	self273.AddToProcessorMap("drop_partitions_req", &thriftHiveMetastoreProcessorDropPartitionsReq{handler: handler})
	self273.AddToProcessorMap("get_partition", &thriftHiveMetastoreProcessorGetPartition{handler: handler})
	self273.AddToProcessorMap("exchange_partition", &thriftHiveMetastoreProcessorExchangePartition{handler: handler})
	self273.AddToProcessorMap("get_partition_with_auth", &thriftHiveMetastoreProcessorGetPartitionWithAuth{handler: handler})
	self273.AddToProcessorMap("get_partition_by_name", &thriftHiveMetastoreProcessorGetPartitionByName{handler: handler})
	self273.AddToProcessorMap("get_partitions", &thriftHiveMetastoreProcessorGetPartitions{handler: handler})
	self273.AddToProcessorMap("get_partitions_with_auth", &thriftHiveMetastoreProcessorGetPartitionsWithAuth{handler: handler})
	self273.AddToProcessorMap("get_partition_names", &thriftHiveMetastoreProcessorGetPartitionNames{handler: handler})
	self273.AddToProcessorMap("get_partitions_ps", &thriftHiveMetastoreProcessorGetPartitionsPs{handler: handler})
	self273.AddToProcessorMap("get_partitions_ps_with_auth", &thriftHiveMetastoreProcessorGetPartitionsPsWithAuth{handler: handler})
	self273.AddToProcessorMap("get_partition_names_ps", &thriftHiveMetastoreProcessorGetPartitionNamesPs{handler: handler})
	self273.AddToProcessorMap("get_partitions_by_filter", &thriftHiveMetastoreProcessorGetPartitionsByFilter{handler: handler})
	self273.AddToProcessorMap("get_partitions_by_expr", &thriftHiveMetastoreProcessorGetPartitionsByExpr{handler: handler})
	self273.AddToProcessorMap("get_partitions_by_names", &thriftHiveMetastoreProcessorGetPartitionsByNames{handler: handler})
	self273.AddToProcessorMap("alter_partition", &thriftHiveMetastoreProcessorAlterPartition{handler: handler})
	self273.AddToProcessorMap("alter_partitions", &thriftHiveMetastoreProcessorAlterPartitions{handler: handler})
	self273.AddToProcessorMap("alter_partition_with_environment_context", &thriftHiveMetastoreProcessorAlterPartitionWithEnvironmentContext{handler: handler})
	self273.AddToProcessorMap("rename_partition", &thriftHiveMetastoreProcessorRenamePartition{handler: handler})
	self273.AddToProcessorMap("partition_name_has_valid_characters", &thriftHiveMetastoreProcessorPartitionNameHasValidCharacters{handler: handler})
	self273.AddToProcessorMap("get_config_value", &thriftHiveMetastoreProcessorGetConfigValue{handler: handler})
	self273.AddToProcessorMap("partition_name_to_vals", &thriftHiveMetastoreProcessorPartitionNameToVals{handler: handler})
	self273.AddToProcessorMap("partition_name_to_spec", &thriftHiveMetastoreProcessorPartitionNameToSpec{handler: handler})
	self273.AddToProcessorMap("markPartitionForEvent", &thriftHiveMetastoreProcessorMarkPartitionForEvent{handler: handler})
	self273.AddToProcessorMap("isPartitionMarkedForEvent", &thriftHiveMetastoreProcessorIsPartitionMarkedForEvent{handler: handler})
	self273.AddToProcessorMap("add_index", &thriftHiveMetastoreProcessorAddIndex{handler: handler})
	self273.AddToProcessorMap("alter_index", &thriftHiveMetastoreProcessorAlterIndex{handler: handler})
	self273.AddToProcessorMap("drop_index_by_name", &thriftHiveMetastoreProcessorDropIndexByName{handler: handler})
	self273.AddToProcessorMap("get_index_by_name", &thriftHiveMetastoreProcessorGetIndexByName{handler: handler})
	self273.AddToProcessorMap("get_indexes", &thriftHiveMetastoreProcessorGetIndexes{handler: handler})
	self273.AddToProcessorMap("get_index_names", &thriftHiveMetastoreProcessorGetIndexNames{handler: handler})
	self273.AddToProcessorMap("update_table_column_statistics", &thriftHiveMetastoreProcessorUpdateTableColumnStatistics{handler: handler})
	self273.AddToProcessorMap("update_partition_column_statistics", &thriftHiveMetastoreProcessorUpdatePartitionColumnStatistics{handler: handler})
	self273.AddToProcessorMap("get_table_column_statistics", &thriftHiveMetastoreProcessorGetTableColumnStatistics{handler: handler})
	self273.AddToProcessorMap("get_partition_column_statistics", &thriftHiveMetastoreProcessorGetPartitionColumnStatistics{handler: handler})
	self273.AddToProcessorMap("get_table_statistics_req", &thriftHiveMetastoreProcessorGetTableStatisticsReq{handler: handler})
	self273.AddToProcessorMap("get_partitions_statistics_req", &thriftHiveMetastoreProcessorGetPartitionsStatisticsReq{handler: handler})
	self273.AddToProcessorMap("delete_partition_column_statistics", &thriftHiveMetastoreProcessorDeletePartitionColumnStatistics{handler: handler})
	self273.AddToProcessorMap("delete_table_column_statistics", &thriftHiveMetastoreProcessorDeleteTableColumnStatistics{handler: handler})
	self273.AddToProcessorMap("create_function", &thriftHiveMetastoreProcessorCreateFunction{handler: handler})
	self273.AddToProcessorMap("drop_function", &thriftHiveMetastoreProcessorDropFunction{handler: handler})
	self273.AddToProcessorMap("alter_function", &thriftHiveMetastoreProcessorAlterFunction{handler: handler})
	self273.AddToProcessorMap("get_functions", &thriftHiveMetastoreProcessorGetFunctions{handler: handler})
	self273.AddToProcessorMap("get_function", &thriftHiveMetastoreProcessorGetFunction{handler: handler})
	self273.AddToProcessorMap("create_role", &thriftHiveMetastoreProcessorCreateRole{handler: handler})
	self273.AddToProcessorMap("drop_role", &thriftHiveMetastoreProcessorDropRole{handler: handler})
	self273.AddToProcessorMap("get_role_names", &thriftHiveMetastoreProcessorGetRoleNames{handler: handler})
	self273.AddToProcessorMap("grant_role", &thriftHiveMetastoreProcessorGrantRole{handler: handler})
	self273.AddToProcessorMap("revoke_role", &thriftHiveMetastoreProcessorRevokeRole{handler: handler})
	self273.AddToProcessorMap("list_roles", &thriftHiveMetastoreProcessorListRoles{handler: handler})
	self273.AddToProcessorMap("get_principals_in_role", &thriftHiveMetastoreProcessorGetPrincipalsInRole{handler: handler})
	self273.AddToProcessorMap("get_role_grants_for_principal", &thriftHiveMetastoreProcessorGetRoleGrantsForPrincipal{handler: handler})
	self273.AddToProcessorMap("get_privilege_set", &thriftHiveMetastoreProcessorGetPrivilegeSet{handler: handler})
	self273.AddToProcessorMap("list_privileges", &thriftHiveMetastoreProcessorListPrivileges{handler: handler})
	self273.AddToProcessorMap("grant_privileges", &thriftHiveMetastoreProcessorGrantPrivileges{handler: handler})
	self273.AddToProcessorMap("revoke_privileges", &thriftHiveMetastoreProcessorRevokePrivileges{handler: handler})
	self273.AddToProcessorMap("set_ugi", &thriftHiveMetastoreProcessorSetUgi{handler: handler})
	self273.AddToProcessorMap("get_delegation_token", &thriftHiveMetastoreProcessorGetDelegationToken{handler: handler})
	self273.AddToProcessorMap("renew_delegation_token", &thriftHiveMetastoreProcessorRenewDelegationToken{handler: handler})
	self273.AddToProcessorMap("cancel_delegation_token", &thriftHiveMetastoreProcessorCancelDelegationToken{handler: handler})
	self273.AddToProcessorMap("get_open_txns", &thriftHiveMetastoreProcessorGetOpenTxns{handler: handler})
	self273.AddToProcessorMap("get_open_txns_info", &thriftHiveMetastoreProcessorGetOpenTxnsInfo{handler: handler})
	self273.AddToProcessorMap("open_txns", &thriftHiveMetastoreProcessorOpenTxns{handler: handler})
	self273.AddToProcessorMap("abort_txn", &thriftHiveMetastoreProcessorAbortTxn{handler: handler})
	self273.AddToProcessorMap("commit_txn", &thriftHiveMetastoreProcessorCommitTxn{handler: handler})
	self273.AddToProcessorMap("lock", &thriftHiveMetastoreProcessorLock{handler: handler})
	self273.AddToProcessorMap("check_lock", &thriftHiveMetastoreProcessorCheckLock{handler: handler})
	self273.AddToProcessorMap("unlock", &thriftHiveMetastoreProcessorUnlock{handler: handler})
	self273.AddToProcessorMap("show_locks", &thriftHiveMetastoreProcessorShowLocks{handler: handler})
	self273.AddToProcessorMap("heartbeat", &thriftHiveMetastoreProcessorHeartbeat{handler: handler})
	self273.AddToProcessorMap("heartbeat_txn_range", &thriftHiveMetastoreProcessorHeartbeatTxnRange{handler: handler})
	self273.AddToProcessorMap("compact", &thriftHiveMetastoreProcessorCompact{handler: handler})
	self273.AddToProcessorMap("show_compact", &thriftHiveMetastoreProcessorShowCompact{handler: handler})
	return self273
}

type thriftHiveMetastoreProcessorCreateDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateDatabaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateDatabaseResult{}
	var err2 error
	if err2 = p.handler.CreateDatabase(args.Database); err2 != nil {
		switch v := err2.(type) {
		case *AlreadyExistsException:
			result.O1 = v
		case *InvalidObjectException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_database: "+err2.Error())
			oprot.WriteMessageBegin("create_database", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("create_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetDatabaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetDatabaseResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetDatabase(args.Name); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_database: "+err2.Error())
			oprot.WriteMessageBegin("get_database", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropDatabaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropDatabaseResult{}
	var err2 error
	if err2 = p.handler.DropDatabase(args.Name, args.DeleteData, args.Cascade); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *InvalidOperationException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_database: "+err2.Error())
			oprot.WriteMessageBegin("drop_database", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("drop_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDatabases struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDatabases) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetDatabasesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetDatabasesResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetDatabases(args.Pattern); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_databases: "+err2.Error())
			oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_databases", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetAllDatabases struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllDatabases) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetAllDatabasesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_all_databases", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetAllDatabasesResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetAllDatabases(); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_databases: "+err2.Error())
			oprot.WriteMessageBegin("get_all_databases", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_all_databases", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlterDatabaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AlterDatabaseResult{}
	var err2 error
	if err2 = p.handler.AlterDatabase(args.Dbname, args.Db); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_database: "+err2.Error())
			oprot.WriteMessageBegin("alter_database", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetType struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTypeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTypeResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetType(args.Name); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_type: "+err2.Error())
			oprot.WriteMessageBegin("get_type", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_type", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCreateType struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateTypeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateTypeResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.CreateType(args.TypeA1); err2 != nil {
		switch v := err2.(type) {
		case *AlreadyExistsException:
			result.O1 = v
		case *InvalidObjectException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_type: "+err2.Error())
			oprot.WriteMessageBegin("create_type", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("create_type", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropType struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropTypeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropTypeResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropType(args.TypeA1); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_type: "+err2.Error())
			oprot.WriteMessageBegin("drop_type", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("drop_type", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTypeAll struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTypeAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTypeAllArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_type_all", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTypeAllResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetTypeAll(args.Name); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_type_all: "+err2.Error())
			oprot.WriteMessageBegin("get_type_all", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_type_all", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetFields struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetFields) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetFieldsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_fields", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetFieldsResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetFields(args.DbName, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *UnknownTableException:
			result.O2 = v
		case *UnknownDBException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_fields: "+err2.Error())
			oprot.WriteMessageBegin("get_fields", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_fields", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetSchema struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetSchema) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetSchemaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_schema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetSchemaResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetSchema(args.DbName, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *UnknownTableException:
			result.O2 = v
		case *UnknownDBException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_schema: "+err2.Error())
			oprot.WriteMessageBegin("get_schema", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_schema", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCreateTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateTableResult{}
	var err2 error
	if err2 = p.handler.CreateTable(args.Tbl); err2 != nil {
		switch v := err2.(type) {
		case *AlreadyExistsException:
			result.O1 = v
		case *InvalidObjectException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		case *NoSuchObjectException:
			result.O4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_table: "+err2.Error())
			oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("create_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCreateTableWithEnvironmentContext struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateTableWithEnvironmentContext) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateTableWithEnvironmentContextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_table_with_environment_context", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateTableWithEnvironmentContextResult{}
	var err2 error
	if err2 = p.handler.CreateTableWithEnvironmentContext(args.Tbl, args.EnvironmentContext); err2 != nil {
		switch v := err2.(type) {
		case *AlreadyExistsException:
			result.O1 = v
		case *InvalidObjectException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		case *NoSuchObjectException:
			result.O4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_table_with_environment_context: "+err2.Error())
			oprot.WriteMessageBegin("create_table_with_environment_context", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("create_table_with_environment_context", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropTableResult{}
	var err2 error
	if err2 = p.handler.DropTable(args.Dbname, args.Name, args.DeleteData); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_table: "+err2.Error())
			oprot.WriteMessageBegin("drop_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("drop_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropTableWithEnvironmentContext struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropTableWithEnvironmentContext) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropTableWithEnvironmentContextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_table_with_environment_context", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropTableWithEnvironmentContextResult{}
	var err2 error
	if err2 = p.handler.DropTableWithEnvironmentContext(args.Dbname, args.Name, args.DeleteData, args.EnvironmentContext); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_table_with_environment_context: "+err2.Error())
			oprot.WriteMessageBegin("drop_table_with_environment_context", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("drop_table_with_environment_context", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTables struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTablesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTablesResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetTables(args.DbName, args.Pattern); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_tables: "+err2.Error())
			oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_tables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetAllTables struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetAllTablesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_all_tables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetAllTablesResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetAllTables(args.DbName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_tables: "+err2.Error())
			oprot.WriteMessageBegin("get_all_tables", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_all_tables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTableResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetTable(args.Dbname, args.TblName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table: "+err2.Error())
			oprot.WriteMessageBegin("get_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTableObjectsByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTableObjectsByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTableObjectsByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_table_objects_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTableObjectsByNameResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetTableObjectsByName(args.Dbname, args.TblNames); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *InvalidOperationException:
			result.O2 = v
		case *UnknownDBException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_objects_by_name: "+err2.Error())
			oprot.WriteMessageBegin("get_table_objects_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_table_objects_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTableNamesByFilter struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTableNamesByFilter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTableNamesByFilterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_table_names_by_filter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTableNamesByFilterResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetTableNamesByFilter(args.Dbname, args.Filter, args.MaxTables); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *InvalidOperationException:
			result.O2 = v
		case *UnknownDBException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_names_by_filter: "+err2.Error())
			oprot.WriteMessageBegin("get_table_names_by_filter", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_table_names_by_filter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlterTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AlterTableResult{}
	var err2 error
	if err2 = p.handler.AlterTable(args.Dbname, args.TblName, args.NewTbl_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperationException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_table: "+err2.Error())
			oprot.WriteMessageBegin("alter_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterTableWithEnvironmentContext struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterTableWithEnvironmentContext) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlterTableWithEnvironmentContextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_table_with_environment_context", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AlterTableWithEnvironmentContextResult{}
	var err2 error
	if err2 = p.handler.AlterTableWithEnvironmentContext(args.Dbname, args.TblName, args.NewTbl_, args.EnvironmentContext); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperationException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_table_with_environment_context: "+err2.Error())
			oprot.WriteMessageBegin("alter_table_with_environment_context", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_table_with_environment_context", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAddPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AddPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("add_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AddPartitionResult{}
	var err2 error
	if result.Success, err2 = p.handler.AddPartition(args.NewPart_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partition: "+err2.Error())
			oprot.WriteMessageBegin("add_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("add_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAddPartitionWithEnvironmentContext struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartitionWithEnvironmentContext) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AddPartitionWithEnvironmentContextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("add_partition_with_environment_context", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AddPartitionWithEnvironmentContextResult{}
	var err2 error
	if result.Success, err2 = p.handler.AddPartitionWithEnvironmentContext(args.NewPart_, args.EnvironmentContext); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partition_with_environment_context: "+err2.Error())
			oprot.WriteMessageBegin("add_partition_with_environment_context", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("add_partition_with_environment_context", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAddPartitions struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartitions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AddPartitionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("add_partitions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AddPartitionsResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.AddPartitions(args.NewParts_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partitions: "+err2.Error())
			oprot.WriteMessageBegin("add_partitions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("add_partitions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAppendPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppendPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("append_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AppendPartitionResult{}
	var err2 error
	if result.Success, err2 = p.handler.AppendPartition(args.DbName, args.TblName, args.PartVals); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition: "+err2.Error())
			oprot.WriteMessageBegin("append_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("append_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAddPartitionsReq struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartitionsReq) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AddPartitionsReqArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("add_partitions_req", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AddPartitionsReqResult{}
	var err2 error
	if result.Success, err2 = p.handler.AddPartitionsReq(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partitions_req: "+err2.Error())
			oprot.WriteMessageBegin("add_partitions_req", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("add_partitions_req", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAppendPartitionWithEnvironmentContext struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartitionWithEnvironmentContext) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppendPartitionWithEnvironmentContextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("append_partition_with_environment_context", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AppendPartitionWithEnvironmentContextResult{}
	var err2 error
	if result.Success, err2 = p.handler.AppendPartitionWithEnvironmentContext(args.DbName, args.TblName, args.PartVals, args.EnvironmentContext); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition_with_environment_context: "+err2.Error())
			oprot.WriteMessageBegin("append_partition_with_environment_context", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("append_partition_with_environment_context", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAppendPartitionByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppendPartitionByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("append_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AppendPartitionByNameResult{}
	var err2 error
	if result.Success, err2 = p.handler.AppendPartitionByName(args.DbName, args.TblName, args.PartName); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition_by_name: "+err2.Error())
			oprot.WriteMessageBegin("append_partition_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("append_partition_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAppendPartitionByNameWithEnvironmentContext struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartitionByNameWithEnvironmentContext) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppendPartitionByNameWithEnvironmentContextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("append_partition_by_name_with_environment_context", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AppendPartitionByNameWithEnvironmentContextResult{}
	var err2 error
	if result.Success, err2 = p.handler.AppendPartitionByNameWithEnvironmentContext(args.DbName, args.TblName, args.PartName, args.EnvironmentContext); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition_by_name_with_environment_context: "+err2.Error())
			oprot.WriteMessageBegin("append_partition_by_name_with_environment_context", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("append_partition_by_name_with_environment_context", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropPartitionResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropPartition(args.DbName, args.TblName, args.PartVals, args.DeleteData); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition: "+err2.Error())
			oprot.WriteMessageBegin("drop_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("drop_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropPartitionWithEnvironmentContext struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartitionWithEnvironmentContext) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropPartitionWithEnvironmentContextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_partition_with_environment_context", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropPartitionWithEnvironmentContextResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropPartitionWithEnvironmentContext(args.DbName, args.TblName, args.PartVals, args.DeleteData, args.EnvironmentContext); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition_with_environment_context: "+err2.Error())
			oprot.WriteMessageBegin("drop_partition_with_environment_context", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("drop_partition_with_environment_context", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropPartitionByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropPartitionByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropPartitionByNameResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropPartitionByName(args.DbName, args.TblName, args.PartName, args.DeleteData); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition_by_name: "+err2.Error())
			oprot.WriteMessageBegin("drop_partition_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("drop_partition_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropPartitionByNameWithEnvironmentContext struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartitionByNameWithEnvironmentContext) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropPartitionByNameWithEnvironmentContextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_partition_by_name_with_environment_context", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropPartitionByNameWithEnvironmentContextResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropPartitionByNameWithEnvironmentContext(args.DbName, args.TblName, args.PartName, args.DeleteData, args.EnvironmentContext); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition_by_name_with_environment_context: "+err2.Error())
			oprot.WriteMessageBegin("drop_partition_by_name_with_environment_context", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("drop_partition_by_name_with_environment_context", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropPartitionsReq struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartitionsReq) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropPartitionsReqArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_partitions_req", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropPartitionsReqResult{}
	var err2 error
	if result.Success, err2 = p.handler.DropPartitionsReq(args.Req); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partitions_req: "+err2.Error())
			oprot.WriteMessageBegin("drop_partitions_req", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("drop_partitions_req", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPartition(args.DbName, args.TblName, args.PartVals); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition: "+err2.Error())
			oprot.WriteMessageBegin("get_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorExchangePartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorExchangePartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExchangePartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("exchange_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ExchangePartitionResult{}
	var err2 error
	if result.Success, err2 = p.handler.ExchangePartition(args.PartitionSpecs, args.SourceDb, args.SourceTableName, args.DestDb, args.DestTableName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		case *InvalidObjectException:
			result.O3 = v
		case *InvalidInputException:
			result.O4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exchange_partition: "+err2.Error())
			oprot.WriteMessageBegin("exchange_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("exchange_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionWithAuth struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionWithAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionWithAuthResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPartitionWithAuth(args.DbName, args.TblName, args.PartVals, args.UserName, args.GroupNames); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_with_auth: "+err2.Error())
			oprot.WriteMessageBegin("get_partition_with_auth", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_partition_with_auth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionByNameResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPartitionByName(args.DbName, args.TblName, args.PartName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_by_name: "+err2.Error())
			oprot.WriteMessageBegin("get_partition_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_partition_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitions struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionsResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPartitions(args.DbName, args.TblName, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_partitions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsWithAuth struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionsWithAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionsWithAuthResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPartitionsWithAuth(args.DbName, args.TblName, args.MaxParts, args.UserName, args.GroupNames); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_with_auth: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_with_auth", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_with_auth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionNames struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionNamesResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPartitionNames(args.DbName, args.TblName, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_names: "+err2.Error())
			oprot.WriteMessageBegin("get_partition_names", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_partition_names", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPs struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionsPsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_ps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionsPsResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPartitionsPs(args.DbName, args.TblName, args.PartVals, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_ps: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_ps", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_ps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPsWithAuth struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPsWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionsPsWithAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionsPsWithAuthResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPartitionsPsWithAuth(args.DbName, args.TblName, args.PartVals, args.MaxParts, args.UserName, args.GroupNames); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_ps_with_auth: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionNamesPs struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionNamesPs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionNamesPsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_names_ps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionNamesPsResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPartitionNamesPs(args.DbName, args.TblName, args.PartVals, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_names_ps: "+err2.Error())
			oprot.WriteMessageBegin("get_partition_names_ps", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_partition_names_ps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsByFilter struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsByFilter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionsByFilterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_by_filter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionsByFilterResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPartitionsByFilter(args.DbName, args.TblName, args.Filter, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_by_filter: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_by_filter", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_by_filter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsByExpr struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsByExpr) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionsByExprArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_by_expr", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionsByExprResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPartitionsByExpr(args.Req); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_by_expr: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_by_expr", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_by_expr", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsByNames struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsByNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionsByNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_by_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionsByNamesResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPartitionsByNames(args.DbName, args.TblName, args.Names); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_by_names: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_by_names", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_by_names", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlterPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AlterPartitionResult{}
	var err2 error
	if err2 = p.handler.AlterPartition(args.DbName, args.TblName, args.NewPart_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperationException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_partition: "+err2.Error())
			oprot.WriteMessageBegin("alter_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterPartitions struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterPartitions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlterPartitionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_partitions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AlterPartitionsResult{}
	var err2 error
	if err2 = p.handler.AlterPartitions(args.DbName, args.TblName, args.NewParts_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperationException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_partitions: "+err2.Error())
			oprot.WriteMessageBegin("alter_partitions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_partitions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterPartitionWithEnvironmentContext struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterPartitionWithEnvironmentContext) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlterPartitionWithEnvironmentContextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_partition_with_environment_context", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AlterPartitionWithEnvironmentContextResult{}
	var err2 error
	if err2 = p.handler.AlterPartitionWithEnvironmentContext(args.DbName, args.TblName, args.NewPart_, args.EnvironmentContext); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperationException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_partition_with_environment_context: "+err2.Error())
			oprot.WriteMessageBegin("alter_partition_with_environment_context", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_partition_with_environment_context", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorRenamePartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRenamePartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RenamePartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rename_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RenamePartitionResult{}
	var err2 error
	if err2 = p.handler.RenamePartition(args.DbName, args.TblName, args.PartVals, args.NewPart_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperationException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rename_partition: "+err2.Error())
			oprot.WriteMessageBegin("rename_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("rename_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorPartitionNameHasValidCharacters struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameHasValidCharacters) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PartitionNameHasValidCharactersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("partition_name_has_valid_characters", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PartitionNameHasValidCharactersResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.PartitionNameHasValidCharacters(args.PartVals, args.ThrowException); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_has_valid_characters: "+err2.Error())
			oprot.WriteMessageBegin("partition_name_has_valid_characters", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("partition_name_has_valid_characters", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetConfigValue struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetConfigValue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetConfigValueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_config_value", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetConfigValueResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetConfigValue(args.Name, args.DefaultValue); err2 != nil {
		switch v := err2.(type) {
		case *ConfigValSecurityException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_config_value: "+err2.Error())
			oprot.WriteMessageBegin("get_config_value", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("get_config_value", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorPartitionNameToVals struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameToVals) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PartitionNameToValsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("partition_name_to_vals", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PartitionNameToValsResult{}
	var err2 error
	if result.Success, err2 = p.handler.PartitionNameToVals(args.PartName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_to_vals: "+err2.Error())
			oprot.WriteMessageBegin("partition_name_to_vals", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("partition_name_to_vals", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorPartitionNameToSpec struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameToSpec) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PartitionNameToSpecArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("partition_name_to_spec", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PartitionNameToSpecResult{}
	var err2 error
	if result.Success, err2 = p.handler.PartitionNameToSpec(args.PartName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_to_spec: "+err2.Error())
			oprot.WriteMessageBegin("partition_name_to_spec", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("partition_name_to_spec", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorMarkPartitionForEvent struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorMarkPartitionForEvent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MarkPartitionForEventArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("markPartitionForEvent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MarkPartitionForEventResult{}
	var err2 error
	if err2 = p.handler.MarkPartitionForEvent(args.DbName, args.TblName, args.PartVals, args.EventType); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		case *UnknownDBException:
			result.O3 = v
		case *UnknownTableException:
			result.O4 = v
		case *UnknownPartitionException:
			result.O5 = v
		case *InvalidPartitionException:
			result.O6 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing markPartitionForEvent: "+err2.Error())
			oprot.WriteMessageBegin("markPartitionForEvent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("markPartitionForEvent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorIsPartitionMarkedForEvent struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorIsPartitionMarkedForEvent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IsPartitionMarkedForEventArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isPartitionMarkedForEvent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IsPartitionMarkedForEventResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.IsPartitionMarkedForEvent(args.DbName, args.TblName, args.PartVals, args.EventType); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		case *UnknownDBException:
			result.O3 = v
		case *UnknownTableException:
			result.O4 = v
		case *UnknownPartitionException:
			result.O5 = v
		case *InvalidPartitionException:
			result.O6 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isPartitionMarkedForEvent: "+err2.Error())
			oprot.WriteMessageBegin("isPartitionMarkedForEvent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("isPartitionMarkedForEvent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAddIndex struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddIndex) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AddIndexArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("add_index", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AddIndexResult{}
	var err2 error
	if result.Success, err2 = p.handler.AddIndex(args.NewIndex_, args.IndexTable); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_index: "+err2.Error())
			oprot.WriteMessageBegin("add_index", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("add_index", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterIndex struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterIndex) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlterIndexArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_index", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AlterIndexResult{}
	var err2 error
	if err2 = p.handler.AlterIndex(args.Dbname, args.BaseTblName, args.IdxName, args.NewIdx_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperationException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_index: "+err2.Error())
			oprot.WriteMessageBegin("alter_index", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_index", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropIndexByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropIndexByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropIndexByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_index_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropIndexByNameResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropIndexByName(args.DbName, args.TblName, args.IndexName, args.DeleteData); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_index_by_name: "+err2.Error())
			oprot.WriteMessageBegin("drop_index_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("drop_index_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetIndexByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetIndexByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_index_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetIndexByNameResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetIndexByName(args.DbName, args.TblName, args.IndexName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_index_by_name: "+err2.Error())
			oprot.WriteMessageBegin("get_index_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_index_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetIndexes struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetIndexesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_indexes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetIndexesResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetIndexes(args.DbName, args.TblName, args.MaxIndexes); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_indexes: "+err2.Error())
			oprot.WriteMessageBegin("get_indexes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_indexes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetIndexNames struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetIndexNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_index_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetIndexNamesResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetIndexNames(args.DbName, args.TblName, args.MaxIndexes); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_index_names: "+err2.Error())
			oprot.WriteMessageBegin("get_index_names", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_index_names", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorUpdateTableColumnStatistics struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorUpdateTableColumnStatistics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateTableColumnStatisticsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("update_table_column_statistics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateTableColumnStatisticsResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.UpdateTableColumnStatistics(args.StatsObj); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *InvalidObjectException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		case *InvalidInputException:
			result.O4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_table_column_statistics: "+err2.Error())
			oprot.WriteMessageBegin("update_table_column_statistics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("update_table_column_statistics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorUpdatePartitionColumnStatistics struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorUpdatePartitionColumnStatistics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdatePartitionColumnStatisticsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("update_partition_column_statistics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdatePartitionColumnStatisticsResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.UpdatePartitionColumnStatistics(args.StatsObj); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *InvalidObjectException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		case *InvalidInputException:
			result.O4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_partition_column_statistics: "+err2.Error())
			oprot.WriteMessageBegin("update_partition_column_statistics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("update_partition_column_statistics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTableColumnStatistics struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTableColumnStatistics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTableColumnStatisticsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_table_column_statistics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTableColumnStatisticsResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetTableColumnStatistics(args.DbName, args.TblName, args.ColName); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		case *InvalidInputException:
			result.O3 = v
		case *InvalidObjectException:
			result.O4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_column_statistics: "+err2.Error())
			oprot.WriteMessageBegin("get_table_column_statistics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_table_column_statistics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionColumnStatistics struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionColumnStatistics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionColumnStatisticsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_column_statistics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionColumnStatisticsResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPartitionColumnStatistics(args.DbName, args.TblName, args.PartName, args.ColName); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		case *InvalidInputException:
			result.O3 = v
		case *InvalidObjectException:
			result.O4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_column_statistics: "+err2.Error())
			oprot.WriteMessageBegin("get_partition_column_statistics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_partition_column_statistics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTableStatisticsReq struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTableStatisticsReq) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTableStatisticsReqArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_table_statistics_req", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTableStatisticsReqResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetTableStatisticsReq(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_statistics_req: "+err2.Error())
			oprot.WriteMessageBegin("get_table_statistics_req", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_table_statistics_req", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsStatisticsReq struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsStatisticsReq) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionsStatisticsReqArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_statistics_req", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionsStatisticsReqResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPartitionsStatisticsReq(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_statistics_req: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_statistics_req", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_statistics_req", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDeletePartitionColumnStatistics struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDeletePartitionColumnStatistics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeletePartitionColumnStatisticsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delete_partition_column_statistics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeletePartitionColumnStatisticsResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DeletePartitionColumnStatistics(args.DbName, args.TblName, args.PartName, args.ColName); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		case *InvalidObjectException:
			result.O3 = v
		case *InvalidInputException:
			result.O4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_partition_column_statistics: "+err2.Error())
			oprot.WriteMessageBegin("delete_partition_column_statistics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("delete_partition_column_statistics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDeleteTableColumnStatistics struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDeleteTableColumnStatistics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteTableColumnStatisticsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delete_table_column_statistics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteTableColumnStatisticsResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DeleteTableColumnStatistics(args.DbName, args.TblName, args.ColName); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		case *InvalidObjectException:
			result.O3 = v
		case *InvalidInputException:
			result.O4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_table_column_statistics: "+err2.Error())
			oprot.WriteMessageBegin("delete_table_column_statistics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("delete_table_column_statistics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCreateFunction struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateFunction) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateFunctionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_function", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateFunctionResult{}
	var err2 error
	if err2 = p.handler.CreateFunction(args.FuncA1); err2 != nil {
		switch v := err2.(type) {
		case *AlreadyExistsException:
			result.O1 = v
		case *InvalidObjectException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		case *NoSuchObjectException:
			result.O4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_function: "+err2.Error())
			oprot.WriteMessageBegin("create_function", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("create_function", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropFunction struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropFunction) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropFunctionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_function", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropFunctionResult{}
	var err2 error
	if err2 = p.handler.DropFunction(args.DbName, args.FuncName); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_function: "+err2.Error())
			oprot.WriteMessageBegin("drop_function", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("drop_function", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterFunction struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterFunction) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlterFunctionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_function", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AlterFunctionResult{}
	var err2 error
	if err2 = p.handler.AlterFunction(args.DbName, args.FuncName, args.NewFunc_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperationException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_function: "+err2.Error())
			oprot.WriteMessageBegin("alter_function", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_function", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetFunctions struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetFunctions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetFunctionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_functions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetFunctionsResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetFunctions(args.DbName, args.Pattern); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_functions: "+err2.Error())
			oprot.WriteMessageBegin("get_functions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_functions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetFunction struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetFunction) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetFunctionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_function", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetFunctionResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetFunction(args.DbName, args.FuncName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_function: "+err2.Error())
			oprot.WriteMessageBegin("get_function", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_function", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCreateRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateRoleResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.CreateRole(args.Role); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_role: "+err2.Error())
			oprot.WriteMessageBegin("create_role", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("create_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropRoleResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropRole(args.RoleName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_role: "+err2.Error())
			oprot.WriteMessageBegin("drop_role", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("drop_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetRoleNames struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetRoleNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetRoleNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_role_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetRoleNamesResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetRoleNames(); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_role_names: "+err2.Error())
			oprot.WriteMessageBegin("get_role_names", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_role_names", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGrantRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GrantRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("grant_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GrantRoleResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.GrantRole(args.RoleName, args.PrincipalName, args.PrincipalType, args.Grantor, args.GrantorType, args.GrantOption); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_role: "+err2.Error())
			oprot.WriteMessageBegin("grant_role", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("grant_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorRevokeRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRevokeRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RevokeRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("revoke_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RevokeRoleResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RevokeRole(args.RoleName, args.PrincipalName, args.PrincipalType); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revoke_role: "+err2.Error())
			oprot.WriteMessageBegin("revoke_role", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("revoke_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorListRoles struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorListRoles) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListRolesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_roles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListRolesResult{}
	var err2 error
	if result.Success, err2 = p.handler.ListRoles(args.PrincipalName, args.PrincipalType); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_roles: "+err2.Error())
			oprot.WriteMessageBegin("list_roles", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("list_roles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPrincipalsInRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPrincipalsInRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPrincipalsInRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_principals_in_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPrincipalsInRoleResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPrincipalsInRole(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_principals_in_role: "+err2.Error())
			oprot.WriteMessageBegin("get_principals_in_role", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_principals_in_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetRoleGrantsForPrincipal struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetRoleGrantsForPrincipal) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetRoleGrantsForPrincipalArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_role_grants_for_principal", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetRoleGrantsForPrincipalResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetRoleGrantsForPrincipal(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_role_grants_for_principal: "+err2.Error())
			oprot.WriteMessageBegin("get_role_grants_for_principal", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_role_grants_for_principal", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPrivilegeSet struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPrivilegeSet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPrivilegeSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_privilege_set", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPrivilegeSetResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetPrivilegeSet(args.HiveObject, args.UserName, args.GroupNames); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_privilege_set: "+err2.Error())
			oprot.WriteMessageBegin("get_privilege_set", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("get_privilege_set", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorListPrivileges struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorListPrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListPrivilegesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListPrivilegesResult{}
	var err2 error
	if result.Success, err2 = p.handler.ListPrivileges(args.PrincipalName, args.PrincipalType, args.HiveObject); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_privileges: "+err2.Error())
			oprot.WriteMessageBegin("list_privileges", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("list_privileges", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGrantPrivileges struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantPrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GrantPrivilegesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("grant_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GrantPrivilegesResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.GrantPrivileges(args.Privileges); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_privileges: "+err2.Error())
			oprot.WriteMessageBegin("grant_privileges", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("grant_privileges", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorRevokePrivileges struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRevokePrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RevokePrivilegesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("revoke_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RevokePrivilegesResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RevokePrivileges(args.Privileges); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revoke_privileges: "+err2.Error())
			oprot.WriteMessageBegin("revoke_privileges", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("revoke_privileges", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorSetUgi struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorSetUgi) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetUgiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("set_ugi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetUgiResult{}
	var err2 error
	if result.Success, err2 = p.handler.SetUgi(args.UserName, args.GroupNames); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_ugi: "+err2.Error())
			oprot.WriteMessageBegin("set_ugi", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("set_ugi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDelegationToken struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetDelegationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetDelegationTokenResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetDelegationToken(args.TokenOwner, args.RenewerKerberosPrincipalName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_delegation_token: "+err2.Error())
			oprot.WriteMessageBegin("get_delegation_token", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("get_delegation_token", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorRenewDelegationToken struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRenewDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RenewDelegationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("renew_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RenewDelegationTokenResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.RenewDelegationToken(args.TokenStrForm); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing renew_delegation_token: "+err2.Error())
			oprot.WriteMessageBegin("renew_delegation_token", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("renew_delegation_token", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCancelDelegationToken struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCancelDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CancelDelegationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancel_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CancelDelegationTokenResult{}
	var err2 error
	if err2 = p.handler.CancelDelegationToken(args.TokenStrForm); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancel_delegation_token: "+err2.Error())
			oprot.WriteMessageBegin("cancel_delegation_token", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("cancel_delegation_token", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetOpenTxns struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetOpenTxns) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetOpenTxnsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_open_txns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetOpenTxnsResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetOpenTxns(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_open_txns: "+err2.Error())
		oprot.WriteMessageBegin("get_open_txns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("get_open_txns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetOpenTxnsInfo struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetOpenTxnsInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetOpenTxnsInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_open_txns_info", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetOpenTxnsInfoResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetOpenTxnsInfo(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_open_txns_info: "+err2.Error())
		oprot.WriteMessageBegin("get_open_txns_info", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("get_open_txns_info", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorOpenTxns struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorOpenTxns) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OpenTxnsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("open_txns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OpenTxnsResult{}
	var err2 error
	if result.Success, err2 = p.handler.OpenTxns(args.Rqst); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing open_txns: "+err2.Error())
		oprot.WriteMessageBegin("open_txns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("open_txns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAbortTxn struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAbortTxn) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AbortTxnArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("abort_txn", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AbortTxnResult{}
	var err2 error
	if err2 = p.handler.AbortTxn(args.Rqst); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchTxnException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing abort_txn: "+err2.Error())
			oprot.WriteMessageBegin("abort_txn", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("abort_txn", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCommitTxn struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCommitTxn) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommitTxnArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("commit_txn", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CommitTxnResult{}
	var err2 error
	if err2 = p.handler.CommitTxn(args.Rqst); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchTxnException:
			result.O1 = v
		case *TxnAbortedException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing commit_txn: "+err2.Error())
			oprot.WriteMessageBegin("commit_txn", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("commit_txn", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorLock struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorLock) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LockArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("lock", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LockResult{}
	var err2 error
	if result.Success, err2 = p.handler.Lock(args.Rqst); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchTxnException:
			result.O1 = v
		case *TxnAbortedException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lock: "+err2.Error())
			oprot.WriteMessageBegin("lock", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("lock", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCheckLock struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCheckLock) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CheckLockArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("check_lock", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CheckLockResult{}
	var err2 error
	if result.Success, err2 = p.handler.CheckLock(args.Rqst); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchTxnException:
			result.O1 = v
		case *TxnAbortedException:
			result.O2 = v
		case *NoSuchLockException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing check_lock: "+err2.Error())
			oprot.WriteMessageBegin("check_lock", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("check_lock", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorUnlock struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorUnlock) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UnlockArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unlock", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UnlockResult{}
	var err2 error
	if err2 = p.handler.Unlock(args.Rqst); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchLockException:
			result.O1 = v
		case *TxnOpenException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unlock: "+err2.Error())
			oprot.WriteMessageBegin("unlock", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("unlock", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorShowLocks struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorShowLocks) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ShowLocksArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("show_locks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ShowLocksResult{}
	var err2 error
	if result.Success, err2 = p.handler.ShowLocks(args.Rqst); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing show_locks: "+err2.Error())
		oprot.WriteMessageBegin("show_locks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("show_locks", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorHeartbeat struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorHeartbeat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HeartbeatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("heartbeat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HeartbeatResult{}
	var err2 error
	if err2 = p.handler.Heartbeat(args.Ids); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchLockException:
			result.O1 = v
		case *NoSuchTxnException:
			result.O2 = v
		case *TxnAbortedException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heartbeat: "+err2.Error())
			oprot.WriteMessageBegin("heartbeat", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("heartbeat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorHeartbeatTxnRange struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorHeartbeatTxnRange) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HeartbeatTxnRangeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("heartbeat_txn_range", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HeartbeatTxnRangeResult{}
	var err2 error
	if result.Success, err2 = p.handler.HeartbeatTxnRange(args.Txns); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heartbeat_txn_range: "+err2.Error())
		oprot.WriteMessageBegin("heartbeat_txn_range", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("heartbeat_txn_range", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCompact struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCompact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CompactArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("compact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CompactResult{}
	var err2 error
	if err2 = p.handler.Compact(args.Rqst); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing compact: "+err2.Error())
		oprot.WriteMessageBegin("compact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("compact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorShowCompact struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorShowCompact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ShowCompactArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("show_compact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ShowCompactResult{}
	var err2 error
	if result.Success, err2 = p.handler.ShowCompact(args.Rqst); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing show_compact: "+err2.Error())
		oprot.WriteMessageBegin("show_compact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("show_compact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type CreateDatabaseArgs struct {
	Database *Database `thrift:"database,1" json:"database"`
}

func NewCreateDatabaseArgs() *CreateDatabaseArgs {
	return &CreateDatabaseArgs{}
}

var CreateDatabaseArgs_Database_DEFAULT *Database

func (p *CreateDatabaseArgs) GetDatabase() *Database {
	if !p.IsSetDatabase() {
		return CreateDatabaseArgs_Database_DEFAULT
	}
	return p.Database
}
func (p *CreateDatabaseArgs) IsSetDatabase() bool {
	return p.Database != nil
}

func (p *CreateDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateDatabaseArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Database = &Database{}
	if err := p.Database.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Database, err)
	}
	return nil
}

func (p *CreateDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_database_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("database", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:database: %s", p, err)
	}
	if err := p.Database.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Database, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:database: %s", p, err)
	}
	return err
}

func (p *CreateDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDatabaseArgs(%+v)", *p)
}

type CreateDatabaseResult struct {
	O1 *AlreadyExistsException `thrift:"o1,1" json:"o1"`
	O2 *InvalidObjectException `thrift:"o2,2" json:"o2"`
	O3 *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewCreateDatabaseResult() *CreateDatabaseResult {
	return &CreateDatabaseResult{}
}

var CreateDatabaseResult_O1_DEFAULT *AlreadyExistsException

func (p *CreateDatabaseResult) GetO1() *AlreadyExistsException {
	if !p.IsSetO1() {
		return CreateDatabaseResult_O1_DEFAULT
	}
	return p.O1
}

var CreateDatabaseResult_O2_DEFAULT *InvalidObjectException

func (p *CreateDatabaseResult) GetO2() *InvalidObjectException {
	if !p.IsSetO2() {
		return CreateDatabaseResult_O2_DEFAULT
	}
	return p.O2
}

var CreateDatabaseResult_O3_DEFAULT *MetaException

func (p *CreateDatabaseResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return CreateDatabaseResult_O3_DEFAULT
	}
	return p.O3
}
func (p *CreateDatabaseResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *CreateDatabaseResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *CreateDatabaseResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *CreateDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateDatabaseResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &AlreadyExistsException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *CreateDatabaseResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *CreateDatabaseResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *CreateDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_database_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CreateDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *CreateDatabaseResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *CreateDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDatabaseResult(%+v)", *p)
}

type GetDatabaseArgs struct {
	Name string `thrift:"name,1" json:"name"`
}

func NewGetDatabaseArgs() *GetDatabaseArgs {
	return &GetDatabaseArgs{}
}

func (p *GetDatabaseArgs) GetName() string {
	return p.Name
}
func (p *GetDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDatabaseArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_database_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *GetDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatabaseArgs(%+v)", *p)
}

type GetDatabaseResult struct {
	Success *Database              `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewGetDatabaseResult() *GetDatabaseResult {
	return &GetDatabaseResult{}
}

var GetDatabaseResult_Success_DEFAULT *Database

func (p *GetDatabaseResult) GetSuccess() *Database {
	if !p.IsSetSuccess() {
		return GetDatabaseResult_Success_DEFAULT
	}
	return p.Success
}

var GetDatabaseResult_O1_DEFAULT *NoSuchObjectException

func (p *GetDatabaseResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return GetDatabaseResult_O1_DEFAULT
	}
	return p.O1
}

var GetDatabaseResult_O2_DEFAULT *MetaException

func (p *GetDatabaseResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetDatabaseResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetDatabaseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetDatabaseResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetDatabaseResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDatabaseResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Database{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetDatabaseResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetDatabaseResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_database_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDatabaseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatabaseResult(%+v)", *p)
}

type DropDatabaseArgs struct {
	Name       string `thrift:"name,1" json:"name"`
	DeleteData bool   `thrift:"deleteData,2" json:"deleteData"`
	Cascade    bool   `thrift:"cascade,3" json:"cascade"`
}

func NewDropDatabaseArgs() *DropDatabaseArgs {
	return &DropDatabaseArgs{}
}

func (p *DropDatabaseArgs) GetName() string {
	return p.Name
}

func (p *DropDatabaseArgs) GetDeleteData() bool {
	return p.DeleteData
}

func (p *DropDatabaseArgs) GetCascade() bool {
	return p.Cascade
}
func (p *DropDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropDatabaseArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *DropDatabaseArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropDatabaseArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Cascade = v
	}
	return nil
}

func (p *DropDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_database_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *DropDatabaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:deleteData: %s", p, err)
	}
	return err
}

func (p *DropDatabaseArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cascade", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:cascade: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Cascade)); err != nil {
		return fmt.Errorf("%T.cascade (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:cascade: %s", p, err)
	}
	return err
}

func (p *DropDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropDatabaseArgs(%+v)", *p)
}

type DropDatabaseResult struct {
	O1 *NoSuchObjectException     `thrift:"o1,1" json:"o1"`
	O2 *InvalidOperationException `thrift:"o2,2" json:"o2"`
	O3 *MetaException             `thrift:"o3,3" json:"o3"`
}

func NewDropDatabaseResult() *DropDatabaseResult {
	return &DropDatabaseResult{}
}

var DropDatabaseResult_O1_DEFAULT *NoSuchObjectException

func (p *DropDatabaseResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropDatabaseResult_O1_DEFAULT
	}
	return p.O1
}

var DropDatabaseResult_O2_DEFAULT *InvalidOperationException

func (p *DropDatabaseResult) GetO2() *InvalidOperationException {
	if !p.IsSetO2() {
		return DropDatabaseResult_O2_DEFAULT
	}
	return p.O2
}

var DropDatabaseResult_O3_DEFAULT *MetaException

func (p *DropDatabaseResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return DropDatabaseResult_O3_DEFAULT
	}
	return p.O3
}
func (p *DropDatabaseResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropDatabaseResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DropDatabaseResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *DropDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropDatabaseResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropDatabaseResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidOperationException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DropDatabaseResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *DropDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_database_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropDatabaseResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *DropDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropDatabaseResult(%+v)", *p)
}

type GetDatabasesArgs struct {
	Pattern string `thrift:"pattern,1" json:"pattern"`
}

func NewGetDatabasesArgs() *GetDatabasesArgs {
	return &GetDatabasesArgs{}
}

func (p *GetDatabasesArgs) GetPattern() string {
	return p.Pattern
}
func (p *GetDatabasesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDatabasesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Pattern = v
	}
	return nil
}

func (p *GetDatabasesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_databases_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDatabasesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pattern", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:pattern: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Pattern)); err != nil {
		return fmt.Errorf("%T.pattern (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:pattern: %s", p, err)
	}
	return err
}

func (p *GetDatabasesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatabasesArgs(%+v)", *p)
}

type GetDatabasesResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetDatabasesResult() *GetDatabasesResult {
	return &GetDatabasesResult{}
}

var GetDatabasesResult_Success_DEFAULT []string

func (p *GetDatabasesResult) GetSuccess() []string {
	return p.Success
}

var GetDatabasesResult_O1_DEFAULT *MetaException

func (p *GetDatabasesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetDatabasesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetDatabasesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetDatabasesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetDatabasesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDatabasesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem274 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem274 = v
		}
		p.Success = append(p.Success, _elem274)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetDatabasesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetDatabasesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_databases_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDatabasesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabasesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabasesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatabasesResult(%+v)", *p)
}

type GetAllDatabasesArgs struct {
}

func NewGetAllDatabasesArgs() *GetAllDatabasesArgs {
	return &GetAllDatabasesArgs{}
}

func (p *GetAllDatabasesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllDatabasesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_databases_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllDatabasesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllDatabasesArgs(%+v)", *p)
}

type GetAllDatabasesResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetAllDatabasesResult() *GetAllDatabasesResult {
	return &GetAllDatabasesResult{}
}

var GetAllDatabasesResult_Success_DEFAULT []string

func (p *GetAllDatabasesResult) GetSuccess() []string {
	return p.Success
}

var GetAllDatabasesResult_O1_DEFAULT *MetaException

func (p *GetAllDatabasesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetAllDatabasesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetAllDatabasesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAllDatabasesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetAllDatabasesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllDatabasesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem275 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem275 = v
		}
		p.Success = append(p.Success, _elem275)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetAllDatabasesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetAllDatabasesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_databases_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllDatabasesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetAllDatabasesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetAllDatabasesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllDatabasesResult(%+v)", *p)
}

type AlterDatabaseArgs struct {
	Dbname string    `thrift:"dbname,1" json:"dbname"`
	Db     *Database `thrift:"db,2" json:"db"`
}

func NewAlterDatabaseArgs() *AlterDatabaseArgs {
	return &AlterDatabaseArgs{}
}

func (p *AlterDatabaseArgs) GetDbname() string {
	return p.Dbname
}

var AlterDatabaseArgs_Db_DEFAULT *Database

func (p *AlterDatabaseArgs) GetDb() *Database {
	if !p.IsSetDb() {
		return AlterDatabaseArgs_Db_DEFAULT
	}
	return p.Db
}
func (p *AlterDatabaseArgs) IsSetDb() bool {
	return p.Db != nil
}

func (p *AlterDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterDatabaseArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *AlterDatabaseArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Db = &Database{}
	if err := p.Db.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Db, err)
	}
	return nil
}

func (p *AlterDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_database_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *AlterDatabaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:db: %s", p, err)
	}
	if err := p.Db.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Db, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:db: %s", p, err)
	}
	return err
}

func (p *AlterDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterDatabaseArgs(%+v)", *p)
}

type AlterDatabaseResult struct {
	O1 *MetaException         `thrift:"o1,1" json:"o1"`
	O2 *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewAlterDatabaseResult() *AlterDatabaseResult {
	return &AlterDatabaseResult{}
}

var AlterDatabaseResult_O1_DEFAULT *MetaException

func (p *AlterDatabaseResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return AlterDatabaseResult_O1_DEFAULT
	}
	return p.O1
}

var AlterDatabaseResult_O2_DEFAULT *NoSuchObjectException

func (p *AlterDatabaseResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return AlterDatabaseResult_O2_DEFAULT
	}
	return p.O2
}
func (p *AlterDatabaseResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AlterDatabaseResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AlterDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterDatabaseResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AlterDatabaseResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AlterDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_database_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterDatabaseResult(%+v)", *p)
}

type GetTypeArgs struct {
	Name string `thrift:"name,1" json:"name"`
}

func NewGetTypeArgs() *GetTypeArgs {
	return &GetTypeArgs{}
}

func (p *GetTypeArgs) GetName() string {
	return p.Name
}
func (p *GetTypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTypeArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetTypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *GetTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTypeArgs(%+v)", *p)
}

type GetTypeResult struct {
	Success *Type                  `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetTypeResult() *GetTypeResult {
	return &GetTypeResult{}
}

var GetTypeResult_Success_DEFAULT *Type

func (p *GetTypeResult) GetSuccess() *Type {
	if !p.IsSetSuccess() {
		return GetTypeResult_Success_DEFAULT
	}
	return p.Success
}

var GetTypeResult_O1_DEFAULT *MetaException

func (p *GetTypeResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetTypeResult_O1_DEFAULT
	}
	return p.O1
}

var GetTypeResult_O2_DEFAULT *NoSuchObjectException

func (p *GetTypeResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetTypeResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetTypeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTypeResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetTypeResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetTypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTypeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Type{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetTypeResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetTypeResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetTypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTypeResult(%+v)", *p)
}

type CreateTypeArgs struct {
	TypeA1 *Type `thrift:"type,1" json:"type"`
}

func NewCreateTypeArgs() *CreateTypeArgs {
	return &CreateTypeArgs{}
}

var CreateTypeArgs_TypeA1_DEFAULT *Type

func (p *CreateTypeArgs) GetTypeA1() *Type {
	if !p.IsSetTypeA1() {
		return CreateTypeArgs_TypeA1_DEFAULT
	}
	return p.TypeA1
}
func (p *CreateTypeArgs) IsSetTypeA1() bool {
	return p.TypeA1 != nil
}

func (p *CreateTypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTypeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.TypeA1 = &Type{}
	if err := p.TypeA1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TypeA1, err)
	}
	return nil
}

func (p *CreateTypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_type_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := p.TypeA1.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TypeA1, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *CreateTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTypeArgs(%+v)", *p)
}

type CreateTypeResult struct {
	Success *bool                   `thrift:"success,0" json:"success"`
	O1      *AlreadyExistsException `thrift:"o1,1" json:"o1"`
	O2      *InvalidObjectException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewCreateTypeResult() *CreateTypeResult {
	return &CreateTypeResult{}
}

var CreateTypeResult_Success_DEFAULT bool

func (p *CreateTypeResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return CreateTypeResult_Success_DEFAULT
	}
	return *p.Success
}

var CreateTypeResult_O1_DEFAULT *AlreadyExistsException

func (p *CreateTypeResult) GetO1() *AlreadyExistsException {
	if !p.IsSetO1() {
		return CreateTypeResult_O1_DEFAULT
	}
	return p.O1
}

var CreateTypeResult_O2_DEFAULT *InvalidObjectException

func (p *CreateTypeResult) GetO2() *InvalidObjectException {
	if !p.IsSetO2() {
		return CreateTypeResult_O2_DEFAULT
	}
	return p.O2
}

var CreateTypeResult_O3_DEFAULT *MetaException

func (p *CreateTypeResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return CreateTypeResult_O3_DEFAULT
	}
	return p.O3
}
func (p *CreateTypeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateTypeResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *CreateTypeResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *CreateTypeResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *CreateTypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTypeResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *CreateTypeResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &AlreadyExistsException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *CreateTypeResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *CreateTypeResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *CreateTypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_type_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CreateTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *CreateTypeResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *CreateTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTypeResult(%+v)", *p)
}

type DropTypeArgs struct {
	TypeA1 string `thrift:"type,1" json:"type"`
}

func NewDropTypeArgs() *DropTypeArgs {
	return &DropTypeArgs{}
}

func (p *DropTypeArgs) GetTypeA1() string {
	return p.TypeA1
}
func (p *DropTypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTypeArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *DropTypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_type_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *DropTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTypeArgs(%+v)", *p)
}

type DropTypeResult struct {
	Success *bool                  `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewDropTypeResult() *DropTypeResult {
	return &DropTypeResult{}
}

var DropTypeResult_Success_DEFAULT bool

func (p *DropTypeResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DropTypeResult_Success_DEFAULT
	}
	return *p.Success
}

var DropTypeResult_O1_DEFAULT *MetaException

func (p *DropTypeResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return DropTypeResult_O1_DEFAULT
	}
	return p.O1
}

var DropTypeResult_O2_DEFAULT *NoSuchObjectException

func (p *DropTypeResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return DropTypeResult_O2_DEFAULT
	}
	return p.O2
}
func (p *DropTypeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DropTypeResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropTypeResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DropTypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTypeResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DropTypeResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropTypeResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DropTypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_type_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DropTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTypeResult(%+v)", *p)
}

type GetTypeAllArgs struct {
	Name string `thrift:"name,1" json:"name"`
}

func NewGetTypeAllArgs() *GetTypeAllArgs {
	return &GetTypeAllArgs{}
}

func (p *GetTypeAllArgs) GetName() string {
	return p.Name
}
func (p *GetTypeAllArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTypeAllArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetTypeAllArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_all_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTypeAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *GetTypeAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTypeAllArgs(%+v)", *p)
}

type GetTypeAllResult struct {
	Success map[string]*Type `thrift:"success,0" json:"success"`
	O2      *MetaException   `thrift:"o2,1" json:"o2"`
}

func NewGetTypeAllResult() *GetTypeAllResult {
	return &GetTypeAllResult{}
}

var GetTypeAllResult_Success_DEFAULT map[string]*Type

func (p *GetTypeAllResult) GetSuccess() map[string]*Type {
	return p.Success
}

var GetTypeAllResult_O2_DEFAULT *MetaException

func (p *GetTypeAllResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetTypeAllResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetTypeAllResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTypeAllResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetTypeAllResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTypeAllResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*Type, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key276 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key276 = v
		}
		_val277 := &Type{}
		if err := _val277.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val277, err)
		}
		p.Success[_key276] = _val277
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *GetTypeAllResult) ReadField1(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetTypeAllResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_all_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTypeAllResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeAllResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTypeAllResult(%+v)", *p)
}

type GetFieldsArgs struct {
	DbName    string `thrift:"db_name,1" json:"db_name"`
	TableName string `thrift:"table_name,2" json:"table_name"`
}

func NewGetFieldsArgs() *GetFieldsArgs {
	return &GetFieldsArgs{}
}

func (p *GetFieldsArgs) GetDbName() string {
	return p.DbName
}

func (p *GetFieldsArgs) GetTableName() string {
	return p.TableName
}
func (p *GetFieldsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFieldsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetFieldsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *GetFieldsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_fields_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFieldsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetFieldsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:table_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.table_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:table_name: %s", p, err)
	}
	return err
}

func (p *GetFieldsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFieldsArgs(%+v)", *p)
}

type GetFieldsResult struct {
	Success []*FieldSchema         `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *UnknownTableException `thrift:"o2,2" json:"o2"`
	O3      *UnknownDBException    `thrift:"o3,3" json:"o3"`
}

func NewGetFieldsResult() *GetFieldsResult {
	return &GetFieldsResult{}
}

var GetFieldsResult_Success_DEFAULT []*FieldSchema

func (p *GetFieldsResult) GetSuccess() []*FieldSchema {
	return p.Success
}

var GetFieldsResult_O1_DEFAULT *MetaException

func (p *GetFieldsResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetFieldsResult_O1_DEFAULT
	}
	return p.O1
}

var GetFieldsResult_O2_DEFAULT *UnknownTableException

func (p *GetFieldsResult) GetO2() *UnknownTableException {
	if !p.IsSetO2() {
		return GetFieldsResult_O2_DEFAULT
	}
	return p.O2
}

var GetFieldsResult_O3_DEFAULT *UnknownDBException

func (p *GetFieldsResult) GetO3() *UnknownDBException {
	if !p.IsSetO3() {
		return GetFieldsResult_O3_DEFAULT
	}
	return p.O3
}
func (p *GetFieldsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFieldsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetFieldsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetFieldsResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *GetFieldsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFieldsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FieldSchema, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem278 := &FieldSchema{}
		if err := _elem278.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem278, err)
		}
		p.Success = append(p.Success, _elem278)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetFieldsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetFieldsResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &UnknownTableException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetFieldsResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &UnknownDBException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *GetFieldsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_fields_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFieldsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetFieldsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetFieldsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetFieldsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *GetFieldsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFieldsResult(%+v)", *p)
}

type GetSchemaArgs struct {
	DbName    string `thrift:"db_name,1" json:"db_name"`
	TableName string `thrift:"table_name,2" json:"table_name"`
}

func NewGetSchemaArgs() *GetSchemaArgs {
	return &GetSchemaArgs{}
}

func (p *GetSchemaArgs) GetDbName() string {
	return p.DbName
}

func (p *GetSchemaArgs) GetTableName() string {
	return p.TableName
}
func (p *GetSchemaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSchemaArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetSchemaArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *GetSchemaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_schema_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSchemaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetSchemaArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:table_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.table_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:table_name: %s", p, err)
	}
	return err
}

func (p *GetSchemaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSchemaArgs(%+v)", *p)
}

type GetSchemaResult struct {
	Success []*FieldSchema         `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *UnknownTableException `thrift:"o2,2" json:"o2"`
	O3      *UnknownDBException    `thrift:"o3,3" json:"o3"`
}

func NewGetSchemaResult() *GetSchemaResult {
	return &GetSchemaResult{}
}

var GetSchemaResult_Success_DEFAULT []*FieldSchema

func (p *GetSchemaResult) GetSuccess() []*FieldSchema {
	return p.Success
}

var GetSchemaResult_O1_DEFAULT *MetaException

func (p *GetSchemaResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetSchemaResult_O1_DEFAULT
	}
	return p.O1
}

var GetSchemaResult_O2_DEFAULT *UnknownTableException

func (p *GetSchemaResult) GetO2() *UnknownTableException {
	if !p.IsSetO2() {
		return GetSchemaResult_O2_DEFAULT
	}
	return p.O2
}

var GetSchemaResult_O3_DEFAULT *UnknownDBException

func (p *GetSchemaResult) GetO3() *UnknownDBException {
	if !p.IsSetO3() {
		return GetSchemaResult_O3_DEFAULT
	}
	return p.O3
}
func (p *GetSchemaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSchemaResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetSchemaResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetSchemaResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *GetSchemaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSchemaResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FieldSchema, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem279 := &FieldSchema{}
		if err := _elem279.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem279, err)
		}
		p.Success = append(p.Success, _elem279)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetSchemaResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetSchemaResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &UnknownTableException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetSchemaResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &UnknownDBException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *GetSchemaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_schema_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSchemaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetSchemaResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetSchemaResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *GetSchemaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSchemaResult(%+v)", *p)
}

type CreateTableArgs struct {
	Tbl *Table `thrift:"tbl,1" json:"tbl"`
}

func NewCreateTableArgs() *CreateTableArgs {
	return &CreateTableArgs{}
}

var CreateTableArgs_Tbl_DEFAULT *Table

func (p *CreateTableArgs) GetTbl() *Table {
	if !p.IsSetTbl() {
		return CreateTableArgs_Tbl_DEFAULT
	}
	return p.Tbl
}
func (p *CreateTableArgs) IsSetTbl() bool {
	return p.Tbl != nil
}

func (p *CreateTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTableArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Tbl = &Table{}
	if err := p.Tbl.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Tbl, err)
	}
	return nil
}

func (p *CreateTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_table_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tbl: %s", p, err)
	}
	if err := p.Tbl.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Tbl, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tbl: %s", p, err)
	}
	return err
}

func (p *CreateTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTableArgs(%+v)", *p)
}

type CreateTableResult struct {
	O1 *AlreadyExistsException `thrift:"o1,1" json:"o1"`
	O2 *InvalidObjectException `thrift:"o2,2" json:"o2"`
	O3 *MetaException          `thrift:"o3,3" json:"o3"`
	O4 *NoSuchObjectException  `thrift:"o4,4" json:"o4"`
}

func NewCreateTableResult() *CreateTableResult {
	return &CreateTableResult{}
}

var CreateTableResult_O1_DEFAULT *AlreadyExistsException

func (p *CreateTableResult) GetO1() *AlreadyExistsException {
	if !p.IsSetO1() {
		return CreateTableResult_O1_DEFAULT
	}
	return p.O1
}

var CreateTableResult_O2_DEFAULT *InvalidObjectException

func (p *CreateTableResult) GetO2() *InvalidObjectException {
	if !p.IsSetO2() {
		return CreateTableResult_O2_DEFAULT
	}
	return p.O2
}

var CreateTableResult_O3_DEFAULT *MetaException

func (p *CreateTableResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return CreateTableResult_O3_DEFAULT
	}
	return p.O3
}

var CreateTableResult_O4_DEFAULT *NoSuchObjectException

func (p *CreateTableResult) GetO4() *NoSuchObjectException {
	if !p.IsSetO4() {
		return CreateTableResult_O4_DEFAULT
	}
	return p.O4
}
func (p *CreateTableResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *CreateTableResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *CreateTableResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *CreateTableResult) IsSetO4() bool {
	return p.O4 != nil
}

func (p *CreateTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &AlreadyExistsException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *CreateTableResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *CreateTableResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *CreateTableResult) ReadField4(iprot thrift.TProtocol) error {
	p.O4 = &NoSuchObjectException{}
	if err := p.O4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O4, err)
	}
	return nil
}

func (p *CreateTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_table_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetO4() {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:o4: %s", p, err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:o4: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTableResult(%+v)", *p)
}

type CreateTableWithEnvironmentContextArgs struct {
	Tbl                *Table              `thrift:"tbl,1" json:"tbl"`
	EnvironmentContext *EnvironmentContext `thrift:"environment_context,2" json:"environment_context"`
}

func NewCreateTableWithEnvironmentContextArgs() *CreateTableWithEnvironmentContextArgs {
	return &CreateTableWithEnvironmentContextArgs{}
}

var CreateTableWithEnvironmentContextArgs_Tbl_DEFAULT *Table

func (p *CreateTableWithEnvironmentContextArgs) GetTbl() *Table {
	if !p.IsSetTbl() {
		return CreateTableWithEnvironmentContextArgs_Tbl_DEFAULT
	}
	return p.Tbl
}

var CreateTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext

func (p *CreateTableWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
	if !p.IsSetEnvironmentContext() {
		return CreateTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
	}
	return p.EnvironmentContext
}
func (p *CreateTableWithEnvironmentContextArgs) IsSetTbl() bool {
	return p.Tbl != nil
}

func (p *CreateTableWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
	return p.EnvironmentContext != nil
}

func (p *CreateTableWithEnvironmentContextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTableWithEnvironmentContextArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Tbl = &Table{}
	if err := p.Tbl.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Tbl, err)
	}
	return nil
}

func (p *CreateTableWithEnvironmentContextArgs) ReadField2(iprot thrift.TProtocol) error {
	p.EnvironmentContext = &EnvironmentContext{}
	if err := p.EnvironmentContext.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EnvironmentContext, err)
	}
	return nil
}

func (p *CreateTableWithEnvironmentContextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_table_with_environment_context_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTableWithEnvironmentContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tbl: %s", p, err)
	}
	if err := p.Tbl.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Tbl, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tbl: %s", p, err)
	}
	return err
}

func (p *CreateTableWithEnvironmentContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("environment_context", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:environment_context: %s", p, err)
	}
	if err := p.EnvironmentContext.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.EnvironmentContext, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:environment_context: %s", p, err)
	}
	return err
}

func (p *CreateTableWithEnvironmentContextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTableWithEnvironmentContextArgs(%+v)", *p)
}

type CreateTableWithEnvironmentContextResult struct {
	O1 *AlreadyExistsException `thrift:"o1,1" json:"o1"`
	O2 *InvalidObjectException `thrift:"o2,2" json:"o2"`
	O3 *MetaException          `thrift:"o3,3" json:"o3"`
	O4 *NoSuchObjectException  `thrift:"o4,4" json:"o4"`
}

func NewCreateTableWithEnvironmentContextResult() *CreateTableWithEnvironmentContextResult {
	return &CreateTableWithEnvironmentContextResult{}
}

var CreateTableWithEnvironmentContextResult_O1_DEFAULT *AlreadyExistsException

func (p *CreateTableWithEnvironmentContextResult) GetO1() *AlreadyExistsException {
	if !p.IsSetO1() {
		return CreateTableWithEnvironmentContextResult_O1_DEFAULT
	}
	return p.O1
}

var CreateTableWithEnvironmentContextResult_O2_DEFAULT *InvalidObjectException

func (p *CreateTableWithEnvironmentContextResult) GetO2() *InvalidObjectException {
	if !p.IsSetO2() {
		return CreateTableWithEnvironmentContextResult_O2_DEFAULT
	}
	return p.O2
}

var CreateTableWithEnvironmentContextResult_O3_DEFAULT *MetaException

func (p *CreateTableWithEnvironmentContextResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return CreateTableWithEnvironmentContextResult_O3_DEFAULT
	}
	return p.O3
}

var CreateTableWithEnvironmentContextResult_O4_DEFAULT *NoSuchObjectException

func (p *CreateTableWithEnvironmentContextResult) GetO4() *NoSuchObjectException {
	if !p.IsSetO4() {
		return CreateTableWithEnvironmentContextResult_O4_DEFAULT
	}
	return p.O4
}
func (p *CreateTableWithEnvironmentContextResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *CreateTableWithEnvironmentContextResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *CreateTableWithEnvironmentContextResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *CreateTableWithEnvironmentContextResult) IsSetO4() bool {
	return p.O4 != nil
}

func (p *CreateTableWithEnvironmentContextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTableWithEnvironmentContextResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &AlreadyExistsException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *CreateTableWithEnvironmentContextResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *CreateTableWithEnvironmentContextResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *CreateTableWithEnvironmentContextResult) ReadField4(iprot thrift.TProtocol) error {
	p.O4 = &NoSuchObjectException{}
	if err := p.O4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O4, err)
	}
	return nil
}

func (p *CreateTableWithEnvironmentContextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_table_with_environment_context_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTableWithEnvironmentContextResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableWithEnvironmentContextResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableWithEnvironmentContextResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableWithEnvironmentContextResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetO4() {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:o4: %s", p, err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:o4: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableWithEnvironmentContextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTableWithEnvironmentContextResult(%+v)", *p)
}

type DropTableArgs struct {
	Dbname     string `thrift:"dbname,1" json:"dbname"`
	Name       string `thrift:"name,2" json:"name"`
	DeleteData bool   `thrift:"deleteData,3" json:"deleteData"`
}

func NewDropTableArgs() *DropTableArgs {
	return &DropTableArgs{}
}

func (p *DropTableArgs) GetDbname() string {
	return p.Dbname
}

func (p *DropTableArgs) GetName() string {
	return p.Name
}

func (p *DropTableArgs) GetDeleteData() bool {
	return p.DeleteData
}
func (p *DropTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *DropTableArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *DropTableArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_table_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *DropTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:name: %s", p, err)
	}
	return err
}

func (p *DropTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:deleteData: %s", p, err)
	}
	return err
}

func (p *DropTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTableArgs(%+v)", *p)
}

type DropTableResult struct {
	O1 *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O3 *MetaException         `thrift:"o3,2" json:"o3"`
}

func NewDropTableResult() *DropTableResult {
	return &DropTableResult{}
}

var DropTableResult_O1_DEFAULT *NoSuchObjectException

func (p *DropTableResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropTableResult_O1_DEFAULT
	}
	return p.O1
}

var DropTableResult_O3_DEFAULT *MetaException

func (p *DropTableResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return DropTableResult_O3_DEFAULT
	}
	return p.O3
}
func (p *DropTableResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropTableResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *DropTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropTableResult) ReadField2(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *DropTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_table_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o3: %s", p, err)
		}
	}
	return err
}

func (p *DropTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTableResult(%+v)", *p)
}

type DropTableWithEnvironmentContextArgs struct {
	Dbname             string              `thrift:"dbname,1" json:"dbname"`
	Name               string              `thrift:"name,2" json:"name"`
	DeleteData         bool                `thrift:"deleteData,3" json:"deleteData"`
	EnvironmentContext *EnvironmentContext `thrift:"environment_context,4" json:"environment_context"`
}

func NewDropTableWithEnvironmentContextArgs() *DropTableWithEnvironmentContextArgs {
	return &DropTableWithEnvironmentContextArgs{}
}

func (p *DropTableWithEnvironmentContextArgs) GetDbname() string {
	return p.Dbname
}

func (p *DropTableWithEnvironmentContextArgs) GetName() string {
	return p.Name
}

func (p *DropTableWithEnvironmentContextArgs) GetDeleteData() bool {
	return p.DeleteData
}

var DropTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext

func (p *DropTableWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
	if !p.IsSetEnvironmentContext() {
		return DropTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
	}
	return p.EnvironmentContext
}
func (p *DropTableWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
	return p.EnvironmentContext != nil
}

func (p *DropTableWithEnvironmentContextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTableWithEnvironmentContextArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *DropTableWithEnvironmentContextArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *DropTableWithEnvironmentContextArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropTableWithEnvironmentContextArgs) ReadField4(iprot thrift.TProtocol) error {
	p.EnvironmentContext = &EnvironmentContext{}
	if err := p.EnvironmentContext.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EnvironmentContext, err)
	}
	return nil
}

func (p *DropTableWithEnvironmentContextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_table_with_environment_context_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTableWithEnvironmentContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *DropTableWithEnvironmentContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:name: %s", p, err)
	}
	return err
}

func (p *DropTableWithEnvironmentContextArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:deleteData: %s", p, err)
	}
	return err
}

func (p *DropTableWithEnvironmentContextArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("environment_context", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:environment_context: %s", p, err)
	}
	if err := p.EnvironmentContext.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.EnvironmentContext, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:environment_context: %s", p, err)
	}
	return err
}

func (p *DropTableWithEnvironmentContextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTableWithEnvironmentContextArgs(%+v)", *p)
}

type DropTableWithEnvironmentContextResult struct {
	O1 *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O3 *MetaException         `thrift:"o3,2" json:"o3"`
}

func NewDropTableWithEnvironmentContextResult() *DropTableWithEnvironmentContextResult {
	return &DropTableWithEnvironmentContextResult{}
}

var DropTableWithEnvironmentContextResult_O1_DEFAULT *NoSuchObjectException

func (p *DropTableWithEnvironmentContextResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropTableWithEnvironmentContextResult_O1_DEFAULT
	}
	return p.O1
}

var DropTableWithEnvironmentContextResult_O3_DEFAULT *MetaException

func (p *DropTableWithEnvironmentContextResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return DropTableWithEnvironmentContextResult_O3_DEFAULT
	}
	return p.O3
}
func (p *DropTableWithEnvironmentContextResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropTableWithEnvironmentContextResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *DropTableWithEnvironmentContextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTableWithEnvironmentContextResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropTableWithEnvironmentContextResult) ReadField2(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *DropTableWithEnvironmentContextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_table_with_environment_context_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTableWithEnvironmentContextResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropTableWithEnvironmentContextResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o3: %s", p, err)
		}
	}
	return err
}

func (p *DropTableWithEnvironmentContextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTableWithEnvironmentContextResult(%+v)", *p)
}

type GetTablesArgs struct {
	DbName  string `thrift:"db_name,1" json:"db_name"`
	Pattern string `thrift:"pattern,2" json:"pattern"`
}

func NewGetTablesArgs() *GetTablesArgs {
	return &GetTablesArgs{}
}

func (p *GetTablesArgs) GetDbName() string {
	return p.DbName
}

func (p *GetTablesArgs) GetPattern() string {
	return p.Pattern
}
func (p *GetTablesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTablesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetTablesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Pattern = v
	}
	return nil
}

func (p *GetTablesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_tables_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetTablesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pattern", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:pattern: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Pattern)); err != nil {
		return fmt.Errorf("%T.pattern (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:pattern: %s", p, err)
	}
	return err
}

func (p *GetTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTablesArgs(%+v)", *p)
}

type GetTablesResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetTablesResult() *GetTablesResult {
	return &GetTablesResult{}
}

var GetTablesResult_Success_DEFAULT []string

func (p *GetTablesResult) GetSuccess() []string {
	return p.Success
}

var GetTablesResult_O1_DEFAULT *MetaException

func (p *GetTablesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetTablesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetTablesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTablesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetTablesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTablesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem280 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem280 = v
		}
		p.Success = append(p.Success, _elem280)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetTablesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetTablesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_tables_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTablesResult(%+v)", *p)
}

type GetAllTablesArgs struct {
	DbName string `thrift:"db_name,1" json:"db_name"`
}

func NewGetAllTablesArgs() *GetAllTablesArgs {
	return &GetAllTablesArgs{}
}

func (p *GetAllTablesArgs) GetDbName() string {
	return p.DbName
}
func (p *GetAllTablesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllTablesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetAllTablesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_tables_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetAllTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllTablesArgs(%+v)", *p)
}

type GetAllTablesResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetAllTablesResult() *GetAllTablesResult {
	return &GetAllTablesResult{}
}

var GetAllTablesResult_Success_DEFAULT []string

func (p *GetAllTablesResult) GetSuccess() []string {
	return p.Success
}

var GetAllTablesResult_O1_DEFAULT *MetaException

func (p *GetAllTablesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetAllTablesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetAllTablesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAllTablesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetAllTablesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllTablesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem281 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem281 = v
		}
		p.Success = append(p.Success, _elem281)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetAllTablesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetAllTablesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_tables_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetAllTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetAllTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllTablesResult(%+v)", *p)
}

type GetTableArgs struct {
	Dbname  string `thrift:"dbname,1" json:"dbname"`
	TblName string `thrift:"tbl_name,2" json:"tbl_name"`
}

func NewGetTableArgs() *GetTableArgs {
	return &GetTableArgs{}
}

func (p *GetTableArgs) GetDbname() string {
	return p.Dbname
}

func (p *GetTableArgs) GetTblName() string {
	return p.TblName
}
func (p *GetTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *GetTableArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *GetTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableArgs(%+v)", *p)
}

type GetTableResult struct {
	Success *Table                 `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetTableResult() *GetTableResult {
	return &GetTableResult{}
}

var GetTableResult_Success_DEFAULT *Table

func (p *GetTableResult) GetSuccess() *Table {
	if !p.IsSetSuccess() {
		return GetTableResult_Success_DEFAULT
	}
	return p.Success
}

var GetTableResult_O1_DEFAULT *MetaException

func (p *GetTableResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetTableResult_O1_DEFAULT
	}
	return p.O1
}

var GetTableResult_O2_DEFAULT *NoSuchObjectException

func (p *GetTableResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetTableResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetTableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTableResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetTableResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Table{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetTableResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableResult(%+v)", *p)
}

type GetTableObjectsByNameArgs struct {
	Dbname   string   `thrift:"dbname,1" json:"dbname"`
	TblNames []string `thrift:"tbl_names,2" json:"tbl_names"`
}

func NewGetTableObjectsByNameArgs() *GetTableObjectsByNameArgs {
	return &GetTableObjectsByNameArgs{}
}

func (p *GetTableObjectsByNameArgs) GetDbname() string {
	return p.Dbname
}

func (p *GetTableObjectsByNameArgs) GetTblNames() []string {
	return p.TblNames
}
func (p *GetTableObjectsByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableObjectsByNameArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *GetTableObjectsByNameArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.TblNames = tSlice
	for i := 0; i < size; i++ {
		var _elem282 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem282 = v
		}
		p.TblNames = append(p.TblNames, _elem282)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetTableObjectsByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_objects_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableObjectsByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *GetTableObjectsByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_names", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_names: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.TblNames)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.TblNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_names: %s", p, err)
	}
	return err
}

func (p *GetTableObjectsByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableObjectsByNameArgs(%+v)", *p)
}

type GetTableObjectsByNameResult struct {
	Success []*Table                   `thrift:"success,0" json:"success"`
	O1      *MetaException             `thrift:"o1,1" json:"o1"`
	O2      *InvalidOperationException `thrift:"o2,2" json:"o2"`
	O3      *UnknownDBException        `thrift:"o3,3" json:"o3"`
}

func NewGetTableObjectsByNameResult() *GetTableObjectsByNameResult {
	return &GetTableObjectsByNameResult{}
}

var GetTableObjectsByNameResult_Success_DEFAULT []*Table

func (p *GetTableObjectsByNameResult) GetSuccess() []*Table {
	return p.Success
}

var GetTableObjectsByNameResult_O1_DEFAULT *MetaException

func (p *GetTableObjectsByNameResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetTableObjectsByNameResult_O1_DEFAULT
	}
	return p.O1
}

var GetTableObjectsByNameResult_O2_DEFAULT *InvalidOperationException

func (p *GetTableObjectsByNameResult) GetO2() *InvalidOperationException {
	if !p.IsSetO2() {
		return GetTableObjectsByNameResult_O2_DEFAULT
	}
	return p.O2
}

var GetTableObjectsByNameResult_O3_DEFAULT *UnknownDBException

func (p *GetTableObjectsByNameResult) GetO3() *UnknownDBException {
	if !p.IsSetO3() {
		return GetTableObjectsByNameResult_O3_DEFAULT
	}
	return p.O3
}
func (p *GetTableObjectsByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTableObjectsByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetTableObjectsByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetTableObjectsByNameResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *GetTableObjectsByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableObjectsByNameResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Table, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem283 := &Table{}
		if err := _elem283.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem283, err)
		}
		p.Success = append(p.Success, _elem283)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetTableObjectsByNameResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetTableObjectsByNameResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidOperationException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetTableObjectsByNameResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &UnknownDBException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *GetTableObjectsByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_objects_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableObjectsByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTableObjectsByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetTableObjectsByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetTableObjectsByNameResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *GetTableObjectsByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableObjectsByNameResult(%+v)", *p)
}

type GetTableNamesByFilterArgs struct {
	Dbname    string `thrift:"dbname,1" json:"dbname"`
	Filter    string `thrift:"filter,2" json:"filter"`
	MaxTables int16  `thrift:"max_tables,3" json:"max_tables"`
}

func NewGetTableNamesByFilterArgs() *GetTableNamesByFilterArgs {
	return &GetTableNamesByFilterArgs{
		MaxTables: -1,
	}
}

func (p *GetTableNamesByFilterArgs) GetDbname() string {
	return p.Dbname
}

func (p *GetTableNamesByFilterArgs) GetFilter() string {
	return p.Filter
}

func (p *GetTableNamesByFilterArgs) GetMaxTables() int16 {
	return p.MaxTables
}
func (p *GetTableNamesByFilterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableNamesByFilterArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *GetTableNamesByFilterArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Filter = v
	}
	return nil
}

func (p *GetTableNamesByFilterArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxTables = v
	}
	return nil
}

func (p *GetTableNamesByFilterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_names_by_filter_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableNamesByFilterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *GetTableNamesByFilterArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filter", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:filter: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Filter)); err != nil {
		return fmt.Errorf("%T.filter (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:filter: %s", p, err)
	}
	return err
}

func (p *GetTableNamesByFilterArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_tables", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_tables: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxTables)); err != nil {
		return fmt.Errorf("%T.max_tables (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_tables: %s", p, err)
	}
	return err
}

func (p *GetTableNamesByFilterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableNamesByFilterArgs(%+v)", *p)
}

type GetTableNamesByFilterResult struct {
	Success []string                   `thrift:"success,0" json:"success"`
	O1      *MetaException             `thrift:"o1,1" json:"o1"`
	O2      *InvalidOperationException `thrift:"o2,2" json:"o2"`
	O3      *UnknownDBException        `thrift:"o3,3" json:"o3"`
}

func NewGetTableNamesByFilterResult() *GetTableNamesByFilterResult {
	return &GetTableNamesByFilterResult{}
}

var GetTableNamesByFilterResult_Success_DEFAULT []string

func (p *GetTableNamesByFilterResult) GetSuccess() []string {
	return p.Success
}

var GetTableNamesByFilterResult_O1_DEFAULT *MetaException

func (p *GetTableNamesByFilterResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetTableNamesByFilterResult_O1_DEFAULT
	}
	return p.O1
}

var GetTableNamesByFilterResult_O2_DEFAULT *InvalidOperationException

func (p *GetTableNamesByFilterResult) GetO2() *InvalidOperationException {
	if !p.IsSetO2() {
		return GetTableNamesByFilterResult_O2_DEFAULT
	}
	return p.O2
}

var GetTableNamesByFilterResult_O3_DEFAULT *UnknownDBException

func (p *GetTableNamesByFilterResult) GetO3() *UnknownDBException {
	if !p.IsSetO3() {
		return GetTableNamesByFilterResult_O3_DEFAULT
	}
	return p.O3
}
func (p *GetTableNamesByFilterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTableNamesByFilterResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetTableNamesByFilterResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetTableNamesByFilterResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *GetTableNamesByFilterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableNamesByFilterResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem284 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem284 = v
		}
		p.Success = append(p.Success, _elem284)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetTableNamesByFilterResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetTableNamesByFilterResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidOperationException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetTableNamesByFilterResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &UnknownDBException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *GetTableNamesByFilterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_names_by_filter_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableNamesByFilterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTableNamesByFilterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetTableNamesByFilterResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetTableNamesByFilterResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *GetTableNamesByFilterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableNamesByFilterResult(%+v)", *p)
}

type AlterTableArgs struct {
	Dbname  string `thrift:"dbname,1" json:"dbname"`
	TblName string `thrift:"tbl_name,2" json:"tbl_name"`
	NewTbl_ *Table `thrift:"new_tbl,3" json:"new_tbl"`
}

func NewAlterTableArgs() *AlterTableArgs {
	return &AlterTableArgs{}
}

func (p *AlterTableArgs) GetDbname() string {
	return p.Dbname
}

func (p *AlterTableArgs) GetTblName() string {
	return p.TblName
}

var AlterTableArgs_NewTbl__DEFAULT *Table

func (p *AlterTableArgs) GetNewTbl_() *Table {
	if !p.IsSetNewTbl_() {
		return AlterTableArgs_NewTbl__DEFAULT
	}
	return p.NewTbl_
}
func (p *AlterTableArgs) IsSetNewTbl_() bool {
	return p.NewTbl_ != nil
}

func (p *AlterTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *AlterTableArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AlterTableArgs) ReadField3(iprot thrift.TProtocol) error {
	p.NewTbl_ = &Table{}
	if err := p.NewTbl_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewTbl_, err)
	}
	return nil
}

func (p *AlterTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_table_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *AlterTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AlterTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_tbl", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:new_tbl: %s", p, err)
	}
	if err := p.NewTbl_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewTbl_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:new_tbl: %s", p, err)
	}
	return err
}

func (p *AlterTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterTableArgs(%+v)", *p)
}

type AlterTableResult struct {
	O1 *InvalidOperationException `thrift:"o1,1" json:"o1"`
	O2 *MetaException             `thrift:"o2,2" json:"o2"`
}

func NewAlterTableResult() *AlterTableResult {
	return &AlterTableResult{}
}

var AlterTableResult_O1_DEFAULT *InvalidOperationException

func (p *AlterTableResult) GetO1() *InvalidOperationException {
	if !p.IsSetO1() {
		return AlterTableResult_O1_DEFAULT
	}
	return p.O1
}

var AlterTableResult_O2_DEFAULT *MetaException

func (p *AlterTableResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return AlterTableResult_O2_DEFAULT
	}
	return p.O2
}
func (p *AlterTableResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AlterTableResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AlterTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidOperationException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AlterTableResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AlterTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_table_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterTableResult(%+v)", *p)
}

type AlterTableWithEnvironmentContextArgs struct {
	Dbname             string              `thrift:"dbname,1" json:"dbname"`
	TblName            string              `thrift:"tbl_name,2" json:"tbl_name"`
	NewTbl_            *Table              `thrift:"new_tbl,3" json:"new_tbl"`
	EnvironmentContext *EnvironmentContext `thrift:"environment_context,4" json:"environment_context"`
}

func NewAlterTableWithEnvironmentContextArgs() *AlterTableWithEnvironmentContextArgs {
	return &AlterTableWithEnvironmentContextArgs{}
}

func (p *AlterTableWithEnvironmentContextArgs) GetDbname() string {
	return p.Dbname
}

func (p *AlterTableWithEnvironmentContextArgs) GetTblName() string {
	return p.TblName
}

var AlterTableWithEnvironmentContextArgs_NewTbl__DEFAULT *Table

func (p *AlterTableWithEnvironmentContextArgs) GetNewTbl_() *Table {
	if !p.IsSetNewTbl_() {
		return AlterTableWithEnvironmentContextArgs_NewTbl__DEFAULT
	}
	return p.NewTbl_
}

var AlterTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext

func (p *AlterTableWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
	if !p.IsSetEnvironmentContext() {
		return AlterTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
	}
	return p.EnvironmentContext
}
func (p *AlterTableWithEnvironmentContextArgs) IsSetNewTbl_() bool {
	return p.NewTbl_ != nil
}

func (p *AlterTableWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
	return p.EnvironmentContext != nil
}

func (p *AlterTableWithEnvironmentContextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterTableWithEnvironmentContextArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *AlterTableWithEnvironmentContextArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AlterTableWithEnvironmentContextArgs) ReadField3(iprot thrift.TProtocol) error {
	p.NewTbl_ = &Table{}
	if err := p.NewTbl_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewTbl_, err)
	}
	return nil
}

func (p *AlterTableWithEnvironmentContextArgs) ReadField4(iprot thrift.TProtocol) error {
	p.EnvironmentContext = &EnvironmentContext{}
	if err := p.EnvironmentContext.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EnvironmentContext, err)
	}
	return nil
}

func (p *AlterTableWithEnvironmentContextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_table_with_environment_context_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterTableWithEnvironmentContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *AlterTableWithEnvironmentContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AlterTableWithEnvironmentContextArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_tbl", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:new_tbl: %s", p, err)
	}
	if err := p.NewTbl_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewTbl_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:new_tbl: %s", p, err)
	}
	return err
}

func (p *AlterTableWithEnvironmentContextArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("environment_context", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:environment_context: %s", p, err)
	}
	if err := p.EnvironmentContext.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.EnvironmentContext, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:environment_context: %s", p, err)
	}
	return err
}

func (p *AlterTableWithEnvironmentContextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterTableWithEnvironmentContextArgs(%+v)", *p)
}

type AlterTableWithEnvironmentContextResult struct {
	O1 *InvalidOperationException `thrift:"o1,1" json:"o1"`
	O2 *MetaException             `thrift:"o2,2" json:"o2"`
}

func NewAlterTableWithEnvironmentContextResult() *AlterTableWithEnvironmentContextResult {
	return &AlterTableWithEnvironmentContextResult{}
}

var AlterTableWithEnvironmentContextResult_O1_DEFAULT *InvalidOperationException

func (p *AlterTableWithEnvironmentContextResult) GetO1() *InvalidOperationException {
	if !p.IsSetO1() {
		return AlterTableWithEnvironmentContextResult_O1_DEFAULT
	}
	return p.O1
}

var AlterTableWithEnvironmentContextResult_O2_DEFAULT *MetaException

func (p *AlterTableWithEnvironmentContextResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return AlterTableWithEnvironmentContextResult_O2_DEFAULT
	}
	return p.O2
}
func (p *AlterTableWithEnvironmentContextResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AlterTableWithEnvironmentContextResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AlterTableWithEnvironmentContextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterTableWithEnvironmentContextResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidOperationException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AlterTableWithEnvironmentContextResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AlterTableWithEnvironmentContextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_table_with_environment_context_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterTableWithEnvironmentContextResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterTableWithEnvironmentContextResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterTableWithEnvironmentContextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterTableWithEnvironmentContextResult(%+v)", *p)
}

type AddPartitionArgs struct {
	NewPart_ *Partition `thrift:"new_part,1" json:"new_part"`
}

func NewAddPartitionArgs() *AddPartitionArgs {
	return &AddPartitionArgs{}
}

var AddPartitionArgs_NewPart__DEFAULT *Partition

func (p *AddPartitionArgs) GetNewPart_() *Partition {
	if !p.IsSetNewPart_() {
		return AddPartitionArgs_NewPart__DEFAULT
	}
	return p.NewPart_
}
func (p *AddPartitionArgs) IsSetNewPart_() bool {
	return p.NewPart_ != nil
}

func (p *AddPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.NewPart_ = &Partition{}
	if err := p.NewPart_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewPart_, err)
	}
	return nil
}

func (p *AddPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:new_part: %s", p, err)
	}
	if err := p.NewPart_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewPart_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:new_part: %s", p, err)
	}
	return err
}

func (p *AddPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartitionArgs(%+v)", *p)
}

type AddPartitionResult struct {
	Success *Partition              `thrift:"success,0" json:"success"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewAddPartitionResult() *AddPartitionResult {
	return &AddPartitionResult{}
}

var AddPartitionResult_Success_DEFAULT *Partition

func (p *AddPartitionResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return AddPartitionResult_Success_DEFAULT
	}
	return p.Success
}

var AddPartitionResult_O1_DEFAULT *InvalidObjectException

func (p *AddPartitionResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return AddPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var AddPartitionResult_O2_DEFAULT *AlreadyExistsException

func (p *AddPartitionResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return AddPartitionResult_O2_DEFAULT
	}
	return p.O2
}

var AddPartitionResult_O3_DEFAULT *MetaException

func (p *AddPartitionResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return AddPartitionResult_O3_DEFAULT
	}
	return p.O3
}
func (p *AddPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AddPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AddPartitionResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *AddPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPartitionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *AddPartitionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AddPartitionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AddPartitionResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *AddPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartitionResult(%+v)", *p)
}

type AddPartitionWithEnvironmentContextArgs struct {
	NewPart_           *Partition          `thrift:"new_part,1" json:"new_part"`
	EnvironmentContext *EnvironmentContext `thrift:"environment_context,2" json:"environment_context"`
}

func NewAddPartitionWithEnvironmentContextArgs() *AddPartitionWithEnvironmentContextArgs {
	return &AddPartitionWithEnvironmentContextArgs{}
}

var AddPartitionWithEnvironmentContextArgs_NewPart__DEFAULT *Partition

func (p *AddPartitionWithEnvironmentContextArgs) GetNewPart_() *Partition {
	if !p.IsSetNewPart_() {
		return AddPartitionWithEnvironmentContextArgs_NewPart__DEFAULT
	}
	return p.NewPart_
}

var AddPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext

func (p *AddPartitionWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
	if !p.IsSetEnvironmentContext() {
		return AddPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
	}
	return p.EnvironmentContext
}
func (p *AddPartitionWithEnvironmentContextArgs) IsSetNewPart_() bool {
	return p.NewPart_ != nil
}

func (p *AddPartitionWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
	return p.EnvironmentContext != nil
}

func (p *AddPartitionWithEnvironmentContextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPartitionWithEnvironmentContextArgs) ReadField1(iprot thrift.TProtocol) error {
	p.NewPart_ = &Partition{}
	if err := p.NewPart_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewPart_, err)
	}
	return nil
}

func (p *AddPartitionWithEnvironmentContextArgs) ReadField2(iprot thrift.TProtocol) error {
	p.EnvironmentContext = &EnvironmentContext{}
	if err := p.EnvironmentContext.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EnvironmentContext, err)
	}
	return nil
}

func (p *AddPartitionWithEnvironmentContextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_partition_with_environment_context_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPartitionWithEnvironmentContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:new_part: %s", p, err)
	}
	if err := p.NewPart_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewPart_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:new_part: %s", p, err)
	}
	return err
}

func (p *AddPartitionWithEnvironmentContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("environment_context", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:environment_context: %s", p, err)
	}
	if err := p.EnvironmentContext.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.EnvironmentContext, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:environment_context: %s", p, err)
	}
	return err
}

func (p *AddPartitionWithEnvironmentContextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartitionWithEnvironmentContextArgs(%+v)", *p)
}

type AddPartitionWithEnvironmentContextResult struct {
	Success *Partition              `thrift:"success,0" json:"success"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewAddPartitionWithEnvironmentContextResult() *AddPartitionWithEnvironmentContextResult {
	return &AddPartitionWithEnvironmentContextResult{}
}

var AddPartitionWithEnvironmentContextResult_Success_DEFAULT *Partition

func (p *AddPartitionWithEnvironmentContextResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return AddPartitionWithEnvironmentContextResult_Success_DEFAULT
	}
	return p.Success
}

var AddPartitionWithEnvironmentContextResult_O1_DEFAULT *InvalidObjectException

func (p *AddPartitionWithEnvironmentContextResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return AddPartitionWithEnvironmentContextResult_O1_DEFAULT
	}
	return p.O1
}

var AddPartitionWithEnvironmentContextResult_O2_DEFAULT *AlreadyExistsException

func (p *AddPartitionWithEnvironmentContextResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return AddPartitionWithEnvironmentContextResult_O2_DEFAULT
	}
	return p.O2
}

var AddPartitionWithEnvironmentContextResult_O3_DEFAULT *MetaException

func (p *AddPartitionWithEnvironmentContextResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return AddPartitionWithEnvironmentContextResult_O3_DEFAULT
	}
	return p.O3
}
func (p *AddPartitionWithEnvironmentContextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddPartitionWithEnvironmentContextResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AddPartitionWithEnvironmentContextResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AddPartitionWithEnvironmentContextResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *AddPartitionWithEnvironmentContextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPartitionWithEnvironmentContextResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *AddPartitionWithEnvironmentContextResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AddPartitionWithEnvironmentContextResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AddPartitionWithEnvironmentContextResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *AddPartitionWithEnvironmentContextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_partition_with_environment_context_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPartitionWithEnvironmentContextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionWithEnvironmentContextResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionWithEnvironmentContextResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionWithEnvironmentContextResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionWithEnvironmentContextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartitionWithEnvironmentContextResult(%+v)", *p)
}

type AddPartitionsArgs struct {
	NewParts_ []*Partition `thrift:"new_parts,1" json:"new_parts"`
}

func NewAddPartitionsArgs() *AddPartitionsArgs {
	return &AddPartitionsArgs{}
}

func (p *AddPartitionsArgs) GetNewParts_() []*Partition {
	return p.NewParts_
}
func (p *AddPartitionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPartitionsArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.NewParts_ = tSlice
	for i := 0; i < size; i++ {
		_elem285 := &Partition{}
		if err := _elem285.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem285, err)
		}
		p.NewParts_ = append(p.NewParts_, _elem285)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *AddPartitionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_partitions_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPartitionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_parts", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:new_parts: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NewParts_)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.NewParts_ {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:new_parts: %s", p, err)
	}
	return err
}

func (p *AddPartitionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartitionsArgs(%+v)", *p)
}

type AddPartitionsResult struct {
	Success *int32                  `thrift:"success,0" json:"success"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewAddPartitionsResult() *AddPartitionsResult {
	return &AddPartitionsResult{}
}

var AddPartitionsResult_Success_DEFAULT int32

func (p *AddPartitionsResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return AddPartitionsResult_Success_DEFAULT
	}
	return *p.Success
}

var AddPartitionsResult_O1_DEFAULT *InvalidObjectException

func (p *AddPartitionsResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return AddPartitionsResult_O1_DEFAULT
	}
	return p.O1
}

var AddPartitionsResult_O2_DEFAULT *AlreadyExistsException

func (p *AddPartitionsResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return AddPartitionsResult_O2_DEFAULT
	}
	return p.O2
}

var AddPartitionsResult_O3_DEFAULT *MetaException

func (p *AddPartitionsResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return AddPartitionsResult_O3_DEFAULT
	}
	return p.O3
}
func (p *AddPartitionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddPartitionsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AddPartitionsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AddPartitionsResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *AddPartitionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPartitionsResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AddPartitionsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AddPartitionsResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AddPartitionsResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *AddPartitionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_partitions_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPartitionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartitionsResult(%+v)", *p)
}

type AppendPartitionArgs struct {
	DbName   string   `thrift:"db_name,1" json:"db_name"`
	TblName  string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals []string `thrift:"part_vals,3" json:"part_vals"`
}

func NewAppendPartitionArgs() *AppendPartitionArgs {
	return &AppendPartitionArgs{}
}

func (p *AppendPartitionArgs) GetDbName() string {
	return p.DbName
}

func (p *AppendPartitionArgs) GetTblName() string {
	return p.TblName
}

func (p *AppendPartitionArgs) GetPartVals() []string {
	return p.PartVals
}
func (p *AppendPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AppendPartitionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AppendPartitionArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem286 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem286 = v
		}
		p.PartVals = append(p.PartVals, _elem286)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *AppendPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *AppendPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionArgs(%+v)", *p)
}

type AppendPartitionResult struct {
	Success *Partition              `thrift:"success,0" json:"success"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewAppendPartitionResult() *AppendPartitionResult {
	return &AppendPartitionResult{}
}

var AppendPartitionResult_Success_DEFAULT *Partition

func (p *AppendPartitionResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return AppendPartitionResult_Success_DEFAULT
	}
	return p.Success
}

var AppendPartitionResult_O1_DEFAULT *InvalidObjectException

func (p *AppendPartitionResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return AppendPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var AppendPartitionResult_O2_DEFAULT *AlreadyExistsException

func (p *AppendPartitionResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return AppendPartitionResult_O2_DEFAULT
	}
	return p.O2
}

var AppendPartitionResult_O3_DEFAULT *MetaException

func (p *AppendPartitionResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return AppendPartitionResult_O3_DEFAULT
	}
	return p.O3
}
func (p *AppendPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppendPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AppendPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AppendPartitionResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *AppendPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *AppendPartitionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AppendPartitionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AppendPartitionResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *AppendPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionResult(%+v)", *p)
}

type AddPartitionsReqArgs struct {
	Request *AddPartitionsRequest `thrift:"request,1" json:"request"`
}

func NewAddPartitionsReqArgs() *AddPartitionsReqArgs {
	return &AddPartitionsReqArgs{}
}

var AddPartitionsReqArgs_Request_DEFAULT *AddPartitionsRequest

func (p *AddPartitionsReqArgs) GetRequest() *AddPartitionsRequest {
	if !p.IsSetRequest() {
		return AddPartitionsReqArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *AddPartitionsReqArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *AddPartitionsReqArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPartitionsReqArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &AddPartitionsRequest{
		NeedResult_: true,
	}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *AddPartitionsReqArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_partitions_req_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPartitionsReqArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *AddPartitionsReqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartitionsReqArgs(%+v)", *p)
}

type AddPartitionsReqResult struct {
	Success *AddPartitionsResult_   `thrift:"success,0" json:"success"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewAddPartitionsReqResult() *AddPartitionsReqResult {
	return &AddPartitionsReqResult{}
}

var AddPartitionsReqResult_Success_DEFAULT *AddPartitionsResult_

func (p *AddPartitionsReqResult) GetSuccess() *AddPartitionsResult_ {
	if !p.IsSetSuccess() {
		return AddPartitionsReqResult_Success_DEFAULT
	}
	return p.Success
}

var AddPartitionsReqResult_O1_DEFAULT *InvalidObjectException

func (p *AddPartitionsReqResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return AddPartitionsReqResult_O1_DEFAULT
	}
	return p.O1
}

var AddPartitionsReqResult_O2_DEFAULT *AlreadyExistsException

func (p *AddPartitionsReqResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return AddPartitionsReqResult_O2_DEFAULT
	}
	return p.O2
}

var AddPartitionsReqResult_O3_DEFAULT *MetaException

func (p *AddPartitionsReqResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return AddPartitionsReqResult_O3_DEFAULT
	}
	return p.O3
}
func (p *AddPartitionsReqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddPartitionsReqResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AddPartitionsReqResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AddPartitionsReqResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *AddPartitionsReqResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPartitionsReqResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &AddPartitionsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *AddPartitionsReqResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AddPartitionsReqResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AddPartitionsReqResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *AddPartitionsReqResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_partitions_req_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPartitionsReqResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionsReqResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionsReqResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionsReqResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionsReqResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartitionsReqResult(%+v)", *p)
}

type AppendPartitionWithEnvironmentContextArgs struct {
	DbName             string              `thrift:"db_name,1" json:"db_name"`
	TblName            string              `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals           []string            `thrift:"part_vals,3" json:"part_vals"`
	EnvironmentContext *EnvironmentContext `thrift:"environment_context,4" json:"environment_context"`
}

func NewAppendPartitionWithEnvironmentContextArgs() *AppendPartitionWithEnvironmentContextArgs {
	return &AppendPartitionWithEnvironmentContextArgs{}
}

func (p *AppendPartitionWithEnvironmentContextArgs) GetDbName() string {
	return p.DbName
}

func (p *AppendPartitionWithEnvironmentContextArgs) GetTblName() string {
	return p.TblName
}

func (p *AppendPartitionWithEnvironmentContextArgs) GetPartVals() []string {
	return p.PartVals
}

var AppendPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext

func (p *AppendPartitionWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
	if !p.IsSetEnvironmentContext() {
		return AppendPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
	}
	return p.EnvironmentContext
}
func (p *AppendPartitionWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
	return p.EnvironmentContext != nil
}

func (p *AppendPartitionWithEnvironmentContextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionWithEnvironmentContextArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AppendPartitionWithEnvironmentContextArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AppendPartitionWithEnvironmentContextArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem287 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem287 = v
		}
		p.PartVals = append(p.PartVals, _elem287)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *AppendPartitionWithEnvironmentContextArgs) ReadField4(iprot thrift.TProtocol) error {
	p.EnvironmentContext = &EnvironmentContext{}
	if err := p.EnvironmentContext.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EnvironmentContext, err)
	}
	return nil
}

func (p *AppendPartitionWithEnvironmentContextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_with_environment_context_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionWithEnvironmentContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionWithEnvironmentContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionWithEnvironmentContextArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *AppendPartitionWithEnvironmentContextArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("environment_context", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:environment_context: %s", p, err)
	}
	if err := p.EnvironmentContext.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.EnvironmentContext, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:environment_context: %s", p, err)
	}
	return err
}

func (p *AppendPartitionWithEnvironmentContextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionWithEnvironmentContextArgs(%+v)", *p)
}

type AppendPartitionWithEnvironmentContextResult struct {
	Success *Partition              `thrift:"success,0" json:"success"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewAppendPartitionWithEnvironmentContextResult() *AppendPartitionWithEnvironmentContextResult {
	return &AppendPartitionWithEnvironmentContextResult{}
}

var AppendPartitionWithEnvironmentContextResult_Success_DEFAULT *Partition

func (p *AppendPartitionWithEnvironmentContextResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return AppendPartitionWithEnvironmentContextResult_Success_DEFAULT
	}
	return p.Success
}

var AppendPartitionWithEnvironmentContextResult_O1_DEFAULT *InvalidObjectException

func (p *AppendPartitionWithEnvironmentContextResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return AppendPartitionWithEnvironmentContextResult_O1_DEFAULT
	}
	return p.O1
}

var AppendPartitionWithEnvironmentContextResult_O2_DEFAULT *AlreadyExistsException

func (p *AppendPartitionWithEnvironmentContextResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return AppendPartitionWithEnvironmentContextResult_O2_DEFAULT
	}
	return p.O2
}

var AppendPartitionWithEnvironmentContextResult_O3_DEFAULT *MetaException

func (p *AppendPartitionWithEnvironmentContextResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return AppendPartitionWithEnvironmentContextResult_O3_DEFAULT
	}
	return p.O3
}
func (p *AppendPartitionWithEnvironmentContextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppendPartitionWithEnvironmentContextResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AppendPartitionWithEnvironmentContextResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AppendPartitionWithEnvironmentContextResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *AppendPartitionWithEnvironmentContextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionWithEnvironmentContextResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *AppendPartitionWithEnvironmentContextResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AppendPartitionWithEnvironmentContextResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AppendPartitionWithEnvironmentContextResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *AppendPartitionWithEnvironmentContextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_with_environment_context_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionWithEnvironmentContextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionWithEnvironmentContextResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionWithEnvironmentContextResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionWithEnvironmentContextResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionWithEnvironmentContextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionWithEnvironmentContextResult(%+v)", *p)
}

type AppendPartitionByNameArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	PartName string `thrift:"part_name,3" json:"part_name"`
}

func NewAppendPartitionByNameArgs() *AppendPartitionByNameArgs {
	return &AppendPartitionByNameArgs{}
}

func (p *AppendPartitionByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *AppendPartitionByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *AppendPartitionByNameArgs) GetPartName() string {
	return p.PartName
}
func (p *AppendPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionByNameArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AppendPartitionByNameArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AppendPartitionByNameArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *AppendPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionByNameArgs(%+v)", *p)
}

type AppendPartitionByNameResult struct {
	Success *Partition              `thrift:"success,0" json:"success"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewAppendPartitionByNameResult() *AppendPartitionByNameResult {
	return &AppendPartitionByNameResult{}
}

var AppendPartitionByNameResult_Success_DEFAULT *Partition

func (p *AppendPartitionByNameResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return AppendPartitionByNameResult_Success_DEFAULT
	}
	return p.Success
}

var AppendPartitionByNameResult_O1_DEFAULT *InvalidObjectException

func (p *AppendPartitionByNameResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return AppendPartitionByNameResult_O1_DEFAULT
	}
	return p.O1
}

var AppendPartitionByNameResult_O2_DEFAULT *AlreadyExistsException

func (p *AppendPartitionByNameResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return AppendPartitionByNameResult_O2_DEFAULT
	}
	return p.O2
}

var AppendPartitionByNameResult_O3_DEFAULT *MetaException

func (p *AppendPartitionByNameResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return AppendPartitionByNameResult_O3_DEFAULT
	}
	return p.O3
}
func (p *AppendPartitionByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppendPartitionByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AppendPartitionByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AppendPartitionByNameResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *AppendPartitionByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionByNameResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *AppendPartitionByNameResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AppendPartitionByNameResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AppendPartitionByNameResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *AppendPartitionByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionByNameResult(%+v)", *p)
}

type AppendPartitionByNameWithEnvironmentContextArgs struct {
	DbName             string              `thrift:"db_name,1" json:"db_name"`
	TblName            string              `thrift:"tbl_name,2" json:"tbl_name"`
	PartName           string              `thrift:"part_name,3" json:"part_name"`
	EnvironmentContext *EnvironmentContext `thrift:"environment_context,4" json:"environment_context"`
}

func NewAppendPartitionByNameWithEnvironmentContextArgs() *AppendPartitionByNameWithEnvironmentContextArgs {
	return &AppendPartitionByNameWithEnvironmentContextArgs{}
}

func (p *AppendPartitionByNameWithEnvironmentContextArgs) GetDbName() string {
	return p.DbName
}

func (p *AppendPartitionByNameWithEnvironmentContextArgs) GetTblName() string {
	return p.TblName
}

func (p *AppendPartitionByNameWithEnvironmentContextArgs) GetPartName() string {
	return p.PartName
}

var AppendPartitionByNameWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext

func (p *AppendPartitionByNameWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
	if !p.IsSetEnvironmentContext() {
		return AppendPartitionByNameWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
	}
	return p.EnvironmentContext
}
func (p *AppendPartitionByNameWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
	return p.EnvironmentContext != nil
}

func (p *AppendPartitionByNameWithEnvironmentContextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionByNameWithEnvironmentContextArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AppendPartitionByNameWithEnvironmentContextArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AppendPartitionByNameWithEnvironmentContextArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *AppendPartitionByNameWithEnvironmentContextArgs) ReadField4(iprot thrift.TProtocol) error {
	p.EnvironmentContext = &EnvironmentContext{}
	if err := p.EnvironmentContext.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EnvironmentContext, err)
	}
	return nil
}

func (p *AppendPartitionByNameWithEnvironmentContextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_by_name_with_environment_context_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionByNameWithEnvironmentContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionByNameWithEnvironmentContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionByNameWithEnvironmentContextArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionByNameWithEnvironmentContextArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("environment_context", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:environment_context: %s", p, err)
	}
	if err := p.EnvironmentContext.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.EnvironmentContext, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:environment_context: %s", p, err)
	}
	return err
}

func (p *AppendPartitionByNameWithEnvironmentContextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionByNameWithEnvironmentContextArgs(%+v)", *p)
}

type AppendPartitionByNameWithEnvironmentContextResult struct {
	Success *Partition              `thrift:"success,0" json:"success"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewAppendPartitionByNameWithEnvironmentContextResult() *AppendPartitionByNameWithEnvironmentContextResult {
	return &AppendPartitionByNameWithEnvironmentContextResult{}
}

var AppendPartitionByNameWithEnvironmentContextResult_Success_DEFAULT *Partition

func (p *AppendPartitionByNameWithEnvironmentContextResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return AppendPartitionByNameWithEnvironmentContextResult_Success_DEFAULT
	}
	return p.Success
}

var AppendPartitionByNameWithEnvironmentContextResult_O1_DEFAULT *InvalidObjectException

func (p *AppendPartitionByNameWithEnvironmentContextResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return AppendPartitionByNameWithEnvironmentContextResult_O1_DEFAULT
	}
	return p.O1
}

var AppendPartitionByNameWithEnvironmentContextResult_O2_DEFAULT *AlreadyExistsException

func (p *AppendPartitionByNameWithEnvironmentContextResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return AppendPartitionByNameWithEnvironmentContextResult_O2_DEFAULT
	}
	return p.O2
}

var AppendPartitionByNameWithEnvironmentContextResult_O3_DEFAULT *MetaException

func (p *AppendPartitionByNameWithEnvironmentContextResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return AppendPartitionByNameWithEnvironmentContextResult_O3_DEFAULT
	}
	return p.O3
}
func (p *AppendPartitionByNameWithEnvironmentContextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppendPartitionByNameWithEnvironmentContextResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AppendPartitionByNameWithEnvironmentContextResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AppendPartitionByNameWithEnvironmentContextResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *AppendPartitionByNameWithEnvironmentContextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionByNameWithEnvironmentContextResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *AppendPartitionByNameWithEnvironmentContextResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AppendPartitionByNameWithEnvironmentContextResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AppendPartitionByNameWithEnvironmentContextResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *AppendPartitionByNameWithEnvironmentContextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_by_name_with_environment_context_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionByNameWithEnvironmentContextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameWithEnvironmentContextResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameWithEnvironmentContextResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameWithEnvironmentContextResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameWithEnvironmentContextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionByNameWithEnvironmentContextResult(%+v)", *p)
}

type DropPartitionArgs struct {
	DbName     string   `thrift:"db_name,1" json:"db_name"`
	TblName    string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals   []string `thrift:"part_vals,3" json:"part_vals"`
	DeleteData bool     `thrift:"deleteData,4" json:"deleteData"`
}

func NewDropPartitionArgs() *DropPartitionArgs {
	return &DropPartitionArgs{}
}

func (p *DropPartitionArgs) GetDbName() string {
	return p.DbName
}

func (p *DropPartitionArgs) GetTblName() string {
	return p.TblName
}

func (p *DropPartitionArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *DropPartitionArgs) GetDeleteData() bool {
	return p.DeleteData
}
func (p *DropPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DropPartitionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *DropPartitionArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem288 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem288 = v
		}
		p.PartVals = append(p.PartVals, _elem288)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DropPartitionArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *DropPartitionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:deleteData: %s", p, err)
	}
	return err
}

func (p *DropPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionArgs(%+v)", *p)
}

type DropPartitionResult struct {
	Success *bool                  `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewDropPartitionResult() *DropPartitionResult {
	return &DropPartitionResult{}
}

var DropPartitionResult_Success_DEFAULT bool

func (p *DropPartitionResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DropPartitionResult_Success_DEFAULT
	}
	return *p.Success
}

var DropPartitionResult_O1_DEFAULT *NoSuchObjectException

func (p *DropPartitionResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var DropPartitionResult_O2_DEFAULT *MetaException

func (p *DropPartitionResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return DropPartitionResult_O2_DEFAULT
	}
	return p.O2
}
func (p *DropPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DropPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DropPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DropPartitionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropPartitionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DropPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionResult(%+v)", *p)
}

type DropPartitionWithEnvironmentContextArgs struct {
	DbName             string              `thrift:"db_name,1" json:"db_name"`
	TblName            string              `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals           []string            `thrift:"part_vals,3" json:"part_vals"`
	DeleteData         bool                `thrift:"deleteData,4" json:"deleteData"`
	EnvironmentContext *EnvironmentContext `thrift:"environment_context,5" json:"environment_context"`
}

func NewDropPartitionWithEnvironmentContextArgs() *DropPartitionWithEnvironmentContextArgs {
	return &DropPartitionWithEnvironmentContextArgs{}
}

func (p *DropPartitionWithEnvironmentContextArgs) GetDbName() string {
	return p.DbName
}

func (p *DropPartitionWithEnvironmentContextArgs) GetTblName() string {
	return p.TblName
}

func (p *DropPartitionWithEnvironmentContextArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *DropPartitionWithEnvironmentContextArgs) GetDeleteData() bool {
	return p.DeleteData
}

var DropPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext

func (p *DropPartitionWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
	if !p.IsSetEnvironmentContext() {
		return DropPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
	}
	return p.EnvironmentContext
}
func (p *DropPartitionWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
	return p.EnvironmentContext != nil
}

func (p *DropPartitionWithEnvironmentContextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionWithEnvironmentContextArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DropPartitionWithEnvironmentContextArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *DropPartitionWithEnvironmentContextArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem289 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem289 = v
		}
		p.PartVals = append(p.PartVals, _elem289)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DropPartitionWithEnvironmentContextArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropPartitionWithEnvironmentContextArgs) ReadField5(iprot thrift.TProtocol) error {
	p.EnvironmentContext = &EnvironmentContext{}
	if err := p.EnvironmentContext.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EnvironmentContext, err)
	}
	return nil
}

func (p *DropPartitionWithEnvironmentContextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_with_environment_context_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionWithEnvironmentContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionWithEnvironmentContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionWithEnvironmentContextArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *DropPartitionWithEnvironmentContextArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:deleteData: %s", p, err)
	}
	return err
}

func (p *DropPartitionWithEnvironmentContextArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("environment_context", thrift.STRUCT, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:environment_context: %s", p, err)
	}
	if err := p.EnvironmentContext.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.EnvironmentContext, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:environment_context: %s", p, err)
	}
	return err
}

func (p *DropPartitionWithEnvironmentContextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionWithEnvironmentContextArgs(%+v)", *p)
}

type DropPartitionWithEnvironmentContextResult struct {
	Success *bool                  `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewDropPartitionWithEnvironmentContextResult() *DropPartitionWithEnvironmentContextResult {
	return &DropPartitionWithEnvironmentContextResult{}
}

var DropPartitionWithEnvironmentContextResult_Success_DEFAULT bool

func (p *DropPartitionWithEnvironmentContextResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DropPartitionWithEnvironmentContextResult_Success_DEFAULT
	}
	return *p.Success
}

var DropPartitionWithEnvironmentContextResult_O1_DEFAULT *NoSuchObjectException

func (p *DropPartitionWithEnvironmentContextResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropPartitionWithEnvironmentContextResult_O1_DEFAULT
	}
	return p.O1
}

var DropPartitionWithEnvironmentContextResult_O2_DEFAULT *MetaException

func (p *DropPartitionWithEnvironmentContextResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return DropPartitionWithEnvironmentContextResult_O2_DEFAULT
	}
	return p.O2
}
func (p *DropPartitionWithEnvironmentContextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DropPartitionWithEnvironmentContextResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropPartitionWithEnvironmentContextResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DropPartitionWithEnvironmentContextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionWithEnvironmentContextResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DropPartitionWithEnvironmentContextResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropPartitionWithEnvironmentContextResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DropPartitionWithEnvironmentContextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_with_environment_context_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionWithEnvironmentContextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionWithEnvironmentContextResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionWithEnvironmentContextResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionWithEnvironmentContextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionWithEnvironmentContextResult(%+v)", *p)
}

type DropPartitionByNameArgs struct {
	DbName     string `thrift:"db_name,1" json:"db_name"`
	TblName    string `thrift:"tbl_name,2" json:"tbl_name"`
	PartName   string `thrift:"part_name,3" json:"part_name"`
	DeleteData bool   `thrift:"deleteData,4" json:"deleteData"`
}

func NewDropPartitionByNameArgs() *DropPartitionByNameArgs {
	return &DropPartitionByNameArgs{}
}

func (p *DropPartitionByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *DropPartitionByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *DropPartitionByNameArgs) GetPartName() string {
	return p.PartName
}

func (p *DropPartitionByNameArgs) GetDeleteData() bool {
	return p.DeleteData
}
func (p *DropPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionByNameArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DropPartitionByNameArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *DropPartitionByNameArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *DropPartitionByNameArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:deleteData: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionByNameArgs(%+v)", *p)
}

type DropPartitionByNameResult struct {
	Success *bool                  `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewDropPartitionByNameResult() *DropPartitionByNameResult {
	return &DropPartitionByNameResult{}
}

var DropPartitionByNameResult_Success_DEFAULT bool

func (p *DropPartitionByNameResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DropPartitionByNameResult_Success_DEFAULT
	}
	return *p.Success
}

var DropPartitionByNameResult_O1_DEFAULT *NoSuchObjectException

func (p *DropPartitionByNameResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropPartitionByNameResult_O1_DEFAULT
	}
	return p.O1
}

var DropPartitionByNameResult_O2_DEFAULT *MetaException

func (p *DropPartitionByNameResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return DropPartitionByNameResult_O2_DEFAULT
	}
	return p.O2
}
func (p *DropPartitionByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DropPartitionByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropPartitionByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DropPartitionByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionByNameResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DropPartitionByNameResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropPartitionByNameResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DropPartitionByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionByNameResult(%+v)", *p)
}

type DropPartitionByNameWithEnvironmentContextArgs struct {
	DbName             string              `thrift:"db_name,1" json:"db_name"`
	TblName            string              `thrift:"tbl_name,2" json:"tbl_name"`
	PartName           string              `thrift:"part_name,3" json:"part_name"`
	DeleteData         bool                `thrift:"deleteData,4" json:"deleteData"`
	EnvironmentContext *EnvironmentContext `thrift:"environment_context,5" json:"environment_context"`
}

func NewDropPartitionByNameWithEnvironmentContextArgs() *DropPartitionByNameWithEnvironmentContextArgs {
	return &DropPartitionByNameWithEnvironmentContextArgs{}
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) GetDbName() string {
	return p.DbName
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) GetTblName() string {
	return p.TblName
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) GetPartName() string {
	return p.PartName
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) GetDeleteData() bool {
	return p.DeleteData
}

var DropPartitionByNameWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext

func (p *DropPartitionByNameWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
	if !p.IsSetEnvironmentContext() {
		return DropPartitionByNameWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
	}
	return p.EnvironmentContext
}
func (p *DropPartitionByNameWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
	return p.EnvironmentContext != nil
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) ReadField5(iprot thrift.TProtocol) error {
	p.EnvironmentContext = &EnvironmentContext{}
	if err := p.EnvironmentContext.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EnvironmentContext, err)
	}
	return nil
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_by_name_with_environment_context_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:deleteData: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("environment_context", thrift.STRUCT, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:environment_context: %s", p, err)
	}
	if err := p.EnvironmentContext.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.EnvironmentContext, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:environment_context: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameWithEnvironmentContextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionByNameWithEnvironmentContextArgs(%+v)", *p)
}

type DropPartitionByNameWithEnvironmentContextResult struct {
	Success *bool                  `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewDropPartitionByNameWithEnvironmentContextResult() *DropPartitionByNameWithEnvironmentContextResult {
	return &DropPartitionByNameWithEnvironmentContextResult{}
}

var DropPartitionByNameWithEnvironmentContextResult_Success_DEFAULT bool

func (p *DropPartitionByNameWithEnvironmentContextResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DropPartitionByNameWithEnvironmentContextResult_Success_DEFAULT
	}
	return *p.Success
}

var DropPartitionByNameWithEnvironmentContextResult_O1_DEFAULT *NoSuchObjectException

func (p *DropPartitionByNameWithEnvironmentContextResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropPartitionByNameWithEnvironmentContextResult_O1_DEFAULT
	}
	return p.O1
}

var DropPartitionByNameWithEnvironmentContextResult_O2_DEFAULT *MetaException

func (p *DropPartitionByNameWithEnvironmentContextResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return DropPartitionByNameWithEnvironmentContextResult_O2_DEFAULT
	}
	return p.O2
}
func (p *DropPartitionByNameWithEnvironmentContextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DropPartitionByNameWithEnvironmentContextResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropPartitionByNameWithEnvironmentContextResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DropPartitionByNameWithEnvironmentContextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionByNameWithEnvironmentContextResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DropPartitionByNameWithEnvironmentContextResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropPartitionByNameWithEnvironmentContextResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DropPartitionByNameWithEnvironmentContextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_by_name_with_environment_context_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionByNameWithEnvironmentContextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionByNameWithEnvironmentContextResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionByNameWithEnvironmentContextResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionByNameWithEnvironmentContextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionByNameWithEnvironmentContextResult(%+v)", *p)
}

type DropPartitionsReqArgs struct {
	Req *DropPartitionsRequest `thrift:"req,1" json:"req"`
}

func NewDropPartitionsReqArgs() *DropPartitionsReqArgs {
	return &DropPartitionsReqArgs{}
}

var DropPartitionsReqArgs_Req_DEFAULT *DropPartitionsRequest

func (p *DropPartitionsReqArgs) GetReq() *DropPartitionsRequest {
	if !p.IsSetReq() {
		return DropPartitionsReqArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DropPartitionsReqArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DropPartitionsReqArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionsReqArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &DropPartitionsRequest{
		IfExists: true,

		NeedResult_: true,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *DropPartitionsReqArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partitions_req_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionsReqArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *DropPartitionsReqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionsReqArgs(%+v)", *p)
}

type DropPartitionsReqResult struct {
	Success *DropPartitionsResult_ `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewDropPartitionsReqResult() *DropPartitionsReqResult {
	return &DropPartitionsReqResult{}
}

var DropPartitionsReqResult_Success_DEFAULT *DropPartitionsResult_

func (p *DropPartitionsReqResult) GetSuccess() *DropPartitionsResult_ {
	if !p.IsSetSuccess() {
		return DropPartitionsReqResult_Success_DEFAULT
	}
	return p.Success
}

var DropPartitionsReqResult_O1_DEFAULT *NoSuchObjectException

func (p *DropPartitionsReqResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropPartitionsReqResult_O1_DEFAULT
	}
	return p.O1
}

var DropPartitionsReqResult_O2_DEFAULT *MetaException

func (p *DropPartitionsReqResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return DropPartitionsReqResult_O2_DEFAULT
	}
	return p.O2
}
func (p *DropPartitionsReqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DropPartitionsReqResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropPartitionsReqResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DropPartitionsReqResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionsReqResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DropPartitionsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *DropPartitionsReqResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropPartitionsReqResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DropPartitionsReqResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partitions_req_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionsReqResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionsReqResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionsReqResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionsReqResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionsReqResult(%+v)", *p)
}

type GetPartitionArgs struct {
	DbName   string   `thrift:"db_name,1" json:"db_name"`
	TblName  string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals []string `thrift:"part_vals,3" json:"part_vals"`
}

func NewGetPartitionArgs() *GetPartitionArgs {
	return &GetPartitionArgs{}
}

func (p *GetPartitionArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionArgs) GetPartVals() []string {
	return p.PartVals
}
func (p *GetPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem290 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem290 = v
		}
		p.PartVals = append(p.PartVals, _elem290)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *GetPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionArgs(%+v)", *p)
}

type GetPartitionResult struct {
	Success *Partition             `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionResult() *GetPartitionResult {
	return &GetPartitionResult{}
}

var GetPartitionResult_Success_DEFAULT *Partition

func (p *GetPartitionResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return GetPartitionResult_Success_DEFAULT
	}
	return p.Success
}

var GetPartitionResult_O1_DEFAULT *MetaException

func (p *GetPartitionResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionResult_O2_DEFAULT *NoSuchObjectException

func (p *GetPartitionResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetPartitionResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPartitionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionResult(%+v)", *p)
}

type ExchangePartitionArgs struct {
	PartitionSpecs  map[string]string `thrift:"partitionSpecs,1" json:"partitionSpecs"`
	SourceDb        string            `thrift:"source_db,2" json:"source_db"`
	SourceTableName string            `thrift:"source_table_name,3" json:"source_table_name"`
	DestDb          string            `thrift:"dest_db,4" json:"dest_db"`
	DestTableName   string            `thrift:"dest_table_name,5" json:"dest_table_name"`
}

func NewExchangePartitionArgs() *ExchangePartitionArgs {
	return &ExchangePartitionArgs{}
}

func (p *ExchangePartitionArgs) GetPartitionSpecs() map[string]string {
	return p.PartitionSpecs
}

func (p *ExchangePartitionArgs) GetSourceDb() string {
	return p.SourceDb
}

func (p *ExchangePartitionArgs) GetSourceTableName() string {
	return p.SourceTableName
}

func (p *ExchangePartitionArgs) GetDestDb() string {
	return p.DestDb
}

func (p *ExchangePartitionArgs) GetDestTableName() string {
	return p.DestTableName
}
func (p *ExchangePartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExchangePartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.PartitionSpecs = tMap
	for i := 0; i < size; i++ {
		var _key291 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key291 = v
		}
		var _val292 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val292 = v
		}
		p.PartitionSpecs[_key291] = _val292
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ExchangePartitionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SourceDb = v
	}
	return nil
}

func (p *ExchangePartitionArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SourceTableName = v
	}
	return nil
}

func (p *ExchangePartitionArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DestDb = v
	}
	return nil
}

func (p *ExchangePartitionArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.DestTableName = v
	}
	return nil
}

func (p *ExchangePartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("exchange_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ExchangePartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionSpecs", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:partitionSpecs: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.PartitionSpecs)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.PartitionSpecs {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:partitionSpecs: %s", p, err)
	}
	return err
}

func (p *ExchangePartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_db", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:source_db: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SourceDb)); err != nil {
		return fmt.Errorf("%T.source_db (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:source_db: %s", p, err)
	}
	return err
}

func (p *ExchangePartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_table_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:source_table_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SourceTableName)); err != nil {
		return fmt.Errorf("%T.source_table_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:source_table_name: %s", p, err)
	}
	return err
}

func (p *ExchangePartitionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dest_db", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:dest_db: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DestDb)); err != nil {
		return fmt.Errorf("%T.dest_db (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:dest_db: %s", p, err)
	}
	return err
}

func (p *ExchangePartitionArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dest_table_name", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:dest_table_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DestTableName)); err != nil {
		return fmt.Errorf("%T.dest_table_name (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:dest_table_name: %s", p, err)
	}
	return err
}

func (p *ExchangePartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExchangePartitionArgs(%+v)", *p)
}

type ExchangePartitionResult struct {
	Success *Partition              `thrift:"success,0" json:"success"`
	O1      *MetaException          `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException  `thrift:"o2,2" json:"o2"`
	O3      *InvalidObjectException `thrift:"o3,3" json:"o3"`
	O4      *InvalidInputException  `thrift:"o4,4" json:"o4"`
}

func NewExchangePartitionResult() *ExchangePartitionResult {
	return &ExchangePartitionResult{}
}

var ExchangePartitionResult_Success_DEFAULT *Partition

func (p *ExchangePartitionResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return ExchangePartitionResult_Success_DEFAULT
	}
	return p.Success
}

var ExchangePartitionResult_O1_DEFAULT *MetaException

func (p *ExchangePartitionResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ExchangePartitionResult_O1_DEFAULT
	}
	return p.O1
}

var ExchangePartitionResult_O2_DEFAULT *NoSuchObjectException

func (p *ExchangePartitionResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return ExchangePartitionResult_O2_DEFAULT
	}
	return p.O2
}

var ExchangePartitionResult_O3_DEFAULT *InvalidObjectException

func (p *ExchangePartitionResult) GetO3() *InvalidObjectException {
	if !p.IsSetO3() {
		return ExchangePartitionResult_O3_DEFAULT
	}
	return p.O3
}

var ExchangePartitionResult_O4_DEFAULT *InvalidInputException

func (p *ExchangePartitionResult) GetO4() *InvalidInputException {
	if !p.IsSetO4() {
		return ExchangePartitionResult_O4_DEFAULT
	}
	return p.O4
}
func (p *ExchangePartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExchangePartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ExchangePartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ExchangePartitionResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *ExchangePartitionResult) IsSetO4() bool {
	return p.O4 != nil
}

func (p *ExchangePartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExchangePartitionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ExchangePartitionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *ExchangePartitionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *ExchangePartitionResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &InvalidObjectException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *ExchangePartitionResult) ReadField4(iprot thrift.TProtocol) error {
	p.O4 = &InvalidInputException{}
	if err := p.O4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O4, err)
	}
	return nil
}

func (p *ExchangePartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("exchange_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ExchangePartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ExchangePartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *ExchangePartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *ExchangePartitionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *ExchangePartitionResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetO4() {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:o4: %s", p, err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:o4: %s", p, err)
		}
	}
	return err
}

func (p *ExchangePartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExchangePartitionResult(%+v)", *p)
}

type GetPartitionWithAuthArgs struct {
	DbName     string   `thrift:"db_name,1" json:"db_name"`
	TblName    string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals   []string `thrift:"part_vals,3" json:"part_vals"`
	UserName   string   `thrift:"user_name,4" json:"user_name"`
	GroupNames []string `thrift:"group_names,5" json:"group_names"`
}

func NewGetPartitionWithAuthArgs() *GetPartitionWithAuthArgs {
	return &GetPartitionWithAuthArgs{}
}

func (p *GetPartitionWithAuthArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionWithAuthArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionWithAuthArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *GetPartitionWithAuthArgs) GetUserName() string {
	return p.UserName
}

func (p *GetPartitionWithAuthArgs) GetGroupNames() []string {
	return p.GroupNames
}
func (p *GetPartitionWithAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem293 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem293 = v
		}
		p.PartVals = append(p.PartVals, _elem293)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupNames = tSlice
	for i := 0; i < size; i++ {
		var _elem294 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem294 = v
		}
		p.GroupNames = append(p.GroupNames, _elem294)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_with_auth_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *GetPartitionWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:user_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:group_names: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.GroupNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:group_names: %s", p, err)
	}
	return err
}

func (p *GetPartitionWithAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionWithAuthArgs(%+v)", *p)
}

type GetPartitionWithAuthResult struct {
	Success *Partition             `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionWithAuthResult() *GetPartitionWithAuthResult {
	return &GetPartitionWithAuthResult{}
}

var GetPartitionWithAuthResult_Success_DEFAULT *Partition

func (p *GetPartitionWithAuthResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return GetPartitionWithAuthResult_Success_DEFAULT
	}
	return p.Success
}

var GetPartitionWithAuthResult_O1_DEFAULT *MetaException

func (p *GetPartitionWithAuthResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPartitionWithAuthResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionWithAuthResult_O2_DEFAULT *NoSuchObjectException

func (p *GetPartitionWithAuthResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetPartitionWithAuthResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionWithAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionWithAuthResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionWithAuthResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionWithAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_with_auth_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionWithAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionWithAuthResult(%+v)", *p)
}

type GetPartitionByNameArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	PartName string `thrift:"part_name,3" json:"part_name"`
}

func NewGetPartitionByNameArgs() *GetPartitionByNameArgs {
	return &GetPartitionByNameArgs{}
}

func (p *GetPartitionByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionByNameArgs) GetPartName() string {
	return p.PartName
}
func (p *GetPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionByNameArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionByNameArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionByNameArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *GetPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionByNameArgs(%+v)", *p)
}

type GetPartitionByNameResult struct {
	Success *Partition             `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionByNameResult() *GetPartitionByNameResult {
	return &GetPartitionByNameResult{}
}

var GetPartitionByNameResult_Success_DEFAULT *Partition

func (p *GetPartitionByNameResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return GetPartitionByNameResult_Success_DEFAULT
	}
	return p.Success
}

var GetPartitionByNameResult_O1_DEFAULT *MetaException

func (p *GetPartitionByNameResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPartitionByNameResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionByNameResult_O2_DEFAULT *NoSuchObjectException

func (p *GetPartitionByNameResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetPartitionByNameResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionByNameResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPartitionByNameResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionByNameResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionByNameResult(%+v)", *p)
}

type GetPartitionsArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	MaxParts int16  `thrift:"max_parts,3" json:"max_parts"`
}

func NewGetPartitionsArgs() *GetPartitionsArgs {
	return &GetPartitionsArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionsArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionsArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *GetPartitionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsArgs(%+v)", *p)
}

type GetPartitionsResult struct {
	Success []*Partition           `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionsResult() *GetPartitionsResult {
	return &GetPartitionsResult{}
}

var GetPartitionsResult_Success_DEFAULT []*Partition

func (p *GetPartitionsResult) GetSuccess() []*Partition {
	return p.Success
}

var GetPartitionsResult_O1_DEFAULT *NoSuchObjectException

func (p *GetPartitionsResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return GetPartitionsResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionsResult_O2_DEFAULT *MetaException

func (p *GetPartitionsResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetPartitionsResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem295 := &Partition{}
		if err := _elem295.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem295, err)
		}
		p.Success = append(p.Success, _elem295)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionsResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsResult(%+v)", *p)
}

type GetPartitionsWithAuthArgs struct {
	DbName     string   `thrift:"db_name,1" json:"db_name"`
	TblName    string   `thrift:"tbl_name,2" json:"tbl_name"`
	MaxParts   int16    `thrift:"max_parts,3" json:"max_parts"`
	UserName   string   `thrift:"user_name,4" json:"user_name"`
	GroupNames []string `thrift:"group_names,5" json:"group_names"`
}

func NewGetPartitionsWithAuthArgs() *GetPartitionsWithAuthArgs {
	return &GetPartitionsWithAuthArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsWithAuthArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionsWithAuthArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionsWithAuthArgs) GetMaxParts() int16 {
	return p.MaxParts
}

func (p *GetPartitionsWithAuthArgs) GetUserName() string {
	return p.UserName
}

func (p *GetPartitionsWithAuthArgs) GetGroupNames() []string {
	return p.GroupNames
}
func (p *GetPartitionsWithAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupNames = tSlice
	for i := 0; i < size; i++ {
		var _elem296 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem296 = v
		}
		p.GroupNames = append(p.GroupNames, _elem296)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_with_auth_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:user_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:group_names: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.GroupNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:group_names: %s", p, err)
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsWithAuthArgs(%+v)", *p)
}

type GetPartitionsWithAuthResult struct {
	Success []*Partition           `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionsWithAuthResult() *GetPartitionsWithAuthResult {
	return &GetPartitionsWithAuthResult{}
}

var GetPartitionsWithAuthResult_Success_DEFAULT []*Partition

func (p *GetPartitionsWithAuthResult) GetSuccess() []*Partition {
	return p.Success
}

var GetPartitionsWithAuthResult_O1_DEFAULT *NoSuchObjectException

func (p *GetPartitionsWithAuthResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return GetPartitionsWithAuthResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionsWithAuthResult_O2_DEFAULT *MetaException

func (p *GetPartitionsWithAuthResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetPartitionsWithAuthResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionsWithAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionsWithAuthResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionsWithAuthResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionsWithAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem297 := &Partition{}
		if err := _elem297.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem297, err)
		}
		p.Success = append(p.Success, _elem297)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_with_auth_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsWithAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsWithAuthResult(%+v)", *p)
}

type GetPartitionNamesArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	MaxParts int16  `thrift:"max_parts,3" json:"max_parts"`
}

func NewGetPartitionNamesArgs() *GetPartitionNamesArgs {
	return &GetPartitionNamesArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionNamesArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionNamesArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionNamesArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *GetPartitionNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionNamesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionNamesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionNamesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionNamesArgs(%+v)", *p)
}

type GetPartitionNamesResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O2      *MetaException `thrift:"o2,1" json:"o2"`
}

func NewGetPartitionNamesResult() *GetPartitionNamesResult {
	return &GetPartitionNamesResult{}
}

var GetPartitionNamesResult_Success_DEFAULT []string

func (p *GetPartitionNamesResult) GetSuccess() []string {
	return p.Success
}

var GetPartitionNamesResult_O2_DEFAULT *MetaException

func (p *GetPartitionNamesResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetPartitionNamesResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionNamesResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionNamesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem298 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem298 = v
		}
		p.Success = append(p.Success, _elem298)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionNamesResult(%+v)", *p)
}

type GetPartitionsPsArgs struct {
	DbName   string   `thrift:"db_name,1" json:"db_name"`
	TblName  string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals []string `thrift:"part_vals,3" json:"part_vals"`
	MaxParts int16    `thrift:"max_parts,4" json:"max_parts"`
}

func NewGetPartitionsPsArgs() *GetPartitionsPsArgs {
	return &GetPartitionsPsArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsPsArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionsPsArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionsPsArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *GetPartitionsPsArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *GetPartitionsPsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsPsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsPsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsPsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem299 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem299 = v
		}
		p.PartVals = append(p.PartVals, _elem299)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsPsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsPsArgs(%+v)", *p)
}

type GetPartitionsPsResult struct {
	Success []*Partition           `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionsPsResult() *GetPartitionsPsResult {
	return &GetPartitionsPsResult{}
}

var GetPartitionsPsResult_Success_DEFAULT []*Partition

func (p *GetPartitionsPsResult) GetSuccess() []*Partition {
	return p.Success
}

var GetPartitionsPsResult_O1_DEFAULT *MetaException

func (p *GetPartitionsPsResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPartitionsPsResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionsPsResult_O2_DEFAULT *NoSuchObjectException

func (p *GetPartitionsPsResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetPartitionsPsResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionsPsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionsPsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionsPsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionsPsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsPsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem300 := &Partition{}
		if err := _elem300.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem300, err)
		}
		p.Success = append(p.Success, _elem300)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionsPsResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionsPsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsPsResult(%+v)", *p)
}

type GetPartitionsPsWithAuthArgs struct {
	DbName     string   `thrift:"db_name,1" json:"db_name"`
	TblName    string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals   []string `thrift:"part_vals,3" json:"part_vals"`
	MaxParts   int16    `thrift:"max_parts,4" json:"max_parts"`
	UserName   string   `thrift:"user_name,5" json:"user_name"`
	GroupNames []string `thrift:"group_names,6" json:"group_names"`
}

func NewGetPartitionsPsWithAuthArgs() *GetPartitionsPsWithAuthArgs {
	return &GetPartitionsPsWithAuthArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsPsWithAuthArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionsPsWithAuthArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionsPsWithAuthArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *GetPartitionsPsWithAuthArgs) GetMaxParts() int16 {
	return p.MaxParts
}

func (p *GetPartitionsPsWithAuthArgs) GetUserName() string {
	return p.UserName
}

func (p *GetPartitionsPsWithAuthArgs) GetGroupNames() []string {
	return p.GroupNames
}
func (p *GetPartitionsPsWithAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem301 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem301 = v
		}
		p.PartVals = append(p.PartVals, _elem301)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupNames = tSlice
	for i := 0; i < size; i++ {
		var _elem302 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem302 = v
		}
		p.GroupNames = append(p.GroupNames, _elem302)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_with_auth_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:user_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:group_names: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.GroupNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:group_names: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsPsWithAuthArgs(%+v)", *p)
}

type GetPartitionsPsWithAuthResult struct {
	Success []*Partition           `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionsPsWithAuthResult() *GetPartitionsPsWithAuthResult {
	return &GetPartitionsPsWithAuthResult{}
}

var GetPartitionsPsWithAuthResult_Success_DEFAULT []*Partition

func (p *GetPartitionsPsWithAuthResult) GetSuccess() []*Partition {
	return p.Success
}

var GetPartitionsPsWithAuthResult_O1_DEFAULT *NoSuchObjectException

func (p *GetPartitionsPsWithAuthResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return GetPartitionsPsWithAuthResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionsPsWithAuthResult_O2_DEFAULT *MetaException

func (p *GetPartitionsPsWithAuthResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetPartitionsPsWithAuthResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionsPsWithAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionsPsWithAuthResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionsPsWithAuthResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionsPsWithAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem303 := &Partition{}
		if err := _elem303.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem303, err)
		}
		p.Success = append(p.Success, _elem303)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_with_auth_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsWithAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsPsWithAuthResult(%+v)", *p)
}

type GetPartitionNamesPsArgs struct {
	DbName   string   `thrift:"db_name,1" json:"db_name"`
	TblName  string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals []string `thrift:"part_vals,3" json:"part_vals"`
	MaxParts int16    `thrift:"max_parts,4" json:"max_parts"`
}

func NewGetPartitionNamesPsArgs() *GetPartitionNamesPsArgs {
	return &GetPartitionNamesPsArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionNamesPsArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionNamesPsArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionNamesPsArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *GetPartitionNamesPsArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *GetPartitionNamesPsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem304 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem304 = v
		}
		p.PartVals = append(p.PartVals, _elem304)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_ps_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesPsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesPsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesPsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesPsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionNamesPsArgs(%+v)", *p)
}

type GetPartitionNamesPsResult struct {
	Success []string               `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionNamesPsResult() *GetPartitionNamesPsResult {
	return &GetPartitionNamesPsResult{}
}

var GetPartitionNamesPsResult_Success_DEFAULT []string

func (p *GetPartitionNamesPsResult) GetSuccess() []string {
	return p.Success
}

var GetPartitionNamesPsResult_O1_DEFAULT *MetaException

func (p *GetPartitionNamesPsResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPartitionNamesPsResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionNamesPsResult_O2_DEFAULT *NoSuchObjectException

func (p *GetPartitionNamesPsResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetPartitionNamesPsResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionNamesPsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionNamesPsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionNamesPsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionNamesPsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionNamesPsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem305 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem305 = v
		}
		p.Success = append(p.Success, _elem305)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesPsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionNamesPsResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionNamesPsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_ps_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesPsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionNamesPsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionNamesPsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionNamesPsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionNamesPsResult(%+v)", *p)
}

type GetPartitionsByFilterArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	Filter   string `thrift:"filter,3" json:"filter"`
	MaxParts int16  `thrift:"max_parts,4" json:"max_parts"`
}

func NewGetPartitionsByFilterArgs() *GetPartitionsByFilterArgs {
	return &GetPartitionsByFilterArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsByFilterArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionsByFilterArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionsByFilterArgs) GetFilter() string {
	return p.Filter
}

func (p *GetPartitionsByFilterArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *GetPartitionsByFilterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Filter = v
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_by_filter_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByFilterArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByFilterArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filter", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:filter: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Filter)); err != nil {
		return fmt.Errorf("%T.filter (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:filter: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByFilterArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByFilterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsByFilterArgs(%+v)", *p)
}

type GetPartitionsByFilterResult struct {
	Success []*Partition           `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionsByFilterResult() *GetPartitionsByFilterResult {
	return &GetPartitionsByFilterResult{}
}

var GetPartitionsByFilterResult_Success_DEFAULT []*Partition

func (p *GetPartitionsByFilterResult) GetSuccess() []*Partition {
	return p.Success
}

var GetPartitionsByFilterResult_O1_DEFAULT *MetaException

func (p *GetPartitionsByFilterResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPartitionsByFilterResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionsByFilterResult_O2_DEFAULT *NoSuchObjectException

func (p *GetPartitionsByFilterResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetPartitionsByFilterResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionsByFilterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionsByFilterResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionsByFilterResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionsByFilterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsByFilterResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem306 := &Partition{}
		if err := _elem306.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem306, err)
		}
		p.Success = append(p.Success, _elem306)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsByFilterResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionsByFilterResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionsByFilterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_by_filter_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsByFilterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByFilterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByFilterResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByFilterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsByFilterResult(%+v)", *p)
}

type GetPartitionsByExprArgs struct {
	Req *PartitionsByExprRequest `thrift:"req,1" json:"req"`
}

func NewGetPartitionsByExprArgs() *GetPartitionsByExprArgs {
	return &GetPartitionsByExprArgs{}
}

var GetPartitionsByExprArgs_Req_DEFAULT *PartitionsByExprRequest

func (p *GetPartitionsByExprArgs) GetReq() *PartitionsByExprRequest {
	if !p.IsSetReq() {
		return GetPartitionsByExprArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetPartitionsByExprArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetPartitionsByExprArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsByExprArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &PartitionsByExprRequest{
		MaxParts: -1,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetPartitionsByExprArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_by_expr_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsByExprArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByExprArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsByExprArgs(%+v)", *p)
}

type GetPartitionsByExprResult struct {
	Success *PartitionsByExprResult_ `thrift:"success,0" json:"success"`
	O1      *MetaException           `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException   `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionsByExprResult() *GetPartitionsByExprResult {
	return &GetPartitionsByExprResult{}
}

var GetPartitionsByExprResult_Success_DEFAULT *PartitionsByExprResult_

func (p *GetPartitionsByExprResult) GetSuccess() *PartitionsByExprResult_ {
	if !p.IsSetSuccess() {
		return GetPartitionsByExprResult_Success_DEFAULT
	}
	return p.Success
}

var GetPartitionsByExprResult_O1_DEFAULT *MetaException

func (p *GetPartitionsByExprResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPartitionsByExprResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionsByExprResult_O2_DEFAULT *NoSuchObjectException

func (p *GetPartitionsByExprResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetPartitionsByExprResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionsByExprResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionsByExprResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionsByExprResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionsByExprResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsByExprResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PartitionsByExprResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPartitionsByExprResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionsByExprResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionsByExprResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_by_expr_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsByExprResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByExprResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByExprResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByExprResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsByExprResult(%+v)", *p)
}

type GetPartitionsByNamesArgs struct {
	DbName  string   `thrift:"db_name,1" json:"db_name"`
	TblName string   `thrift:"tbl_name,2" json:"tbl_name"`
	Names   []string `thrift:"names,3" json:"names"`
}

func NewGetPartitionsByNamesArgs() *GetPartitionsByNamesArgs {
	return &GetPartitionsByNamesArgs{}
}

func (p *GetPartitionsByNamesArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionsByNamesArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionsByNamesArgs) GetNames() []string {
	return p.Names
}
func (p *GetPartitionsByNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsByNamesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsByNamesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsByNamesArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Names = tSlice
	for i := 0; i < size; i++ {
		var _elem307 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem307 = v
		}
		p.Names = append(p.Names, _elem307)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsByNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_by_names_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsByNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByNamesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("names", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:names: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Names)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Names {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:names: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsByNamesArgs(%+v)", *p)
}

type GetPartitionsByNamesResult struct {
	Success []*Partition           `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionsByNamesResult() *GetPartitionsByNamesResult {
	return &GetPartitionsByNamesResult{}
}

var GetPartitionsByNamesResult_Success_DEFAULT []*Partition

func (p *GetPartitionsByNamesResult) GetSuccess() []*Partition {
	return p.Success
}

var GetPartitionsByNamesResult_O1_DEFAULT *MetaException

func (p *GetPartitionsByNamesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPartitionsByNamesResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionsByNamesResult_O2_DEFAULT *NoSuchObjectException

func (p *GetPartitionsByNamesResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetPartitionsByNamesResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionsByNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionsByNamesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionsByNamesResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionsByNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsByNamesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem308 := &Partition{}
		if err := _elem308.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem308, err)
		}
		p.Success = append(p.Success, _elem308)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsByNamesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionsByNamesResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionsByNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_by_names_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsByNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByNamesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsByNamesResult(%+v)", *p)
}

type AlterPartitionArgs struct {
	DbName   string     `thrift:"db_name,1" json:"db_name"`
	TblName  string     `thrift:"tbl_name,2" json:"tbl_name"`
	NewPart_ *Partition `thrift:"new_part,3" json:"new_part"`
}

func NewAlterPartitionArgs() *AlterPartitionArgs {
	return &AlterPartitionArgs{}
}

func (p *AlterPartitionArgs) GetDbName() string {
	return p.DbName
}

func (p *AlterPartitionArgs) GetTblName() string {
	return p.TblName
}

var AlterPartitionArgs_NewPart__DEFAULT *Partition

func (p *AlterPartitionArgs) GetNewPart_() *Partition {
	if !p.IsSetNewPart_() {
		return AlterPartitionArgs_NewPart__DEFAULT
	}
	return p.NewPart_
}
func (p *AlterPartitionArgs) IsSetNewPart_() bool {
	return p.NewPart_ != nil
}

func (p *AlterPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterPartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AlterPartitionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AlterPartitionArgs) ReadField3(iprot thrift.TProtocol) error {
	p.NewPart_ = &Partition{}
	if err := p.NewPart_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewPart_, err)
	}
	return nil
}

func (p *AlterPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *AlterPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AlterPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:new_part: %s", p, err)
	}
	if err := p.NewPart_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewPart_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:new_part: %s", p, err)
	}
	return err
}

func (p *AlterPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterPartitionArgs(%+v)", *p)
}

type AlterPartitionResult struct {
	O1 *InvalidOperationException `thrift:"o1,1" json:"o1"`
	O2 *MetaException             `thrift:"o2,2" json:"o2"`
}

func NewAlterPartitionResult() *AlterPartitionResult {
	return &AlterPartitionResult{}
}

var AlterPartitionResult_O1_DEFAULT *InvalidOperationException

func (p *AlterPartitionResult) GetO1() *InvalidOperationException {
	if !p.IsSetO1() {
		return AlterPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var AlterPartitionResult_O2_DEFAULT *MetaException

func (p *AlterPartitionResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return AlterPartitionResult_O2_DEFAULT
	}
	return p.O2
}
func (p *AlterPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AlterPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AlterPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterPartitionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidOperationException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AlterPartitionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AlterPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterPartitionResult(%+v)", *p)
}

type AlterPartitionsArgs struct {
	DbName    string       `thrift:"db_name,1" json:"db_name"`
	TblName   string       `thrift:"tbl_name,2" json:"tbl_name"`
	NewParts_ []*Partition `thrift:"new_parts,3" json:"new_parts"`
}

func NewAlterPartitionsArgs() *AlterPartitionsArgs {
	return &AlterPartitionsArgs{}
}

func (p *AlterPartitionsArgs) GetDbName() string {
	return p.DbName
}

func (p *AlterPartitionsArgs) GetTblName() string {
	return p.TblName
}

func (p *AlterPartitionsArgs) GetNewParts_() []*Partition {
	return p.NewParts_
}
func (p *AlterPartitionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterPartitionsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AlterPartitionsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AlterPartitionsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.NewParts_ = tSlice
	for i := 0; i < size; i++ {
		_elem309 := &Partition{}
		if err := _elem309.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem309, err)
		}
		p.NewParts_ = append(p.NewParts_, _elem309)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *AlterPartitionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_partitions_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterPartitionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *AlterPartitionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AlterPartitionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_parts", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:new_parts: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NewParts_)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.NewParts_ {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:new_parts: %s", p, err)
	}
	return err
}

func (p *AlterPartitionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterPartitionsArgs(%+v)", *p)
}

type AlterPartitionsResult struct {
	O1 *InvalidOperationException `thrift:"o1,1" json:"o1"`
	O2 *MetaException             `thrift:"o2,2" json:"o2"`
}

func NewAlterPartitionsResult() *AlterPartitionsResult {
	return &AlterPartitionsResult{}
}

var AlterPartitionsResult_O1_DEFAULT *InvalidOperationException

func (p *AlterPartitionsResult) GetO1() *InvalidOperationException {
	if !p.IsSetO1() {
		return AlterPartitionsResult_O1_DEFAULT
	}
	return p.O1
}

var AlterPartitionsResult_O2_DEFAULT *MetaException

func (p *AlterPartitionsResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return AlterPartitionsResult_O2_DEFAULT
	}
	return p.O2
}
func (p *AlterPartitionsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AlterPartitionsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AlterPartitionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterPartitionsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidOperationException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AlterPartitionsResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AlterPartitionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_partitions_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterPartitionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterPartitionsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterPartitionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterPartitionsResult(%+v)", *p)
}

type AlterPartitionWithEnvironmentContextArgs struct {
	DbName             string              `thrift:"db_name,1" json:"db_name"`
	TblName            string              `thrift:"tbl_name,2" json:"tbl_name"`
	NewPart_           *Partition          `thrift:"new_part,3" json:"new_part"`
	EnvironmentContext *EnvironmentContext `thrift:"environment_context,4" json:"environment_context"`
}

func NewAlterPartitionWithEnvironmentContextArgs() *AlterPartitionWithEnvironmentContextArgs {
	return &AlterPartitionWithEnvironmentContextArgs{}
}

func (p *AlterPartitionWithEnvironmentContextArgs) GetDbName() string {
	return p.DbName
}

func (p *AlterPartitionWithEnvironmentContextArgs) GetTblName() string {
	return p.TblName
}

var AlterPartitionWithEnvironmentContextArgs_NewPart__DEFAULT *Partition

func (p *AlterPartitionWithEnvironmentContextArgs) GetNewPart_() *Partition {
	if !p.IsSetNewPart_() {
		return AlterPartitionWithEnvironmentContextArgs_NewPart__DEFAULT
	}
	return p.NewPart_
}

var AlterPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext

func (p *AlterPartitionWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
	if !p.IsSetEnvironmentContext() {
		return AlterPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
	}
	return p.EnvironmentContext
}
func (p *AlterPartitionWithEnvironmentContextArgs) IsSetNewPart_() bool {
	return p.NewPart_ != nil
}

func (p *AlterPartitionWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
	return p.EnvironmentContext != nil
}

func (p *AlterPartitionWithEnvironmentContextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterPartitionWithEnvironmentContextArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AlterPartitionWithEnvironmentContextArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AlterPartitionWithEnvironmentContextArgs) ReadField3(iprot thrift.TProtocol) error {
	p.NewPart_ = &Partition{}
	if err := p.NewPart_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewPart_, err)
	}
	return nil
}

func (p *AlterPartitionWithEnvironmentContextArgs) ReadField4(iprot thrift.TProtocol) error {
	p.EnvironmentContext = &EnvironmentContext{}
	if err := p.EnvironmentContext.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EnvironmentContext, err)
	}
	return nil
}

func (p *AlterPartitionWithEnvironmentContextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_partition_with_environment_context_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterPartitionWithEnvironmentContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *AlterPartitionWithEnvironmentContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AlterPartitionWithEnvironmentContextArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:new_part: %s", p, err)
	}
	if err := p.NewPart_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewPart_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:new_part: %s", p, err)
	}
	return err
}

func (p *AlterPartitionWithEnvironmentContextArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("environment_context", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:environment_context: %s", p, err)
	}
	if err := p.EnvironmentContext.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.EnvironmentContext, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:environment_context: %s", p, err)
	}
	return err
}

func (p *AlterPartitionWithEnvironmentContextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterPartitionWithEnvironmentContextArgs(%+v)", *p)
}

type AlterPartitionWithEnvironmentContextResult struct {
	O1 *InvalidOperationException `thrift:"o1,1" json:"o1"`
	O2 *MetaException             `thrift:"o2,2" json:"o2"`
}

func NewAlterPartitionWithEnvironmentContextResult() *AlterPartitionWithEnvironmentContextResult {
	return &AlterPartitionWithEnvironmentContextResult{}
}

var AlterPartitionWithEnvironmentContextResult_O1_DEFAULT *InvalidOperationException

func (p *AlterPartitionWithEnvironmentContextResult) GetO1() *InvalidOperationException {
	if !p.IsSetO1() {
		return AlterPartitionWithEnvironmentContextResult_O1_DEFAULT
	}
	return p.O1
}

var AlterPartitionWithEnvironmentContextResult_O2_DEFAULT *MetaException

func (p *AlterPartitionWithEnvironmentContextResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return AlterPartitionWithEnvironmentContextResult_O2_DEFAULT
	}
	return p.O2
}
func (p *AlterPartitionWithEnvironmentContextResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AlterPartitionWithEnvironmentContextResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AlterPartitionWithEnvironmentContextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterPartitionWithEnvironmentContextResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidOperationException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AlterPartitionWithEnvironmentContextResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AlterPartitionWithEnvironmentContextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_partition_with_environment_context_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterPartitionWithEnvironmentContextResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterPartitionWithEnvironmentContextResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterPartitionWithEnvironmentContextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterPartitionWithEnvironmentContextResult(%+v)", *p)
}

type RenamePartitionArgs struct {
	DbName   string     `thrift:"db_name,1" json:"db_name"`
	TblName  string     `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals []string   `thrift:"part_vals,3" json:"part_vals"`
	NewPart_ *Partition `thrift:"new_part,4" json:"new_part"`
}

func NewRenamePartitionArgs() *RenamePartitionArgs {
	return &RenamePartitionArgs{}
}

func (p *RenamePartitionArgs) GetDbName() string {
	return p.DbName
}

func (p *RenamePartitionArgs) GetTblName() string {
	return p.TblName
}

func (p *RenamePartitionArgs) GetPartVals() []string {
	return p.PartVals
}

var RenamePartitionArgs_NewPart__DEFAULT *Partition

func (p *RenamePartitionArgs) GetNewPart_() *Partition {
	if !p.IsSetNewPart_() {
		return RenamePartitionArgs_NewPart__DEFAULT
	}
	return p.NewPart_
}
func (p *RenamePartitionArgs) IsSetNewPart_() bool {
	return p.NewPart_ != nil
}

func (p *RenamePartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenamePartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *RenamePartitionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *RenamePartitionArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem310 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem310 = v
		}
		p.PartVals = append(p.PartVals, _elem310)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *RenamePartitionArgs) ReadField4(iprot thrift.TProtocol) error {
	p.NewPart_ = &Partition{}
	if err := p.NewPart_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewPart_, err)
	}
	return nil
}

func (p *RenamePartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rename_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RenamePartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *RenamePartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *RenamePartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *RenamePartitionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:new_part: %s", p, err)
	}
	if err := p.NewPart_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewPart_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:new_part: %s", p, err)
	}
	return err
}

func (p *RenamePartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenamePartitionArgs(%+v)", *p)
}

type RenamePartitionResult struct {
	O1 *InvalidOperationException `thrift:"o1,1" json:"o1"`
	O2 *MetaException             `thrift:"o2,2" json:"o2"`
}

func NewRenamePartitionResult() *RenamePartitionResult {
	return &RenamePartitionResult{}
}

var RenamePartitionResult_O1_DEFAULT *InvalidOperationException

func (p *RenamePartitionResult) GetO1() *InvalidOperationException {
	if !p.IsSetO1() {
		return RenamePartitionResult_O1_DEFAULT
	}
	return p.O1
}

var RenamePartitionResult_O2_DEFAULT *MetaException

func (p *RenamePartitionResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return RenamePartitionResult_O2_DEFAULT
	}
	return p.O2
}
func (p *RenamePartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *RenamePartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *RenamePartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenamePartitionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidOperationException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *RenamePartitionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *RenamePartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rename_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RenamePartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *RenamePartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *RenamePartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenamePartitionResult(%+v)", *p)
}

type PartitionNameHasValidCharactersArgs struct {
	PartVals       []string `thrift:"part_vals,1" json:"part_vals"`
	ThrowException bool     `thrift:"throw_exception,2" json:"throw_exception"`
}

func NewPartitionNameHasValidCharactersArgs() *PartitionNameHasValidCharactersArgs {
	return &PartitionNameHasValidCharactersArgs{}
}

func (p *PartitionNameHasValidCharactersArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *PartitionNameHasValidCharactersArgs) GetThrowException() bool {
	return p.ThrowException
}
func (p *PartitionNameHasValidCharactersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionNameHasValidCharactersArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem311 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem311 = v
		}
		p.PartVals = append(p.PartVals, _elem311)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PartitionNameHasValidCharactersArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ThrowException = v
	}
	return nil
}

func (p *PartitionNameHasValidCharactersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_has_valid_characters_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionNameHasValidCharactersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:part_vals: %s", p, err)
	}
	return err
}

func (p *PartitionNameHasValidCharactersArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("throw_exception", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:throw_exception: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.ThrowException)); err != nil {
		return fmt.Errorf("%T.throw_exception (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:throw_exception: %s", p, err)
	}
	return err
}

func (p *PartitionNameHasValidCharactersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionNameHasValidCharactersArgs(%+v)", *p)
}

type PartitionNameHasValidCharactersResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewPartitionNameHasValidCharactersResult() *PartitionNameHasValidCharactersResult {
	return &PartitionNameHasValidCharactersResult{}
}

var PartitionNameHasValidCharactersResult_Success_DEFAULT bool

func (p *PartitionNameHasValidCharactersResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return PartitionNameHasValidCharactersResult_Success_DEFAULT
	}
	return *p.Success
}

var PartitionNameHasValidCharactersResult_O1_DEFAULT *MetaException

func (p *PartitionNameHasValidCharactersResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return PartitionNameHasValidCharactersResult_O1_DEFAULT
	}
	return p.O1
}
func (p *PartitionNameHasValidCharactersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PartitionNameHasValidCharactersResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *PartitionNameHasValidCharactersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionNameHasValidCharactersResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *PartitionNameHasValidCharactersResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *PartitionNameHasValidCharactersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_has_valid_characters_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionNameHasValidCharactersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *PartitionNameHasValidCharactersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *PartitionNameHasValidCharactersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionNameHasValidCharactersResult(%+v)", *p)
}

type GetConfigValueArgs struct {
	Name         string `thrift:"name,1" json:"name"`
	DefaultValue string `thrift:"defaultValue,2" json:"defaultValue"`
}

func NewGetConfigValueArgs() *GetConfigValueArgs {
	return &GetConfigValueArgs{}
}

func (p *GetConfigValueArgs) GetName() string {
	return p.Name
}

func (p *GetConfigValueArgs) GetDefaultValue() string {
	return p.DefaultValue
}
func (p *GetConfigValueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetConfigValueArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetConfigValueArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DefaultValue = v
	}
	return nil
}

func (p *GetConfigValueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_config_value_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetConfigValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *GetConfigValueArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("defaultValue", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:defaultValue: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DefaultValue)); err != nil {
		return fmt.Errorf("%T.defaultValue (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:defaultValue: %s", p, err)
	}
	return err
}

func (p *GetConfigValueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetConfigValueArgs(%+v)", *p)
}

type GetConfigValueResult struct {
	Success *string                     `thrift:"success,0" json:"success"`
	O1      *ConfigValSecurityException `thrift:"o1,1" json:"o1"`
}

func NewGetConfigValueResult() *GetConfigValueResult {
	return &GetConfigValueResult{}
}

var GetConfigValueResult_Success_DEFAULT string

func (p *GetConfigValueResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return GetConfigValueResult_Success_DEFAULT
	}
	return *p.Success
}

var GetConfigValueResult_O1_DEFAULT *ConfigValSecurityException

func (p *GetConfigValueResult) GetO1() *ConfigValSecurityException {
	if !p.IsSetO1() {
		return GetConfigValueResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetConfigValueResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetConfigValueResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetConfigValueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetConfigValueResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GetConfigValueResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &ConfigValSecurityException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetConfigValueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_config_value_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetConfigValueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetConfigValueResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetConfigValueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetConfigValueResult(%+v)", *p)
}

type PartitionNameToValsArgs struct {
	PartName string `thrift:"part_name,1" json:"part_name"`
}

func NewPartitionNameToValsArgs() *PartitionNameToValsArgs {
	return &PartitionNameToValsArgs{}
}

func (p *PartitionNameToValsArgs) GetPartName() string {
	return p.PartName
}
func (p *PartitionNameToValsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionNameToValsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *PartitionNameToValsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_vals_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionNameToValsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:part_name: %s", p, err)
	}
	return err
}

func (p *PartitionNameToValsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionNameToValsArgs(%+v)", *p)
}

type PartitionNameToValsResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewPartitionNameToValsResult() *PartitionNameToValsResult {
	return &PartitionNameToValsResult{}
}

var PartitionNameToValsResult_Success_DEFAULT []string

func (p *PartitionNameToValsResult) GetSuccess() []string {
	return p.Success
}

var PartitionNameToValsResult_O1_DEFAULT *MetaException

func (p *PartitionNameToValsResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return PartitionNameToValsResult_O1_DEFAULT
	}
	return p.O1
}
func (p *PartitionNameToValsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PartitionNameToValsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *PartitionNameToValsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionNameToValsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem312 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem312 = v
		}
		p.Success = append(p.Success, _elem312)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PartitionNameToValsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *PartitionNameToValsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_vals_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionNameToValsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *PartitionNameToValsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *PartitionNameToValsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionNameToValsResult(%+v)", *p)
}

type PartitionNameToSpecArgs struct {
	PartName string `thrift:"part_name,1" json:"part_name"`
}

func NewPartitionNameToSpecArgs() *PartitionNameToSpecArgs {
	return &PartitionNameToSpecArgs{}
}

func (p *PartitionNameToSpecArgs) GetPartName() string {
	return p.PartName
}
func (p *PartitionNameToSpecArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionNameToSpecArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *PartitionNameToSpecArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_spec_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionNameToSpecArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:part_name: %s", p, err)
	}
	return err
}

func (p *PartitionNameToSpecArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionNameToSpecArgs(%+v)", *p)
}

type PartitionNameToSpecResult struct {
	Success map[string]string `thrift:"success,0" json:"success"`
	O1      *MetaException    `thrift:"o1,1" json:"o1"`
}

func NewPartitionNameToSpecResult() *PartitionNameToSpecResult {
	return &PartitionNameToSpecResult{}
}

var PartitionNameToSpecResult_Success_DEFAULT map[string]string

func (p *PartitionNameToSpecResult) GetSuccess() map[string]string {
	return p.Success
}

var PartitionNameToSpecResult_O1_DEFAULT *MetaException

func (p *PartitionNameToSpecResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return PartitionNameToSpecResult_O1_DEFAULT
	}
	return p.O1
}
func (p *PartitionNameToSpecResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PartitionNameToSpecResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *PartitionNameToSpecResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionNameToSpecResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key313 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key313 = v
		}
		var _val314 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val314 = v
		}
		p.Success[_key313] = _val314
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *PartitionNameToSpecResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *PartitionNameToSpecResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_spec_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionNameToSpecResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *PartitionNameToSpecResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *PartitionNameToSpecResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionNameToSpecResult(%+v)", *p)
}

type MarkPartitionForEventArgs struct {
	DbName    string             `thrift:"db_name,1" json:"db_name"`
	TblName   string             `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals  map[string]string  `thrift:"part_vals,3" json:"part_vals"`
	EventType PartitionEventType `thrift:"eventType,4" json:"eventType"`
}

func NewMarkPartitionForEventArgs() *MarkPartitionForEventArgs {
	return &MarkPartitionForEventArgs{}
}

func (p *MarkPartitionForEventArgs) GetDbName() string {
	return p.DbName
}

func (p *MarkPartitionForEventArgs) GetTblName() string {
	return p.TblName
}

func (p *MarkPartitionForEventArgs) GetPartVals() map[string]string {
	return p.PartVals
}

func (p *MarkPartitionForEventArgs) GetEventType() PartitionEventType {
	return p.EventType
}
func (p *MarkPartitionForEventArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MarkPartitionForEventArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *MarkPartitionForEventArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *MarkPartitionForEventArgs) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.PartVals = tMap
	for i := 0; i < size; i++ {
		var _key315 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key315 = v
		}
		var _val316 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val316 = v
		}
		p.PartVals[_key315] = _val316
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *MarkPartitionForEventArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := PartitionEventType(v)
		p.EventType = temp
	}
	return nil
}

func (p *MarkPartitionForEventArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("markPartitionForEvent_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MarkPartitionForEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *MarkPartitionForEventArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *MarkPartitionForEventArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.PartVals {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *MarkPartitionForEventArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventType", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:eventType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.EventType)); err != nil {
		return fmt.Errorf("%T.eventType (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:eventType: %s", p, err)
	}
	return err
}

func (p *MarkPartitionForEventArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MarkPartitionForEventArgs(%+v)", *p)
}

type MarkPartitionForEventResult struct {
	O1 *MetaException             `thrift:"o1,1" json:"o1"`
	O2 *NoSuchObjectException     `thrift:"o2,2" json:"o2"`
	O3 *UnknownDBException        `thrift:"o3,3" json:"o3"`
	O4 *UnknownTableException     `thrift:"o4,4" json:"o4"`
	O5 *UnknownPartitionException `thrift:"o5,5" json:"o5"`
	O6 *InvalidPartitionException `thrift:"o6,6" json:"o6"`
}

func NewMarkPartitionForEventResult() *MarkPartitionForEventResult {
	return &MarkPartitionForEventResult{}
}

var MarkPartitionForEventResult_O1_DEFAULT *MetaException

func (p *MarkPartitionForEventResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return MarkPartitionForEventResult_O1_DEFAULT
	}
	return p.O1
}

var MarkPartitionForEventResult_O2_DEFAULT *NoSuchObjectException

func (p *MarkPartitionForEventResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return MarkPartitionForEventResult_O2_DEFAULT
	}
	return p.O2
}

var MarkPartitionForEventResult_O3_DEFAULT *UnknownDBException

func (p *MarkPartitionForEventResult) GetO3() *UnknownDBException {
	if !p.IsSetO3() {
		return MarkPartitionForEventResult_O3_DEFAULT
	}
	return p.O3
}

var MarkPartitionForEventResult_O4_DEFAULT *UnknownTableException

func (p *MarkPartitionForEventResult) GetO4() *UnknownTableException {
	if !p.IsSetO4() {
		return MarkPartitionForEventResult_O4_DEFAULT
	}
	return p.O4
}

var MarkPartitionForEventResult_O5_DEFAULT *UnknownPartitionException

func (p *MarkPartitionForEventResult) GetO5() *UnknownPartitionException {
	if !p.IsSetO5() {
		return MarkPartitionForEventResult_O5_DEFAULT
	}
	return p.O5
}

var MarkPartitionForEventResult_O6_DEFAULT *InvalidPartitionException

func (p *MarkPartitionForEventResult) GetO6() *InvalidPartitionException {
	if !p.IsSetO6() {
		return MarkPartitionForEventResult_O6_DEFAULT
	}
	return p.O6
}
func (p *MarkPartitionForEventResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *MarkPartitionForEventResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *MarkPartitionForEventResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *MarkPartitionForEventResult) IsSetO4() bool {
	return p.O4 != nil
}

func (p *MarkPartitionForEventResult) IsSetO5() bool {
	return p.O5 != nil
}

func (p *MarkPartitionForEventResult) IsSetO6() bool {
	return p.O6 != nil
}

func (p *MarkPartitionForEventResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MarkPartitionForEventResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *MarkPartitionForEventResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *MarkPartitionForEventResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &UnknownDBException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *MarkPartitionForEventResult) ReadField4(iprot thrift.TProtocol) error {
	p.O4 = &UnknownTableException{}
	if err := p.O4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O4, err)
	}
	return nil
}

func (p *MarkPartitionForEventResult) ReadField5(iprot thrift.TProtocol) error {
	p.O5 = &UnknownPartitionException{}
	if err := p.O5.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O5, err)
	}
	return nil
}

func (p *MarkPartitionForEventResult) ReadField6(iprot thrift.TProtocol) error {
	p.O6 = &InvalidPartitionException{}
	if err := p.O6.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O6, err)
	}
	return nil
}

func (p *MarkPartitionForEventResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("markPartitionForEvent_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MarkPartitionForEventResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *MarkPartitionForEventResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *MarkPartitionForEventResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *MarkPartitionForEventResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetO4() {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:o4: %s", p, err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:o4: %s", p, err)
		}
	}
	return err
}

func (p *MarkPartitionForEventResult) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetO5() {
		if err := oprot.WriteFieldBegin("o5", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:o5: %s", p, err)
		}
		if err := p.O5.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O5, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:o5: %s", p, err)
		}
	}
	return err
}

func (p *MarkPartitionForEventResult) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetO6() {
		if err := oprot.WriteFieldBegin("o6", thrift.STRUCT, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:o6: %s", p, err)
		}
		if err := p.O6.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O6, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:o6: %s", p, err)
		}
	}
	return err
}

func (p *MarkPartitionForEventResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MarkPartitionForEventResult(%+v)", *p)
}

type IsPartitionMarkedForEventArgs struct {
	DbName    string             `thrift:"db_name,1" json:"db_name"`
	TblName   string             `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals  map[string]string  `thrift:"part_vals,3" json:"part_vals"`
	EventType PartitionEventType `thrift:"eventType,4" json:"eventType"`
}

func NewIsPartitionMarkedForEventArgs() *IsPartitionMarkedForEventArgs {
	return &IsPartitionMarkedForEventArgs{}
}

func (p *IsPartitionMarkedForEventArgs) GetDbName() string {
	return p.DbName
}

func (p *IsPartitionMarkedForEventArgs) GetTblName() string {
	return p.TblName
}

func (p *IsPartitionMarkedForEventArgs) GetPartVals() map[string]string {
	return p.PartVals
}

func (p *IsPartitionMarkedForEventArgs) GetEventType() PartitionEventType {
	return p.EventType
}
func (p *IsPartitionMarkedForEventArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsPartitionMarkedForEventArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *IsPartitionMarkedForEventArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *IsPartitionMarkedForEventArgs) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.PartVals = tMap
	for i := 0; i < size; i++ {
		var _key317 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key317 = v
		}
		var _val318 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val318 = v
		}
		p.PartVals[_key317] = _val318
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *IsPartitionMarkedForEventArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := PartitionEventType(v)
		p.EventType = temp
	}
	return nil
}

func (p *IsPartitionMarkedForEventArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isPartitionMarkedForEvent_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsPartitionMarkedForEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *IsPartitionMarkedForEventArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *IsPartitionMarkedForEventArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.PartVals {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *IsPartitionMarkedForEventArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventType", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:eventType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.EventType)); err != nil {
		return fmt.Errorf("%T.eventType (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:eventType: %s", p, err)
	}
	return err
}

func (p *IsPartitionMarkedForEventArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsPartitionMarkedForEventArgs(%+v)", *p)
}

type IsPartitionMarkedForEventResult struct {
	Success *bool                      `thrift:"success,0" json:"success"`
	O1      *MetaException             `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException     `thrift:"o2,2" json:"o2"`
	O3      *UnknownDBException        `thrift:"o3,3" json:"o3"`
	O4      *UnknownTableException     `thrift:"o4,4" json:"o4"`
	O5      *UnknownPartitionException `thrift:"o5,5" json:"o5"`
	O6      *InvalidPartitionException `thrift:"o6,6" json:"o6"`
}

func NewIsPartitionMarkedForEventResult() *IsPartitionMarkedForEventResult {
	return &IsPartitionMarkedForEventResult{}
}

var IsPartitionMarkedForEventResult_Success_DEFAULT bool

func (p *IsPartitionMarkedForEventResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return IsPartitionMarkedForEventResult_Success_DEFAULT
	}
	return *p.Success
}

var IsPartitionMarkedForEventResult_O1_DEFAULT *MetaException

func (p *IsPartitionMarkedForEventResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return IsPartitionMarkedForEventResult_O1_DEFAULT
	}
	return p.O1
}

var IsPartitionMarkedForEventResult_O2_DEFAULT *NoSuchObjectException

func (p *IsPartitionMarkedForEventResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return IsPartitionMarkedForEventResult_O2_DEFAULT
	}
	return p.O2
}

var IsPartitionMarkedForEventResult_O3_DEFAULT *UnknownDBException

func (p *IsPartitionMarkedForEventResult) GetO3() *UnknownDBException {
	if !p.IsSetO3() {
		return IsPartitionMarkedForEventResult_O3_DEFAULT
	}
	return p.O3
}

var IsPartitionMarkedForEventResult_O4_DEFAULT *UnknownTableException

func (p *IsPartitionMarkedForEventResult) GetO4() *UnknownTableException {
	if !p.IsSetO4() {
		return IsPartitionMarkedForEventResult_O4_DEFAULT
	}
	return p.O4
}

var IsPartitionMarkedForEventResult_O5_DEFAULT *UnknownPartitionException

func (p *IsPartitionMarkedForEventResult) GetO5() *UnknownPartitionException {
	if !p.IsSetO5() {
		return IsPartitionMarkedForEventResult_O5_DEFAULT
	}
	return p.O5
}

var IsPartitionMarkedForEventResult_O6_DEFAULT *InvalidPartitionException

func (p *IsPartitionMarkedForEventResult) GetO6() *InvalidPartitionException {
	if !p.IsSetO6() {
		return IsPartitionMarkedForEventResult_O6_DEFAULT
	}
	return p.O6
}
func (p *IsPartitionMarkedForEventResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IsPartitionMarkedForEventResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *IsPartitionMarkedForEventResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *IsPartitionMarkedForEventResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *IsPartitionMarkedForEventResult) IsSetO4() bool {
	return p.O4 != nil
}

func (p *IsPartitionMarkedForEventResult) IsSetO5() bool {
	return p.O5 != nil
}

func (p *IsPartitionMarkedForEventResult) IsSetO6() bool {
	return p.O6 != nil
}

func (p *IsPartitionMarkedForEventResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsPartitionMarkedForEventResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *IsPartitionMarkedForEventResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *IsPartitionMarkedForEventResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *IsPartitionMarkedForEventResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &UnknownDBException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *IsPartitionMarkedForEventResult) ReadField4(iprot thrift.TProtocol) error {
	p.O4 = &UnknownTableException{}
	if err := p.O4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O4, err)
	}
	return nil
}

func (p *IsPartitionMarkedForEventResult) ReadField5(iprot thrift.TProtocol) error {
	p.O5 = &UnknownPartitionException{}
	if err := p.O5.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O5, err)
	}
	return nil
}

func (p *IsPartitionMarkedForEventResult) ReadField6(iprot thrift.TProtocol) error {
	p.O6 = &InvalidPartitionException{}
	if err := p.O6.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O6, err)
	}
	return nil
}

func (p *IsPartitionMarkedForEventResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isPartitionMarkedForEvent_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsPartitionMarkedForEventResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *IsPartitionMarkedForEventResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *IsPartitionMarkedForEventResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *IsPartitionMarkedForEventResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *IsPartitionMarkedForEventResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetO4() {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:o4: %s", p, err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:o4: %s", p, err)
		}
	}
	return err
}

func (p *IsPartitionMarkedForEventResult) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetO5() {
		if err := oprot.WriteFieldBegin("o5", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:o5: %s", p, err)
		}
		if err := p.O5.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O5, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:o5: %s", p, err)
		}
	}
	return err
}

func (p *IsPartitionMarkedForEventResult) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetO6() {
		if err := oprot.WriteFieldBegin("o6", thrift.STRUCT, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:o6: %s", p, err)
		}
		if err := p.O6.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O6, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:o6: %s", p, err)
		}
	}
	return err
}

func (p *IsPartitionMarkedForEventResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsPartitionMarkedForEventResult(%+v)", *p)
}

type AddIndexArgs struct {
	NewIndex_  *Index `thrift:"new_index,1" json:"new_index"`
	IndexTable *Table `thrift:"index_table,2" json:"index_table"`
}

func NewAddIndexArgs() *AddIndexArgs {
	return &AddIndexArgs{}
}

var AddIndexArgs_NewIndex__DEFAULT *Index

func (p *AddIndexArgs) GetNewIndex_() *Index {
	if !p.IsSetNewIndex_() {
		return AddIndexArgs_NewIndex__DEFAULT
	}
	return p.NewIndex_
}

var AddIndexArgs_IndexTable_DEFAULT *Table

func (p *AddIndexArgs) GetIndexTable() *Table {
	if !p.IsSetIndexTable() {
		return AddIndexArgs_IndexTable_DEFAULT
	}
	return p.IndexTable
}
func (p *AddIndexArgs) IsSetNewIndex_() bool {
	return p.NewIndex_ != nil
}

func (p *AddIndexArgs) IsSetIndexTable() bool {
	return p.IndexTable != nil
}

func (p *AddIndexArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddIndexArgs) ReadField1(iprot thrift.TProtocol) error {
	p.NewIndex_ = &Index{}
	if err := p.NewIndex_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewIndex_, err)
	}
	return nil
}

func (p *AddIndexArgs) ReadField2(iprot thrift.TProtocol) error {
	p.IndexTable = &Table{}
	if err := p.IndexTable.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.IndexTable, err)
	}
	return nil
}

func (p *AddIndexArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_index_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddIndexArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_index", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:new_index: %s", p, err)
	}
	if err := p.NewIndex_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewIndex_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:new_index: %s", p, err)
	}
	return err
}

func (p *AddIndexArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index_table", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:index_table: %s", p, err)
	}
	if err := p.IndexTable.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.IndexTable, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:index_table: %s", p, err)
	}
	return err
}

func (p *AddIndexArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddIndexArgs(%+v)", *p)
}

type AddIndexResult struct {
	Success *Index                  `thrift:"success,0" json:"success"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewAddIndexResult() *AddIndexResult {
	return &AddIndexResult{}
}

var AddIndexResult_Success_DEFAULT *Index

func (p *AddIndexResult) GetSuccess() *Index {
	if !p.IsSetSuccess() {
		return AddIndexResult_Success_DEFAULT
	}
	return p.Success
}

var AddIndexResult_O1_DEFAULT *InvalidObjectException

func (p *AddIndexResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return AddIndexResult_O1_DEFAULT
	}
	return p.O1
}

var AddIndexResult_O2_DEFAULT *AlreadyExistsException

func (p *AddIndexResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return AddIndexResult_O2_DEFAULT
	}
	return p.O2
}

var AddIndexResult_O3_DEFAULT *MetaException

func (p *AddIndexResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return AddIndexResult_O3_DEFAULT
	}
	return p.O3
}
func (p *AddIndexResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddIndexResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AddIndexResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AddIndexResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *AddIndexResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddIndexResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Index{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *AddIndexResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AddIndexResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AddIndexResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *AddIndexResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_index_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddIndexResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AddIndexResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AddIndexResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AddIndexResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AddIndexResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddIndexResult(%+v)", *p)
}

type AlterIndexArgs struct {
	Dbname      string `thrift:"dbname,1" json:"dbname"`
	BaseTblName string `thrift:"base_tbl_name,2" json:"base_tbl_name"`
	IdxName     string `thrift:"idx_name,3" json:"idx_name"`
	NewIdx_     *Index `thrift:"new_idx,4" json:"new_idx"`
}

func NewAlterIndexArgs() *AlterIndexArgs {
	return &AlterIndexArgs{}
}

func (p *AlterIndexArgs) GetDbname() string {
	return p.Dbname
}

func (p *AlterIndexArgs) GetBaseTblName() string {
	return p.BaseTblName
}

func (p *AlterIndexArgs) GetIdxName() string {
	return p.IdxName
}

var AlterIndexArgs_NewIdx__DEFAULT *Index

func (p *AlterIndexArgs) GetNewIdx_() *Index {
	if !p.IsSetNewIdx_() {
		return AlterIndexArgs_NewIdx__DEFAULT
	}
	return p.NewIdx_
}
func (p *AlterIndexArgs) IsSetNewIdx_() bool {
	return p.NewIdx_ != nil
}

func (p *AlterIndexArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterIndexArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *AlterIndexArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.BaseTblName = v
	}
	return nil
}

func (p *AlterIndexArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.IdxName = v
	}
	return nil
}

func (p *AlterIndexArgs) ReadField4(iprot thrift.TProtocol) error {
	p.NewIdx_ = &Index{}
	if err := p.NewIdx_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewIdx_, err)
	}
	return nil
}

func (p *AlterIndexArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_index_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterIndexArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *AlterIndexArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("base_tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:base_tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.BaseTblName)); err != nil {
		return fmt.Errorf("%T.base_tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:base_tbl_name: %s", p, err)
	}
	return err
}

func (p *AlterIndexArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idx_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:idx_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IdxName)); err != nil {
		return fmt.Errorf("%T.idx_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:idx_name: %s", p, err)
	}
	return err
}

func (p *AlterIndexArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_idx", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:new_idx: %s", p, err)
	}
	if err := p.NewIdx_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewIdx_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:new_idx: %s", p, err)
	}
	return err
}

func (p *AlterIndexArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterIndexArgs(%+v)", *p)
}

type AlterIndexResult struct {
	O1 *InvalidOperationException `thrift:"o1,1" json:"o1"`
	O2 *MetaException             `thrift:"o2,2" json:"o2"`
}

func NewAlterIndexResult() *AlterIndexResult {
	return &AlterIndexResult{}
}

var AlterIndexResult_O1_DEFAULT *InvalidOperationException

func (p *AlterIndexResult) GetO1() *InvalidOperationException {
	if !p.IsSetO1() {
		return AlterIndexResult_O1_DEFAULT
	}
	return p.O1
}

var AlterIndexResult_O2_DEFAULT *MetaException

func (p *AlterIndexResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return AlterIndexResult_O2_DEFAULT
	}
	return p.O2
}
func (p *AlterIndexResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AlterIndexResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AlterIndexResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterIndexResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidOperationException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AlterIndexResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AlterIndexResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_index_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterIndexResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterIndexResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterIndexResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterIndexResult(%+v)", *p)
}

type DropIndexByNameArgs struct {
	DbName     string `thrift:"db_name,1" json:"db_name"`
	TblName    string `thrift:"tbl_name,2" json:"tbl_name"`
	IndexName  string `thrift:"index_name,3" json:"index_name"`
	DeleteData bool   `thrift:"deleteData,4" json:"deleteData"`
}

func NewDropIndexByNameArgs() *DropIndexByNameArgs {
	return &DropIndexByNameArgs{}
}

func (p *DropIndexByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *DropIndexByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *DropIndexByNameArgs) GetIndexName() string {
	return p.IndexName
}

func (p *DropIndexByNameArgs) GetDeleteData() bool {
	return p.DeleteData
}
func (p *DropIndexByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropIndexByNameArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DropIndexByNameArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *DropIndexByNameArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.IndexName = v
	}
	return nil
}

func (p *DropIndexByNameArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropIndexByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_index_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropIndexByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *DropIndexByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *DropIndexByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:index_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IndexName)); err != nil {
		return fmt.Errorf("%T.index_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:index_name: %s", p, err)
	}
	return err
}

func (p *DropIndexByNameArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:deleteData: %s", p, err)
	}
	return err
}

func (p *DropIndexByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropIndexByNameArgs(%+v)", *p)
}

type DropIndexByNameResult struct {
	Success *bool                  `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewDropIndexByNameResult() *DropIndexByNameResult {
	return &DropIndexByNameResult{}
}

var DropIndexByNameResult_Success_DEFAULT bool

func (p *DropIndexByNameResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DropIndexByNameResult_Success_DEFAULT
	}
	return *p.Success
}

var DropIndexByNameResult_O1_DEFAULT *NoSuchObjectException

func (p *DropIndexByNameResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropIndexByNameResult_O1_DEFAULT
	}
	return p.O1
}

var DropIndexByNameResult_O2_DEFAULT *MetaException

func (p *DropIndexByNameResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return DropIndexByNameResult_O2_DEFAULT
	}
	return p.O2
}
func (p *DropIndexByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DropIndexByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropIndexByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DropIndexByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropIndexByNameResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DropIndexByNameResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropIndexByNameResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DropIndexByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_index_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropIndexByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DropIndexByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropIndexByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropIndexByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropIndexByNameResult(%+v)", *p)
}

type GetIndexByNameArgs struct {
	DbName    string `thrift:"db_name,1" json:"db_name"`
	TblName   string `thrift:"tbl_name,2" json:"tbl_name"`
	IndexName string `thrift:"index_name,3" json:"index_name"`
}

func NewGetIndexByNameArgs() *GetIndexByNameArgs {
	return &GetIndexByNameArgs{}
}

func (p *GetIndexByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *GetIndexByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *GetIndexByNameArgs) GetIndexName() string {
	return p.IndexName
}
func (p *GetIndexByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexByNameArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetIndexByNameArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetIndexByNameArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.IndexName = v
	}
	return nil
}

func (p *GetIndexByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetIndexByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetIndexByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:index_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IndexName)); err != nil {
		return fmt.Errorf("%T.index_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:index_name: %s", p, err)
	}
	return err
}

func (p *GetIndexByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexByNameArgs(%+v)", *p)
}

type GetIndexByNameResult struct {
	Success *Index                 `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetIndexByNameResult() *GetIndexByNameResult {
	return &GetIndexByNameResult{}
}

var GetIndexByNameResult_Success_DEFAULT *Index

func (p *GetIndexByNameResult) GetSuccess() *Index {
	if !p.IsSetSuccess() {
		return GetIndexByNameResult_Success_DEFAULT
	}
	return p.Success
}

var GetIndexByNameResult_O1_DEFAULT *MetaException

func (p *GetIndexByNameResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetIndexByNameResult_O1_DEFAULT
	}
	return p.O1
}

var GetIndexByNameResult_O2_DEFAULT *NoSuchObjectException

func (p *GetIndexByNameResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetIndexByNameResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetIndexByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetIndexByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetIndexByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetIndexByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexByNameResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Index{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetIndexByNameResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetIndexByNameResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetIndexByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexByNameResult(%+v)", *p)
}

type GetIndexesArgs struct {
	DbName     string `thrift:"db_name,1" json:"db_name"`
	TblName    string `thrift:"tbl_name,2" json:"tbl_name"`
	MaxIndexes int16  `thrift:"max_indexes,3" json:"max_indexes"`
}

func NewGetIndexesArgs() *GetIndexesArgs {
	return &GetIndexesArgs{
		MaxIndexes: -1,
	}
}

func (p *GetIndexesArgs) GetDbName() string {
	return p.DbName
}

func (p *GetIndexesArgs) GetTblName() string {
	return p.TblName
}

func (p *GetIndexesArgs) GetMaxIndexes() int16 {
	return p.MaxIndexes
}
func (p *GetIndexesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetIndexesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetIndexesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxIndexes = v
	}
	return nil
}

func (p *GetIndexesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_indexes_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetIndexesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetIndexesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_indexes", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_indexes: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxIndexes)); err != nil {
		return fmt.Errorf("%T.max_indexes (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_indexes: %s", p, err)
	}
	return err
}

func (p *GetIndexesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexesArgs(%+v)", *p)
}

type GetIndexesResult struct {
	Success []*Index               `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewGetIndexesResult() *GetIndexesResult {
	return &GetIndexesResult{}
}

var GetIndexesResult_Success_DEFAULT []*Index

func (p *GetIndexesResult) GetSuccess() []*Index {
	return p.Success
}

var GetIndexesResult_O1_DEFAULT *NoSuchObjectException

func (p *GetIndexesResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return GetIndexesResult_O1_DEFAULT
	}
	return p.O1
}

var GetIndexesResult_O2_DEFAULT *MetaException

func (p *GetIndexesResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetIndexesResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetIndexesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetIndexesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetIndexesResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetIndexesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Index, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem319 := &Index{}
		if err := _elem319.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem319, err)
		}
		p.Success = append(p.Success, _elem319)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetIndexesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetIndexesResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetIndexesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_indexes_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexesResult(%+v)", *p)
}

type GetIndexNamesArgs struct {
	DbName     string `thrift:"db_name,1" json:"db_name"`
	TblName    string `thrift:"tbl_name,2" json:"tbl_name"`
	MaxIndexes int16  `thrift:"max_indexes,3" json:"max_indexes"`
}

func NewGetIndexNamesArgs() *GetIndexNamesArgs {
	return &GetIndexNamesArgs{
		MaxIndexes: -1,
	}
}

func (p *GetIndexNamesArgs) GetDbName() string {
	return p.DbName
}

func (p *GetIndexNamesArgs) GetTblName() string {
	return p.TblName
}

func (p *GetIndexNamesArgs) GetMaxIndexes() int16 {
	return p.MaxIndexes
}
func (p *GetIndexNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexNamesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetIndexNamesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetIndexNamesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxIndexes = v
	}
	return nil
}

func (p *GetIndexNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_names_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetIndexNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetIndexNamesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_indexes", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_indexes: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxIndexes)); err != nil {
		return fmt.Errorf("%T.max_indexes (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_indexes: %s", p, err)
	}
	return err
}

func (p *GetIndexNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexNamesArgs(%+v)", *p)
}

type GetIndexNamesResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O2      *MetaException `thrift:"o2,1" json:"o2"`
}

func NewGetIndexNamesResult() *GetIndexNamesResult {
	return &GetIndexNamesResult{}
}

var GetIndexNamesResult_Success_DEFAULT []string

func (p *GetIndexNamesResult) GetSuccess() []string {
	return p.Success
}

var GetIndexNamesResult_O2_DEFAULT *MetaException

func (p *GetIndexNamesResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetIndexNamesResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetIndexNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetIndexNamesResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetIndexNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexNamesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem320 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem320 = v
		}
		p.Success = append(p.Success, _elem320)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetIndexNamesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetIndexNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_names_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexNamesResult(%+v)", *p)
}

type UpdateTableColumnStatisticsArgs struct {
	StatsObj *ColumnStatistics `thrift:"stats_obj,1" json:"stats_obj"`
}

func NewUpdateTableColumnStatisticsArgs() *UpdateTableColumnStatisticsArgs {
	return &UpdateTableColumnStatisticsArgs{}
}

var UpdateTableColumnStatisticsArgs_StatsObj_DEFAULT *ColumnStatistics

func (p *UpdateTableColumnStatisticsArgs) GetStatsObj() *ColumnStatistics {
	if !p.IsSetStatsObj() {
		return UpdateTableColumnStatisticsArgs_StatsObj_DEFAULT
	}
	return p.StatsObj
}
func (p *UpdateTableColumnStatisticsArgs) IsSetStatsObj() bool {
	return p.StatsObj != nil
}

func (p *UpdateTableColumnStatisticsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateTableColumnStatisticsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.StatsObj = &ColumnStatistics{}
	if err := p.StatsObj.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.StatsObj, err)
	}
	return nil
}

func (p *UpdateTableColumnStatisticsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_table_column_statistics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateTableColumnStatisticsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stats_obj", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:stats_obj: %s", p, err)
	}
	if err := p.StatsObj.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.StatsObj, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:stats_obj: %s", p, err)
	}
	return err
}

func (p *UpdateTableColumnStatisticsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTableColumnStatisticsArgs(%+v)", *p)
}

type UpdateTableColumnStatisticsResult struct {
	Success *bool                   `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException  `thrift:"o1,1" json:"o1"`
	O2      *InvalidObjectException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
	O4      *InvalidInputException  `thrift:"o4,4" json:"o4"`
}

func NewUpdateTableColumnStatisticsResult() *UpdateTableColumnStatisticsResult {
	return &UpdateTableColumnStatisticsResult{}
}

var UpdateTableColumnStatisticsResult_Success_DEFAULT bool

func (p *UpdateTableColumnStatisticsResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return UpdateTableColumnStatisticsResult_Success_DEFAULT
	}
	return *p.Success
}

var UpdateTableColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException

func (p *UpdateTableColumnStatisticsResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return UpdateTableColumnStatisticsResult_O1_DEFAULT
	}
	return p.O1
}

var UpdateTableColumnStatisticsResult_O2_DEFAULT *InvalidObjectException

func (p *UpdateTableColumnStatisticsResult) GetO2() *InvalidObjectException {
	if !p.IsSetO2() {
		return UpdateTableColumnStatisticsResult_O2_DEFAULT
	}
	return p.O2
}

var UpdateTableColumnStatisticsResult_O3_DEFAULT *MetaException

func (p *UpdateTableColumnStatisticsResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return UpdateTableColumnStatisticsResult_O3_DEFAULT
	}
	return p.O3
}

var UpdateTableColumnStatisticsResult_O4_DEFAULT *InvalidInputException

func (p *UpdateTableColumnStatisticsResult) GetO4() *InvalidInputException {
	if !p.IsSetO4() {
		return UpdateTableColumnStatisticsResult_O4_DEFAULT
	}
	return p.O4
}
func (p *UpdateTableColumnStatisticsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateTableColumnStatisticsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *UpdateTableColumnStatisticsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *UpdateTableColumnStatisticsResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *UpdateTableColumnStatisticsResult) IsSetO4() bool {
	return p.O4 != nil
}

func (p *UpdateTableColumnStatisticsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateTableColumnStatisticsResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UpdateTableColumnStatisticsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *UpdateTableColumnStatisticsResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *UpdateTableColumnStatisticsResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *UpdateTableColumnStatisticsResult) ReadField4(iprot thrift.TProtocol) error {
	p.O4 = &InvalidInputException{}
	if err := p.O4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O4, err)
	}
	return nil
}

func (p *UpdateTableColumnStatisticsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_table_column_statistics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateTableColumnStatisticsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UpdateTableColumnStatisticsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *UpdateTableColumnStatisticsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *UpdateTableColumnStatisticsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *UpdateTableColumnStatisticsResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetO4() {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:o4: %s", p, err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:o4: %s", p, err)
		}
	}
	return err
}

func (p *UpdateTableColumnStatisticsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTableColumnStatisticsResult(%+v)", *p)
}

type UpdatePartitionColumnStatisticsArgs struct {
	StatsObj *ColumnStatistics `thrift:"stats_obj,1" json:"stats_obj"`
}

func NewUpdatePartitionColumnStatisticsArgs() *UpdatePartitionColumnStatisticsArgs {
	return &UpdatePartitionColumnStatisticsArgs{}
}

var UpdatePartitionColumnStatisticsArgs_StatsObj_DEFAULT *ColumnStatistics

func (p *UpdatePartitionColumnStatisticsArgs) GetStatsObj() *ColumnStatistics {
	if !p.IsSetStatsObj() {
		return UpdatePartitionColumnStatisticsArgs_StatsObj_DEFAULT
	}
	return p.StatsObj
}
func (p *UpdatePartitionColumnStatisticsArgs) IsSetStatsObj() bool {
	return p.StatsObj != nil
}

func (p *UpdatePartitionColumnStatisticsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdatePartitionColumnStatisticsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.StatsObj = &ColumnStatistics{}
	if err := p.StatsObj.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.StatsObj, err)
	}
	return nil
}

func (p *UpdatePartitionColumnStatisticsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_partition_column_statistics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdatePartitionColumnStatisticsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stats_obj", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:stats_obj: %s", p, err)
	}
	if err := p.StatsObj.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.StatsObj, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:stats_obj: %s", p, err)
	}
	return err
}

func (p *UpdatePartitionColumnStatisticsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePartitionColumnStatisticsArgs(%+v)", *p)
}

type UpdatePartitionColumnStatisticsResult struct {
	Success *bool                   `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException  `thrift:"o1,1" json:"o1"`
	O2      *InvalidObjectException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
	O4      *InvalidInputException  `thrift:"o4,4" json:"o4"`
}

func NewUpdatePartitionColumnStatisticsResult() *UpdatePartitionColumnStatisticsResult {
	return &UpdatePartitionColumnStatisticsResult{}
}

var UpdatePartitionColumnStatisticsResult_Success_DEFAULT bool

func (p *UpdatePartitionColumnStatisticsResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return UpdatePartitionColumnStatisticsResult_Success_DEFAULT
	}
	return *p.Success
}

var UpdatePartitionColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException

func (p *UpdatePartitionColumnStatisticsResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return UpdatePartitionColumnStatisticsResult_O1_DEFAULT
	}
	return p.O1
}

var UpdatePartitionColumnStatisticsResult_O2_DEFAULT *InvalidObjectException

func (p *UpdatePartitionColumnStatisticsResult) GetO2() *InvalidObjectException {
	if !p.IsSetO2() {
		return UpdatePartitionColumnStatisticsResult_O2_DEFAULT
	}
	return p.O2
}

var UpdatePartitionColumnStatisticsResult_O3_DEFAULT *MetaException

func (p *UpdatePartitionColumnStatisticsResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return UpdatePartitionColumnStatisticsResult_O3_DEFAULT
	}
	return p.O3
}

var UpdatePartitionColumnStatisticsResult_O4_DEFAULT *InvalidInputException

func (p *UpdatePartitionColumnStatisticsResult) GetO4() *InvalidInputException {
	if !p.IsSetO4() {
		return UpdatePartitionColumnStatisticsResult_O4_DEFAULT
	}
	return p.O4
}
func (p *UpdatePartitionColumnStatisticsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdatePartitionColumnStatisticsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *UpdatePartitionColumnStatisticsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *UpdatePartitionColumnStatisticsResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *UpdatePartitionColumnStatisticsResult) IsSetO4() bool {
	return p.O4 != nil
}

func (p *UpdatePartitionColumnStatisticsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdatePartitionColumnStatisticsResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UpdatePartitionColumnStatisticsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *UpdatePartitionColumnStatisticsResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *UpdatePartitionColumnStatisticsResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *UpdatePartitionColumnStatisticsResult) ReadField4(iprot thrift.TProtocol) error {
	p.O4 = &InvalidInputException{}
	if err := p.O4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O4, err)
	}
	return nil
}

func (p *UpdatePartitionColumnStatisticsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_partition_column_statistics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdatePartitionColumnStatisticsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UpdatePartitionColumnStatisticsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *UpdatePartitionColumnStatisticsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *UpdatePartitionColumnStatisticsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *UpdatePartitionColumnStatisticsResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetO4() {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:o4: %s", p, err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:o4: %s", p, err)
		}
	}
	return err
}

func (p *UpdatePartitionColumnStatisticsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePartitionColumnStatisticsResult(%+v)", *p)
}

type GetTableColumnStatisticsArgs struct {
	DbName  string `thrift:"db_name,1" json:"db_name"`
	TblName string `thrift:"tbl_name,2" json:"tbl_name"`
	ColName string `thrift:"col_name,3" json:"col_name"`
}

func NewGetTableColumnStatisticsArgs() *GetTableColumnStatisticsArgs {
	return &GetTableColumnStatisticsArgs{}
}

func (p *GetTableColumnStatisticsArgs) GetDbName() string {
	return p.DbName
}

func (p *GetTableColumnStatisticsArgs) GetTblName() string {
	return p.TblName
}

func (p *GetTableColumnStatisticsArgs) GetColName() string {
	return p.ColName
}
func (p *GetTableColumnStatisticsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableColumnStatisticsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetTableColumnStatisticsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetTableColumnStatisticsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ColName = v
	}
	return nil
}

func (p *GetTableColumnStatisticsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_column_statistics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableColumnStatisticsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetTableColumnStatisticsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetTableColumnStatisticsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("col_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:col_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ColName)); err != nil {
		return fmt.Errorf("%T.col_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:col_name: %s", p, err)
	}
	return err
}

func (p *GetTableColumnStatisticsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableColumnStatisticsArgs(%+v)", *p)
}

type GetTableColumnStatisticsResult struct {
	Success *ColumnStatistics       `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException  `thrift:"o1,1" json:"o1"`
	O2      *MetaException          `thrift:"o2,2" json:"o2"`
	O3      *InvalidInputException  `thrift:"o3,3" json:"o3"`
	O4      *InvalidObjectException `thrift:"o4,4" json:"o4"`
}

func NewGetTableColumnStatisticsResult() *GetTableColumnStatisticsResult {
	return &GetTableColumnStatisticsResult{}
}

var GetTableColumnStatisticsResult_Success_DEFAULT *ColumnStatistics

func (p *GetTableColumnStatisticsResult) GetSuccess() *ColumnStatistics {
	if !p.IsSetSuccess() {
		return GetTableColumnStatisticsResult_Success_DEFAULT
	}
	return p.Success
}

var GetTableColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException

func (p *GetTableColumnStatisticsResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return GetTableColumnStatisticsResult_O1_DEFAULT
	}
	return p.O1
}

var GetTableColumnStatisticsResult_O2_DEFAULT *MetaException

func (p *GetTableColumnStatisticsResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetTableColumnStatisticsResult_O2_DEFAULT
	}
	return p.O2
}

var GetTableColumnStatisticsResult_O3_DEFAULT *InvalidInputException

func (p *GetTableColumnStatisticsResult) GetO3() *InvalidInputException {
	if !p.IsSetO3() {
		return GetTableColumnStatisticsResult_O3_DEFAULT
	}
	return p.O3
}

var GetTableColumnStatisticsResult_O4_DEFAULT *InvalidObjectException

func (p *GetTableColumnStatisticsResult) GetO4() *InvalidObjectException {
	if !p.IsSetO4() {
		return GetTableColumnStatisticsResult_O4_DEFAULT
	}
	return p.O4
}
func (p *GetTableColumnStatisticsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTableColumnStatisticsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetTableColumnStatisticsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetTableColumnStatisticsResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *GetTableColumnStatisticsResult) IsSetO4() bool {
	return p.O4 != nil
}

func (p *GetTableColumnStatisticsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableColumnStatisticsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ColumnStatistics{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetTableColumnStatisticsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetTableColumnStatisticsResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetTableColumnStatisticsResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &InvalidInputException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *GetTableColumnStatisticsResult) ReadField4(iprot thrift.TProtocol) error {
	p.O4 = &InvalidObjectException{}
	if err := p.O4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O4, err)
	}
	return nil
}

func (p *GetTableColumnStatisticsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_column_statistics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableColumnStatisticsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTableColumnStatisticsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetTableColumnStatisticsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetTableColumnStatisticsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *GetTableColumnStatisticsResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetO4() {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:o4: %s", p, err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:o4: %s", p, err)
		}
	}
	return err
}

func (p *GetTableColumnStatisticsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableColumnStatisticsResult(%+v)", *p)
}

type GetPartitionColumnStatisticsArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	PartName string `thrift:"part_name,3" json:"part_name"`
	ColName  string `thrift:"col_name,4" json:"col_name"`
}

func NewGetPartitionColumnStatisticsArgs() *GetPartitionColumnStatisticsArgs {
	return &GetPartitionColumnStatisticsArgs{}
}

func (p *GetPartitionColumnStatisticsArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionColumnStatisticsArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionColumnStatisticsArgs) GetPartName() string {
	return p.PartName
}

func (p *GetPartitionColumnStatisticsArgs) GetColName() string {
	return p.ColName
}
func (p *GetPartitionColumnStatisticsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionColumnStatisticsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionColumnStatisticsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionColumnStatisticsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *GetPartitionColumnStatisticsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ColName = v
	}
	return nil
}

func (p *GetPartitionColumnStatisticsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_column_statistics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionColumnStatisticsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionColumnStatisticsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionColumnStatisticsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionColumnStatisticsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("col_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:col_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ColName)); err != nil {
		return fmt.Errorf("%T.col_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:col_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionColumnStatisticsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionColumnStatisticsArgs(%+v)", *p)
}

type GetPartitionColumnStatisticsResult struct {
	Success *ColumnStatistics       `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException  `thrift:"o1,1" json:"o1"`
	O2      *MetaException          `thrift:"o2,2" json:"o2"`
	O3      *InvalidInputException  `thrift:"o3,3" json:"o3"`
	O4      *InvalidObjectException `thrift:"o4,4" json:"o4"`
}

func NewGetPartitionColumnStatisticsResult() *GetPartitionColumnStatisticsResult {
	return &GetPartitionColumnStatisticsResult{}
}

var GetPartitionColumnStatisticsResult_Success_DEFAULT *ColumnStatistics

func (p *GetPartitionColumnStatisticsResult) GetSuccess() *ColumnStatistics {
	if !p.IsSetSuccess() {
		return GetPartitionColumnStatisticsResult_Success_DEFAULT
	}
	return p.Success
}

var GetPartitionColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException

func (p *GetPartitionColumnStatisticsResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return GetPartitionColumnStatisticsResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionColumnStatisticsResult_O2_DEFAULT *MetaException

func (p *GetPartitionColumnStatisticsResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetPartitionColumnStatisticsResult_O2_DEFAULT
	}
	return p.O2
}

var GetPartitionColumnStatisticsResult_O3_DEFAULT *InvalidInputException

func (p *GetPartitionColumnStatisticsResult) GetO3() *InvalidInputException {
	if !p.IsSetO3() {
		return GetPartitionColumnStatisticsResult_O3_DEFAULT
	}
	return p.O3
}

var GetPartitionColumnStatisticsResult_O4_DEFAULT *InvalidObjectException

func (p *GetPartitionColumnStatisticsResult) GetO4() *InvalidObjectException {
	if !p.IsSetO4() {
		return GetPartitionColumnStatisticsResult_O4_DEFAULT
	}
	return p.O4
}
func (p *GetPartitionColumnStatisticsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionColumnStatisticsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionColumnStatisticsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionColumnStatisticsResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *GetPartitionColumnStatisticsResult) IsSetO4() bool {
	return p.O4 != nil
}

func (p *GetPartitionColumnStatisticsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionColumnStatisticsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ColumnStatistics{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPartitionColumnStatisticsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionColumnStatisticsResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionColumnStatisticsResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &InvalidInputException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *GetPartitionColumnStatisticsResult) ReadField4(iprot thrift.TProtocol) error {
	p.O4 = &InvalidObjectException{}
	if err := p.O4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O4, err)
	}
	return nil
}

func (p *GetPartitionColumnStatisticsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_column_statistics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionColumnStatisticsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionColumnStatisticsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionColumnStatisticsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionColumnStatisticsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionColumnStatisticsResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetO4() {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:o4: %s", p, err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:o4: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionColumnStatisticsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionColumnStatisticsResult(%+v)", *p)
}

type GetTableStatisticsReqArgs struct {
	Request *TableStatsRequest `thrift:"request,1" json:"request"`
}

func NewGetTableStatisticsReqArgs() *GetTableStatisticsReqArgs {
	return &GetTableStatisticsReqArgs{}
}

var GetTableStatisticsReqArgs_Request_DEFAULT *TableStatsRequest

func (p *GetTableStatisticsReqArgs) GetRequest() *TableStatsRequest {
	if !p.IsSetRequest() {
		return GetTableStatisticsReqArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetTableStatisticsReqArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetTableStatisticsReqArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableStatisticsReqArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &TableStatsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetTableStatisticsReqArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_statistics_req_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableStatisticsReqArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetTableStatisticsReqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableStatisticsReqArgs(%+v)", *p)
}

type GetTableStatisticsReqResult struct {
	Success *TableStatsResult_     `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewGetTableStatisticsReqResult() *GetTableStatisticsReqResult {
	return &GetTableStatisticsReqResult{}
}

var GetTableStatisticsReqResult_Success_DEFAULT *TableStatsResult_

func (p *GetTableStatisticsReqResult) GetSuccess() *TableStatsResult_ {
	if !p.IsSetSuccess() {
		return GetTableStatisticsReqResult_Success_DEFAULT
	}
	return p.Success
}

var GetTableStatisticsReqResult_O1_DEFAULT *NoSuchObjectException

func (p *GetTableStatisticsReqResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return GetTableStatisticsReqResult_O1_DEFAULT
	}
	return p.O1
}

var GetTableStatisticsReqResult_O2_DEFAULT *MetaException

func (p *GetTableStatisticsReqResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetTableStatisticsReqResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetTableStatisticsReqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTableStatisticsReqResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetTableStatisticsReqResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetTableStatisticsReqResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableStatisticsReqResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TableStatsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetTableStatisticsReqResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetTableStatisticsReqResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetTableStatisticsReqResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_statistics_req_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableStatisticsReqResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTableStatisticsReqResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetTableStatisticsReqResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetTableStatisticsReqResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableStatisticsReqResult(%+v)", *p)
}

type GetPartitionsStatisticsReqArgs struct {
	Request *PartitionsStatsRequest `thrift:"request,1" json:"request"`
}

func NewGetPartitionsStatisticsReqArgs() *GetPartitionsStatisticsReqArgs {
	return &GetPartitionsStatisticsReqArgs{}
}

var GetPartitionsStatisticsReqArgs_Request_DEFAULT *PartitionsStatsRequest

func (p *GetPartitionsStatisticsReqArgs) GetRequest() *PartitionsStatsRequest {
	if !p.IsSetRequest() {
		return GetPartitionsStatisticsReqArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetPartitionsStatisticsReqArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetPartitionsStatisticsReqArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsStatisticsReqArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &PartitionsStatsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetPartitionsStatisticsReqArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_statistics_req_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsStatisticsReqArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetPartitionsStatisticsReqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsStatisticsReqArgs(%+v)", *p)
}

type GetPartitionsStatisticsReqResult struct {
	Success *PartitionsStatsResult_ `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException  `thrift:"o1,1" json:"o1"`
	O2      *MetaException          `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionsStatisticsReqResult() *GetPartitionsStatisticsReqResult {
	return &GetPartitionsStatisticsReqResult{}
}

var GetPartitionsStatisticsReqResult_Success_DEFAULT *PartitionsStatsResult_

func (p *GetPartitionsStatisticsReqResult) GetSuccess() *PartitionsStatsResult_ {
	if !p.IsSetSuccess() {
		return GetPartitionsStatisticsReqResult_Success_DEFAULT
	}
	return p.Success
}

var GetPartitionsStatisticsReqResult_O1_DEFAULT *NoSuchObjectException

func (p *GetPartitionsStatisticsReqResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return GetPartitionsStatisticsReqResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionsStatisticsReqResult_O2_DEFAULT *MetaException

func (p *GetPartitionsStatisticsReqResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetPartitionsStatisticsReqResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionsStatisticsReqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionsStatisticsReqResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionsStatisticsReqResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionsStatisticsReqResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsStatisticsReqResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PartitionsStatsResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPartitionsStatisticsReqResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionsStatisticsReqResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionsStatisticsReqResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_statistics_req_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsStatisticsReqResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsStatisticsReqResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsStatisticsReqResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsStatisticsReqResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsStatisticsReqResult(%+v)", *p)
}

type DeletePartitionColumnStatisticsArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	PartName string `thrift:"part_name,3" json:"part_name"`
	ColName  string `thrift:"col_name,4" json:"col_name"`
}

func NewDeletePartitionColumnStatisticsArgs() *DeletePartitionColumnStatisticsArgs {
	return &DeletePartitionColumnStatisticsArgs{}
}

func (p *DeletePartitionColumnStatisticsArgs) GetDbName() string {
	return p.DbName
}

func (p *DeletePartitionColumnStatisticsArgs) GetTblName() string {
	return p.TblName
}

func (p *DeletePartitionColumnStatisticsArgs) GetPartName() string {
	return p.PartName
}

func (p *DeletePartitionColumnStatisticsArgs) GetColName() string {
	return p.ColName
}
func (p *DeletePartitionColumnStatisticsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeletePartitionColumnStatisticsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DeletePartitionColumnStatisticsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *DeletePartitionColumnStatisticsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *DeletePartitionColumnStatisticsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ColName = v
	}
	return nil
}

func (p *DeletePartitionColumnStatisticsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delete_partition_column_statistics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeletePartitionColumnStatisticsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *DeletePartitionColumnStatisticsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *DeletePartitionColumnStatisticsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_name: %s", p, err)
	}
	return err
}

func (p *DeletePartitionColumnStatisticsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("col_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:col_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ColName)); err != nil {
		return fmt.Errorf("%T.col_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:col_name: %s", p, err)
	}
	return err
}

func (p *DeletePartitionColumnStatisticsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePartitionColumnStatisticsArgs(%+v)", *p)
}

type DeletePartitionColumnStatisticsResult struct {
	Success *bool                   `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException  `thrift:"o1,1" json:"o1"`
	O2      *MetaException          `thrift:"o2,2" json:"o2"`
	O3      *InvalidObjectException `thrift:"o3,3" json:"o3"`
	O4      *InvalidInputException  `thrift:"o4,4" json:"o4"`
}

func NewDeletePartitionColumnStatisticsResult() *DeletePartitionColumnStatisticsResult {
	return &DeletePartitionColumnStatisticsResult{}
}

var DeletePartitionColumnStatisticsResult_Success_DEFAULT bool

func (p *DeletePartitionColumnStatisticsResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DeletePartitionColumnStatisticsResult_Success_DEFAULT
	}
	return *p.Success
}

var DeletePartitionColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException

func (p *DeletePartitionColumnStatisticsResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DeletePartitionColumnStatisticsResult_O1_DEFAULT
	}
	return p.O1
}

var DeletePartitionColumnStatisticsResult_O2_DEFAULT *MetaException

func (p *DeletePartitionColumnStatisticsResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return DeletePartitionColumnStatisticsResult_O2_DEFAULT
	}
	return p.O2
}

var DeletePartitionColumnStatisticsResult_O3_DEFAULT *InvalidObjectException

func (p *DeletePartitionColumnStatisticsResult) GetO3() *InvalidObjectException {
	if !p.IsSetO3() {
		return DeletePartitionColumnStatisticsResult_O3_DEFAULT
	}
	return p.O3
}

var DeletePartitionColumnStatisticsResult_O4_DEFAULT *InvalidInputException

func (p *DeletePartitionColumnStatisticsResult) GetO4() *InvalidInputException {
	if !p.IsSetO4() {
		return DeletePartitionColumnStatisticsResult_O4_DEFAULT
	}
	return p.O4
}
func (p *DeletePartitionColumnStatisticsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeletePartitionColumnStatisticsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DeletePartitionColumnStatisticsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DeletePartitionColumnStatisticsResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *DeletePartitionColumnStatisticsResult) IsSetO4() bool {
	return p.O4 != nil
}

func (p *DeletePartitionColumnStatisticsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeletePartitionColumnStatisticsResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DeletePartitionColumnStatisticsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DeletePartitionColumnStatisticsResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DeletePartitionColumnStatisticsResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &InvalidObjectException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *DeletePartitionColumnStatisticsResult) ReadField4(iprot thrift.TProtocol) error {
	p.O4 = &InvalidInputException{}
	if err := p.O4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O4, err)
	}
	return nil
}

func (p *DeletePartitionColumnStatisticsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delete_partition_column_statistics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeletePartitionColumnStatisticsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DeletePartitionColumnStatisticsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DeletePartitionColumnStatisticsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DeletePartitionColumnStatisticsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *DeletePartitionColumnStatisticsResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetO4() {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:o4: %s", p, err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:o4: %s", p, err)
		}
	}
	return err
}

func (p *DeletePartitionColumnStatisticsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePartitionColumnStatisticsResult(%+v)", *p)
}

type DeleteTableColumnStatisticsArgs struct {
	DbName  string `thrift:"db_name,1" json:"db_name"`
	TblName string `thrift:"tbl_name,2" json:"tbl_name"`
	ColName string `thrift:"col_name,3" json:"col_name"`
}

func NewDeleteTableColumnStatisticsArgs() *DeleteTableColumnStatisticsArgs {
	return &DeleteTableColumnStatisticsArgs{}
}

func (p *DeleteTableColumnStatisticsArgs) GetDbName() string {
	return p.DbName
}

func (p *DeleteTableColumnStatisticsArgs) GetTblName() string {
	return p.TblName
}

func (p *DeleteTableColumnStatisticsArgs) GetColName() string {
	return p.ColName
}
func (p *DeleteTableColumnStatisticsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTableColumnStatisticsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DeleteTableColumnStatisticsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *DeleteTableColumnStatisticsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ColName = v
	}
	return nil
}

func (p *DeleteTableColumnStatisticsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delete_table_column_statistics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTableColumnStatisticsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *DeleteTableColumnStatisticsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *DeleteTableColumnStatisticsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("col_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:col_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ColName)); err != nil {
		return fmt.Errorf("%T.col_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:col_name: %s", p, err)
	}
	return err
}

func (p *DeleteTableColumnStatisticsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTableColumnStatisticsArgs(%+v)", *p)
}

type DeleteTableColumnStatisticsResult struct {
	Success *bool                   `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException  `thrift:"o1,1" json:"o1"`
	O2      *MetaException          `thrift:"o2,2" json:"o2"`
	O3      *InvalidObjectException `thrift:"o3,3" json:"o3"`
	O4      *InvalidInputException  `thrift:"o4,4" json:"o4"`
}

func NewDeleteTableColumnStatisticsResult() *DeleteTableColumnStatisticsResult {
	return &DeleteTableColumnStatisticsResult{}
}

var DeleteTableColumnStatisticsResult_Success_DEFAULT bool

func (p *DeleteTableColumnStatisticsResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DeleteTableColumnStatisticsResult_Success_DEFAULT
	}
	return *p.Success
}

var DeleteTableColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException

func (p *DeleteTableColumnStatisticsResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DeleteTableColumnStatisticsResult_O1_DEFAULT
	}
	return p.O1
}

var DeleteTableColumnStatisticsResult_O2_DEFAULT *MetaException

func (p *DeleteTableColumnStatisticsResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return DeleteTableColumnStatisticsResult_O2_DEFAULT
	}
	return p.O2
}

var DeleteTableColumnStatisticsResult_O3_DEFAULT *InvalidObjectException

func (p *DeleteTableColumnStatisticsResult) GetO3() *InvalidObjectException {
	if !p.IsSetO3() {
		return DeleteTableColumnStatisticsResult_O3_DEFAULT
	}
	return p.O3
}

var DeleteTableColumnStatisticsResult_O4_DEFAULT *InvalidInputException

func (p *DeleteTableColumnStatisticsResult) GetO4() *InvalidInputException {
	if !p.IsSetO4() {
		return DeleteTableColumnStatisticsResult_O4_DEFAULT
	}
	return p.O4
}
func (p *DeleteTableColumnStatisticsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteTableColumnStatisticsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DeleteTableColumnStatisticsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DeleteTableColumnStatisticsResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *DeleteTableColumnStatisticsResult) IsSetO4() bool {
	return p.O4 != nil
}

func (p *DeleteTableColumnStatisticsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTableColumnStatisticsResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DeleteTableColumnStatisticsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DeleteTableColumnStatisticsResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DeleteTableColumnStatisticsResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &InvalidObjectException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *DeleteTableColumnStatisticsResult) ReadField4(iprot thrift.TProtocol) error {
	p.O4 = &InvalidInputException{}
	if err := p.O4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O4, err)
	}
	return nil
}

func (p *DeleteTableColumnStatisticsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delete_table_column_statistics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTableColumnStatisticsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DeleteTableColumnStatisticsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DeleteTableColumnStatisticsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DeleteTableColumnStatisticsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *DeleteTableColumnStatisticsResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetO4() {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:o4: %s", p, err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:o4: %s", p, err)
		}
	}
	return err
}

func (p *DeleteTableColumnStatisticsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTableColumnStatisticsResult(%+v)", *p)
}

type CreateFunctionArgs struct {
	FuncA1 *Function `thrift:"func,1" json:"func"`
}

func NewCreateFunctionArgs() *CreateFunctionArgs {
	return &CreateFunctionArgs{}
}

var CreateFunctionArgs_FuncA1_DEFAULT *Function

func (p *CreateFunctionArgs) GetFuncA1() *Function {
	if !p.IsSetFuncA1() {
		return CreateFunctionArgs_FuncA1_DEFAULT
	}
	return p.FuncA1
}
func (p *CreateFunctionArgs) IsSetFuncA1() bool {
	return p.FuncA1 != nil
}

func (p *CreateFunctionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateFunctionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.FuncA1 = &Function{}
	if err := p.FuncA1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.FuncA1, err)
	}
	return nil
}

func (p *CreateFunctionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_function_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateFunctionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("func", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:func: %s", p, err)
	}
	if err := p.FuncA1.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.FuncA1, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:func: %s", p, err)
	}
	return err
}

func (p *CreateFunctionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFunctionArgs(%+v)", *p)
}

type CreateFunctionResult struct {
	O1 *AlreadyExistsException `thrift:"o1,1" json:"o1"`
	O2 *InvalidObjectException `thrift:"o2,2" json:"o2"`
	O3 *MetaException          `thrift:"o3,3" json:"o3"`
	O4 *NoSuchObjectException  `thrift:"o4,4" json:"o4"`
}

func NewCreateFunctionResult() *CreateFunctionResult {
	return &CreateFunctionResult{}
}

var CreateFunctionResult_O1_DEFAULT *AlreadyExistsException

func (p *CreateFunctionResult) GetO1() *AlreadyExistsException {
	if !p.IsSetO1() {
		return CreateFunctionResult_O1_DEFAULT
	}
	return p.O1
}

var CreateFunctionResult_O2_DEFAULT *InvalidObjectException

func (p *CreateFunctionResult) GetO2() *InvalidObjectException {
	if !p.IsSetO2() {
		return CreateFunctionResult_O2_DEFAULT
	}
	return p.O2
}

var CreateFunctionResult_O3_DEFAULT *MetaException

func (p *CreateFunctionResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return CreateFunctionResult_O3_DEFAULT
	}
	return p.O3
}

var CreateFunctionResult_O4_DEFAULT *NoSuchObjectException

func (p *CreateFunctionResult) GetO4() *NoSuchObjectException {
	if !p.IsSetO4() {
		return CreateFunctionResult_O4_DEFAULT
	}
	return p.O4
}
func (p *CreateFunctionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *CreateFunctionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *CreateFunctionResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *CreateFunctionResult) IsSetO4() bool {
	return p.O4 != nil
}

func (p *CreateFunctionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateFunctionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &AlreadyExistsException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *CreateFunctionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *CreateFunctionResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *CreateFunctionResult) ReadField4(iprot thrift.TProtocol) error {
	p.O4 = &NoSuchObjectException{}
	if err := p.O4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O4, err)
	}
	return nil
}

func (p *CreateFunctionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_function_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateFunctionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CreateFunctionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *CreateFunctionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *CreateFunctionResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetO4() {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:o4: %s", p, err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:o4: %s", p, err)
		}
	}
	return err
}

func (p *CreateFunctionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFunctionResult(%+v)", *p)
}

type DropFunctionArgs struct {
	DbName   string `thrift:"dbName,1" json:"dbName"`
	FuncName string `thrift:"funcName,2" json:"funcName"`
}

func NewDropFunctionArgs() *DropFunctionArgs {
	return &DropFunctionArgs{}
}

func (p *DropFunctionArgs) GetDbName() string {
	return p.DbName
}

func (p *DropFunctionArgs) GetFuncName() string {
	return p.FuncName
}
func (p *DropFunctionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropFunctionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DropFunctionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FuncName = v
	}
	return nil
}

func (p *DropFunctionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_function_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropFunctionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbName: %s", p, err)
	}
	return err
}

func (p *DropFunctionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("funcName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:funcName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FuncName)); err != nil {
		return fmt.Errorf("%T.funcName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:funcName: %s", p, err)
	}
	return err
}

func (p *DropFunctionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropFunctionArgs(%+v)", *p)
}

type DropFunctionResult struct {
	O1 *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O3 *MetaException         `thrift:"o3,2" json:"o3"`
}

func NewDropFunctionResult() *DropFunctionResult {
	return &DropFunctionResult{}
}

var DropFunctionResult_O1_DEFAULT *NoSuchObjectException

func (p *DropFunctionResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropFunctionResult_O1_DEFAULT
	}
	return p.O1
}

var DropFunctionResult_O3_DEFAULT *MetaException

func (p *DropFunctionResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return DropFunctionResult_O3_DEFAULT
	}
	return p.O3
}
func (p *DropFunctionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropFunctionResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *DropFunctionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropFunctionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropFunctionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *DropFunctionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_function_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropFunctionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropFunctionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o3: %s", p, err)
		}
	}
	return err
}

func (p *DropFunctionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropFunctionResult(%+v)", *p)
}

type AlterFunctionArgs struct {
	DbName   string    `thrift:"dbName,1" json:"dbName"`
	FuncName string    `thrift:"funcName,2" json:"funcName"`
	NewFunc_ *Function `thrift:"newFunc,3" json:"newFunc"`
}

func NewAlterFunctionArgs() *AlterFunctionArgs {
	return &AlterFunctionArgs{}
}

func (p *AlterFunctionArgs) GetDbName() string {
	return p.DbName
}

func (p *AlterFunctionArgs) GetFuncName() string {
	return p.FuncName
}

var AlterFunctionArgs_NewFunc__DEFAULT *Function

func (p *AlterFunctionArgs) GetNewFunc_() *Function {
	if !p.IsSetNewFunc_() {
		return AlterFunctionArgs_NewFunc__DEFAULT
	}
	return p.NewFunc_
}
func (p *AlterFunctionArgs) IsSetNewFunc_() bool {
	return p.NewFunc_ != nil
}

func (p *AlterFunctionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterFunctionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AlterFunctionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FuncName = v
	}
	return nil
}

func (p *AlterFunctionArgs) ReadField3(iprot thrift.TProtocol) error {
	p.NewFunc_ = &Function{}
	if err := p.NewFunc_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewFunc_, err)
	}
	return nil
}

func (p *AlterFunctionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_function_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterFunctionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbName: %s", p, err)
	}
	return err
}

func (p *AlterFunctionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("funcName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:funcName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FuncName)); err != nil {
		return fmt.Errorf("%T.funcName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:funcName: %s", p, err)
	}
	return err
}

func (p *AlterFunctionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newFunc", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:newFunc: %s", p, err)
	}
	if err := p.NewFunc_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewFunc_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:newFunc: %s", p, err)
	}
	return err
}

func (p *AlterFunctionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterFunctionArgs(%+v)", *p)
}

type AlterFunctionResult struct {
	O1 *InvalidOperationException `thrift:"o1,1" json:"o1"`
	O2 *MetaException             `thrift:"o2,2" json:"o2"`
}

func NewAlterFunctionResult() *AlterFunctionResult {
	return &AlterFunctionResult{}
}

var AlterFunctionResult_O1_DEFAULT *InvalidOperationException

func (p *AlterFunctionResult) GetO1() *InvalidOperationException {
	if !p.IsSetO1() {
		return AlterFunctionResult_O1_DEFAULT
	}
	return p.O1
}

var AlterFunctionResult_O2_DEFAULT *MetaException

func (p *AlterFunctionResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return AlterFunctionResult_O2_DEFAULT
	}
	return p.O2
}
func (p *AlterFunctionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AlterFunctionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AlterFunctionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterFunctionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidOperationException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AlterFunctionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AlterFunctionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_function_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterFunctionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterFunctionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterFunctionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterFunctionResult(%+v)", *p)
}

type GetFunctionsArgs struct {
	DbName  string `thrift:"dbName,1" json:"dbName"`
	Pattern string `thrift:"pattern,2" json:"pattern"`
}

func NewGetFunctionsArgs() *GetFunctionsArgs {
	return &GetFunctionsArgs{}
}

func (p *GetFunctionsArgs) GetDbName() string {
	return p.DbName
}

func (p *GetFunctionsArgs) GetPattern() string {
	return p.Pattern
}
func (p *GetFunctionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFunctionsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetFunctionsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Pattern = v
	}
	return nil
}

func (p *GetFunctionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_functions_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFunctionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbName: %s", p, err)
	}
	return err
}

func (p *GetFunctionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pattern", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:pattern: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Pattern)); err != nil {
		return fmt.Errorf("%T.pattern (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:pattern: %s", p, err)
	}
	return err
}

func (p *GetFunctionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFunctionsArgs(%+v)", *p)
}

type GetFunctionsResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetFunctionsResult() *GetFunctionsResult {
	return &GetFunctionsResult{}
}

var GetFunctionsResult_Success_DEFAULT []string

func (p *GetFunctionsResult) GetSuccess() []string {
	return p.Success
}

var GetFunctionsResult_O1_DEFAULT *MetaException

func (p *GetFunctionsResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetFunctionsResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetFunctionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFunctionsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetFunctionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFunctionsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem321 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem321 = v
		}
		p.Success = append(p.Success, _elem321)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetFunctionsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetFunctionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_functions_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFunctionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetFunctionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetFunctionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFunctionsResult(%+v)", *p)
}

type GetFunctionArgs struct {
	DbName   string `thrift:"dbName,1" json:"dbName"`
	FuncName string `thrift:"funcName,2" json:"funcName"`
}

func NewGetFunctionArgs() *GetFunctionArgs {
	return &GetFunctionArgs{}
}

func (p *GetFunctionArgs) GetDbName() string {
	return p.DbName
}

func (p *GetFunctionArgs) GetFuncName() string {
	return p.FuncName
}
func (p *GetFunctionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFunctionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetFunctionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FuncName = v
	}
	return nil
}

func (p *GetFunctionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_function_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFunctionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbName: %s", p, err)
	}
	return err
}

func (p *GetFunctionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("funcName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:funcName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FuncName)); err != nil {
		return fmt.Errorf("%T.funcName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:funcName: %s", p, err)
	}
	return err
}

func (p *GetFunctionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFunctionArgs(%+v)", *p)
}

type GetFunctionResult struct {
	Success *Function              `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetFunctionResult() *GetFunctionResult {
	return &GetFunctionResult{}
}

var GetFunctionResult_Success_DEFAULT *Function

func (p *GetFunctionResult) GetSuccess() *Function {
	if !p.IsSetSuccess() {
		return GetFunctionResult_Success_DEFAULT
	}
	return p.Success
}

var GetFunctionResult_O1_DEFAULT *MetaException

func (p *GetFunctionResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetFunctionResult_O1_DEFAULT
	}
	return p.O1
}

var GetFunctionResult_O2_DEFAULT *NoSuchObjectException

func (p *GetFunctionResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetFunctionResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetFunctionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFunctionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetFunctionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetFunctionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFunctionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Function{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetFunctionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetFunctionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetFunctionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_function_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFunctionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetFunctionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetFunctionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetFunctionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFunctionResult(%+v)", *p)
}

type CreateRoleArgs struct {
	Role *Role `thrift:"role,1" json:"role"`
}

func NewCreateRoleArgs() *CreateRoleArgs {
	return &CreateRoleArgs{}
}

var CreateRoleArgs_Role_DEFAULT *Role

func (p *CreateRoleArgs) GetRole() *Role {
	if !p.IsSetRole() {
		return CreateRoleArgs_Role_DEFAULT
	}
	return p.Role
}
func (p *CreateRoleArgs) IsSetRole() bool {
	return p.Role != nil
}

func (p *CreateRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Role = &Role{}
	if err := p.Role.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Role, err)
	}
	return nil
}

func (p *CreateRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_role_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:role: %s", p, err)
	}
	if err := p.Role.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Role, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:role: %s", p, err)
	}
	return err
}

func (p *CreateRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoleArgs(%+v)", *p)
}

type CreateRoleResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewCreateRoleResult() *CreateRoleResult {
	return &CreateRoleResult{}
}

var CreateRoleResult_Success_DEFAULT bool

func (p *CreateRoleResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return CreateRoleResult_Success_DEFAULT
	}
	return *p.Success
}

var CreateRoleResult_O1_DEFAULT *MetaException

func (p *CreateRoleResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return CreateRoleResult_O1_DEFAULT
	}
	return p.O1
}
func (p *CreateRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateRoleResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *CreateRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateRoleResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *CreateRoleResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *CreateRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_role_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CreateRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoleResult(%+v)", *p)
}

type DropRoleArgs struct {
	RoleName string `thrift:"role_name,1" json:"role_name"`
}

func NewDropRoleArgs() *DropRoleArgs {
	return &DropRoleArgs{}
}

func (p *DropRoleArgs) GetRoleName() string {
	return p.RoleName
}
func (p *DropRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *DropRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_role_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:role_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return fmt.Errorf("%T.role_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:role_name: %s", p, err)
	}
	return err
}

func (p *DropRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropRoleArgs(%+v)", *p)
}

type DropRoleResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewDropRoleResult() *DropRoleResult {
	return &DropRoleResult{}
}

var DropRoleResult_Success_DEFAULT bool

func (p *DropRoleResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DropRoleResult_Success_DEFAULT
	}
	return *p.Success
}

var DropRoleResult_O1_DEFAULT *MetaException

func (p *DropRoleResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return DropRoleResult_O1_DEFAULT
	}
	return p.O1
}
func (p *DropRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DropRoleResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropRoleResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DropRoleResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_role_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DropRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropRoleResult(%+v)", *p)
}

type GetRoleNamesArgs struct {
}

func NewGetRoleNamesArgs() *GetRoleNamesArgs {
	return &GetRoleNamesArgs{}
}

func (p *GetRoleNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRoleNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_role_names_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRoleNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoleNamesArgs(%+v)", *p)
}

type GetRoleNamesResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetRoleNamesResult() *GetRoleNamesResult {
	return &GetRoleNamesResult{}
}

var GetRoleNamesResult_Success_DEFAULT []string

func (p *GetRoleNamesResult) GetSuccess() []string {
	return p.Success
}

var GetRoleNamesResult_O1_DEFAULT *MetaException

func (p *GetRoleNamesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetRoleNamesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetRoleNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRoleNamesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetRoleNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRoleNamesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem322 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem322 = v
		}
		p.Success = append(p.Success, _elem322)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetRoleNamesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetRoleNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_role_names_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRoleNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetRoleNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetRoleNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoleNamesResult(%+v)", *p)
}

type GrantRoleArgs struct {
	RoleName      string        `thrift:"role_name,1" json:"role_name"`
	PrincipalName string        `thrift:"principal_name,2" json:"principal_name"`
	PrincipalType PrincipalType `thrift:"principal_type,3" json:"principal_type"`
	Grantor       string        `thrift:"grantor,4" json:"grantor"`
	GrantorType   PrincipalType `thrift:"grantorType,5" json:"grantorType"`
	GrantOption   bool          `thrift:"grant_option,6" json:"grant_option"`
}

func NewGrantRoleArgs() *GrantRoleArgs {
	return &GrantRoleArgs{}
}

func (p *GrantRoleArgs) GetRoleName() string {
	return p.RoleName
}

func (p *GrantRoleArgs) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *GrantRoleArgs) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}

func (p *GrantRoleArgs) GetGrantor() string {
	return p.Grantor
}

func (p *GrantRoleArgs) GetGrantorType() PrincipalType {
	return p.GrantorType
}

func (p *GrantRoleArgs) GetGrantOption() bool {
	return p.GrantOption
}
func (p *GrantRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GrantRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *GrantRoleArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *GrantRoleArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *GrantRoleArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Grantor = v
	}
	return nil
}

func (p *GrantRoleArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := PrincipalType(v)
		p.GrantorType = temp
	}
	return nil
}

func (p *GrantRoleArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.GrantOption = v
	}
	return nil
}

func (p *GrantRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_role_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GrantRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:role_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return fmt.Errorf("%T.role_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:role_name: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principal_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:principal_name: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:principal_type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return fmt.Errorf("%T.principal_type (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:principal_type: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantor", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:grantor: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Grantor)); err != nil {
		return fmt.Errorf("%T.grantor (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:grantor: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantorType", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:grantorType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.GrantorType)); err != nil {
		return fmt.Errorf("%T.grantorType (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:grantorType: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grant_option", thrift.BOOL, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:grant_option: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.GrantOption)); err != nil {
		return fmt.Errorf("%T.grant_option (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:grant_option: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GrantRoleArgs(%+v)", *p)
}

type GrantRoleResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGrantRoleResult() *GrantRoleResult {
	return &GrantRoleResult{}
}

var GrantRoleResult_Success_DEFAULT bool

func (p *GrantRoleResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return GrantRoleResult_Success_DEFAULT
	}
	return *p.Success
}

var GrantRoleResult_O1_DEFAULT *MetaException

func (p *GrantRoleResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GrantRoleResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GrantRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GrantRoleResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GrantRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GrantRoleResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GrantRoleResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GrantRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_role_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GrantRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GrantRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GrantRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GrantRoleResult(%+v)", *p)
}

type RevokeRoleArgs struct {
	RoleName      string        `thrift:"role_name,1" json:"role_name"`
	PrincipalName string        `thrift:"principal_name,2" json:"principal_name"`
	PrincipalType PrincipalType `thrift:"principal_type,3" json:"principal_type"`
}

func NewRevokeRoleArgs() *RevokeRoleArgs {
	return &RevokeRoleArgs{}
}

func (p *RevokeRoleArgs) GetRoleName() string {
	return p.RoleName
}

func (p *RevokeRoleArgs) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *RevokeRoleArgs) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}
func (p *RevokeRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokeRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *RevokeRoleArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *RevokeRoleArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *RevokeRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_role_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokeRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:role_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return fmt.Errorf("%T.role_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:role_name: %s", p, err)
	}
	return err
}

func (p *RevokeRoleArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principal_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:principal_name: %s", p, err)
	}
	return err
}

func (p *RevokeRoleArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:principal_type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return fmt.Errorf("%T.principal_type (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:principal_type: %s", p, err)
	}
	return err
}

func (p *RevokeRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokeRoleArgs(%+v)", *p)
}

type RevokeRoleResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewRevokeRoleResult() *RevokeRoleResult {
	return &RevokeRoleResult{}
}

var RevokeRoleResult_Success_DEFAULT bool

func (p *RevokeRoleResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RevokeRoleResult_Success_DEFAULT
	}
	return *p.Success
}

var RevokeRoleResult_O1_DEFAULT *MetaException

func (p *RevokeRoleResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return RevokeRoleResult_O1_DEFAULT
	}
	return p.O1
}
func (p *RevokeRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RevokeRoleResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *RevokeRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokeRoleResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RevokeRoleResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *RevokeRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_role_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokeRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RevokeRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *RevokeRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokeRoleResult(%+v)", *p)
}

type ListRolesArgs struct {
	PrincipalName string        `thrift:"principal_name,1" json:"principal_name"`
	PrincipalType PrincipalType `thrift:"principal_type,2" json:"principal_type"`
}

func NewListRolesArgs() *ListRolesArgs {
	return &ListRolesArgs{}
}

func (p *ListRolesArgs) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *ListRolesArgs) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}
func (p *ListRolesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListRolesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *ListRolesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *ListRolesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_roles_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListRolesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principal_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:principal_name: %s", p, err)
	}
	return err
}

func (p *ListRolesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:principal_type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return fmt.Errorf("%T.principal_type (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:principal_type: %s", p, err)
	}
	return err
}

func (p *ListRolesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListRolesArgs(%+v)", *p)
}

type ListRolesResult struct {
	Success []*Role        `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewListRolesResult() *ListRolesResult {
	return &ListRolesResult{}
}

var ListRolesResult_Success_DEFAULT []*Role

func (p *ListRolesResult) GetSuccess() []*Role {
	return p.Success
}

var ListRolesResult_O1_DEFAULT *MetaException

func (p *ListRolesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ListRolesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ListRolesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListRolesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ListRolesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListRolesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Role, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem323 := &Role{}
		if err := _elem323.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem323, err)
		}
		p.Success = append(p.Success, _elem323)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListRolesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *ListRolesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_roles_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListRolesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListRolesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *ListRolesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListRolesResult(%+v)", *p)
}

type GetPrincipalsInRoleArgs struct {
	Request *GetPrincipalsInRoleRequest `thrift:"request,1" json:"request"`
}

func NewGetPrincipalsInRoleArgs() *GetPrincipalsInRoleArgs {
	return &GetPrincipalsInRoleArgs{}
}

var GetPrincipalsInRoleArgs_Request_DEFAULT *GetPrincipalsInRoleRequest

func (p *GetPrincipalsInRoleArgs) GetRequest() *GetPrincipalsInRoleRequest {
	if !p.IsSetRequest() {
		return GetPrincipalsInRoleArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetPrincipalsInRoleArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetPrincipalsInRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPrincipalsInRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetPrincipalsInRoleRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetPrincipalsInRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_principals_in_role_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPrincipalsInRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetPrincipalsInRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPrincipalsInRoleArgs(%+v)", *p)
}

type GetPrincipalsInRoleResult struct {
	Success *GetPrincipalsInRoleResponse `thrift:"success,0" json:"success"`
	O1      *MetaException               `thrift:"o1,1" json:"o1"`
}

func NewGetPrincipalsInRoleResult() *GetPrincipalsInRoleResult {
	return &GetPrincipalsInRoleResult{}
}

var GetPrincipalsInRoleResult_Success_DEFAULT *GetPrincipalsInRoleResponse

func (p *GetPrincipalsInRoleResult) GetSuccess() *GetPrincipalsInRoleResponse {
	if !p.IsSetSuccess() {
		return GetPrincipalsInRoleResult_Success_DEFAULT
	}
	return p.Success
}

var GetPrincipalsInRoleResult_O1_DEFAULT *MetaException

func (p *GetPrincipalsInRoleResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPrincipalsInRoleResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetPrincipalsInRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPrincipalsInRoleResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPrincipalsInRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPrincipalsInRoleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetPrincipalsInRoleResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPrincipalsInRoleResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPrincipalsInRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_principals_in_role_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPrincipalsInRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPrincipalsInRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPrincipalsInRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPrincipalsInRoleResult(%+v)", *p)
}

type GetRoleGrantsForPrincipalArgs struct {
	Request *GetRoleGrantsForPrincipalRequest `thrift:"request,1" json:"request"`
}

func NewGetRoleGrantsForPrincipalArgs() *GetRoleGrantsForPrincipalArgs {
	return &GetRoleGrantsForPrincipalArgs{}
}

var GetRoleGrantsForPrincipalArgs_Request_DEFAULT *GetRoleGrantsForPrincipalRequest

func (p *GetRoleGrantsForPrincipalArgs) GetRequest() *GetRoleGrantsForPrincipalRequest {
	if !p.IsSetRequest() {
		return GetRoleGrantsForPrincipalArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetRoleGrantsForPrincipalArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetRoleGrantsForPrincipalArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRoleGrantsForPrincipalArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetRoleGrantsForPrincipalRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetRoleGrantsForPrincipalArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_role_grants_for_principal_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRoleGrantsForPrincipalArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetRoleGrantsForPrincipalArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoleGrantsForPrincipalArgs(%+v)", *p)
}

type GetRoleGrantsForPrincipalResult struct {
	Success *GetRoleGrantsForPrincipalResponse `thrift:"success,0" json:"success"`
	O1      *MetaException                     `thrift:"o1,1" json:"o1"`
}

func NewGetRoleGrantsForPrincipalResult() *GetRoleGrantsForPrincipalResult {
	return &GetRoleGrantsForPrincipalResult{}
}

var GetRoleGrantsForPrincipalResult_Success_DEFAULT *GetRoleGrantsForPrincipalResponse

func (p *GetRoleGrantsForPrincipalResult) GetSuccess() *GetRoleGrantsForPrincipalResponse {
	if !p.IsSetSuccess() {
		return GetRoleGrantsForPrincipalResult_Success_DEFAULT
	}
	return p.Success
}

var GetRoleGrantsForPrincipalResult_O1_DEFAULT *MetaException

func (p *GetRoleGrantsForPrincipalResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetRoleGrantsForPrincipalResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetRoleGrantsForPrincipalResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRoleGrantsForPrincipalResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetRoleGrantsForPrincipalResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRoleGrantsForPrincipalResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetRoleGrantsForPrincipalResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetRoleGrantsForPrincipalResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetRoleGrantsForPrincipalResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_role_grants_for_principal_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRoleGrantsForPrincipalResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetRoleGrantsForPrincipalResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetRoleGrantsForPrincipalResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoleGrantsForPrincipalResult(%+v)", *p)
}

type GetPrivilegeSetArgs struct {
	HiveObject *HiveObjectRef `thrift:"hiveObject,1" json:"hiveObject"`
	UserName   string         `thrift:"user_name,2" json:"user_name"`
	GroupNames []string       `thrift:"group_names,3" json:"group_names"`
}

func NewGetPrivilegeSetArgs() *GetPrivilegeSetArgs {
	return &GetPrivilegeSetArgs{}
}

var GetPrivilegeSetArgs_HiveObject_DEFAULT *HiveObjectRef

func (p *GetPrivilegeSetArgs) GetHiveObject() *HiveObjectRef {
	if !p.IsSetHiveObject() {
		return GetPrivilegeSetArgs_HiveObject_DEFAULT
	}
	return p.HiveObject
}

func (p *GetPrivilegeSetArgs) GetUserName() string {
	return p.UserName
}

func (p *GetPrivilegeSetArgs) GetGroupNames() []string {
	return p.GroupNames
}
func (p *GetPrivilegeSetArgs) IsSetHiveObject() bool {
	return p.HiveObject != nil
}

func (p *GetPrivilegeSetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPrivilegeSetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.HiveObject = &HiveObjectRef{}
	if err := p.HiveObject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.HiveObject, err)
	}
	return nil
}

func (p *GetPrivilegeSetArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *GetPrivilegeSetArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupNames = tSlice
	for i := 0; i < size; i++ {
		var _elem324 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem324 = v
		}
		p.GroupNames = append(p.GroupNames, _elem324)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPrivilegeSetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_privilege_set_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPrivilegeSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:hiveObject: %s", p, err)
	}
	if err := p.HiveObject.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.HiveObject, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:hiveObject: %s", p, err)
	}
	return err
}

func (p *GetPrivilegeSetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user_name: %s", p, err)
	}
	return err
}

func (p *GetPrivilegeSetArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:group_names: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.GroupNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:group_names: %s", p, err)
	}
	return err
}

func (p *GetPrivilegeSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPrivilegeSetArgs(%+v)", *p)
}

type GetPrivilegeSetResult struct {
	Success *PrincipalPrivilegeSet `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
}

func NewGetPrivilegeSetResult() *GetPrivilegeSetResult {
	return &GetPrivilegeSetResult{}
}

var GetPrivilegeSetResult_Success_DEFAULT *PrincipalPrivilegeSet

func (p *GetPrivilegeSetResult) GetSuccess() *PrincipalPrivilegeSet {
	if !p.IsSetSuccess() {
		return GetPrivilegeSetResult_Success_DEFAULT
	}
	return p.Success
}

var GetPrivilegeSetResult_O1_DEFAULT *MetaException

func (p *GetPrivilegeSetResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPrivilegeSetResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetPrivilegeSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPrivilegeSetResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPrivilegeSetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPrivilegeSetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PrincipalPrivilegeSet{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPrivilegeSetResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPrivilegeSetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_privilege_set_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPrivilegeSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPrivilegeSetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPrivilegeSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPrivilegeSetResult(%+v)", *p)
}

type ListPrivilegesArgs struct {
	PrincipalName string         `thrift:"principal_name,1" json:"principal_name"`
	PrincipalType PrincipalType  `thrift:"principal_type,2" json:"principal_type"`
	HiveObject    *HiveObjectRef `thrift:"hiveObject,3" json:"hiveObject"`
}

func NewListPrivilegesArgs() *ListPrivilegesArgs {
	return &ListPrivilegesArgs{}
}

func (p *ListPrivilegesArgs) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *ListPrivilegesArgs) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}

var ListPrivilegesArgs_HiveObject_DEFAULT *HiveObjectRef

func (p *ListPrivilegesArgs) GetHiveObject() *HiveObjectRef {
	if !p.IsSetHiveObject() {
		return ListPrivilegesArgs_HiveObject_DEFAULT
	}
	return p.HiveObject
}
func (p *ListPrivilegesArgs) IsSetHiveObject() bool {
	return p.HiveObject != nil
}

func (p *ListPrivilegesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPrivilegesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *ListPrivilegesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *ListPrivilegesArgs) ReadField3(iprot thrift.TProtocol) error {
	p.HiveObject = &HiveObjectRef{}
	if err := p.HiveObject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.HiveObject, err)
	}
	return nil
}

func (p *ListPrivilegesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_privileges_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principal_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:principal_name: %s", p, err)
	}
	return err
}

func (p *ListPrivilegesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:principal_type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return fmt.Errorf("%T.principal_type (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:principal_type: %s", p, err)
	}
	return err
}

func (p *ListPrivilegesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:hiveObject: %s", p, err)
	}
	if err := p.HiveObject.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.HiveObject, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:hiveObject: %s", p, err)
	}
	return err
}

func (p *ListPrivilegesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPrivilegesArgs(%+v)", *p)
}

type ListPrivilegesResult struct {
	Success []*HiveObjectPrivilege `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
}

func NewListPrivilegesResult() *ListPrivilegesResult {
	return &ListPrivilegesResult{}
}

var ListPrivilegesResult_Success_DEFAULT []*HiveObjectPrivilege

func (p *ListPrivilegesResult) GetSuccess() []*HiveObjectPrivilege {
	return p.Success
}

var ListPrivilegesResult_O1_DEFAULT *MetaException

func (p *ListPrivilegesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ListPrivilegesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ListPrivilegesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListPrivilegesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ListPrivilegesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPrivilegesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*HiveObjectPrivilege, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem325 := &HiveObjectPrivilege{}
		if err := _elem325.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem325, err)
		}
		p.Success = append(p.Success, _elem325)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListPrivilegesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *ListPrivilegesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_privileges_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListPrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *ListPrivilegesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPrivilegesResult(%+v)", *p)
}

type GrantPrivilegesArgs struct {
	Privileges *PrivilegeBag `thrift:"privileges,1" json:"privileges"`
}

func NewGrantPrivilegesArgs() *GrantPrivilegesArgs {
	return &GrantPrivilegesArgs{}
}

var GrantPrivilegesArgs_Privileges_DEFAULT *PrivilegeBag

func (p *GrantPrivilegesArgs) GetPrivileges() *PrivilegeBag {
	if !p.IsSetPrivileges() {
		return GrantPrivilegesArgs_Privileges_DEFAULT
	}
	return p.Privileges
}
func (p *GrantPrivilegesArgs) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *GrantPrivilegesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GrantPrivilegesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Privileges = &PrivilegeBag{}
	if err := p.Privileges.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Privileges, err)
	}
	return nil
}

func (p *GrantPrivilegesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_privileges_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GrantPrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:privileges: %s", p, err)
	}
	if err := p.Privileges.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Privileges, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:privileges: %s", p, err)
	}
	return err
}

func (p *GrantPrivilegesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GrantPrivilegesArgs(%+v)", *p)
}

type GrantPrivilegesResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGrantPrivilegesResult() *GrantPrivilegesResult {
	return &GrantPrivilegesResult{}
}

var GrantPrivilegesResult_Success_DEFAULT bool

func (p *GrantPrivilegesResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return GrantPrivilegesResult_Success_DEFAULT
	}
	return *p.Success
}

var GrantPrivilegesResult_O1_DEFAULT *MetaException

func (p *GrantPrivilegesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GrantPrivilegesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GrantPrivilegesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GrantPrivilegesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GrantPrivilegesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GrantPrivilegesResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GrantPrivilegesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GrantPrivilegesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_privileges_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GrantPrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GrantPrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GrantPrivilegesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GrantPrivilegesResult(%+v)", *p)
}

type RevokePrivilegesArgs struct {
	Privileges *PrivilegeBag `thrift:"privileges,1" json:"privileges"`
}

func NewRevokePrivilegesArgs() *RevokePrivilegesArgs {
	return &RevokePrivilegesArgs{}
}

var RevokePrivilegesArgs_Privileges_DEFAULT *PrivilegeBag

func (p *RevokePrivilegesArgs) GetPrivileges() *PrivilegeBag {
	if !p.IsSetPrivileges() {
		return RevokePrivilegesArgs_Privileges_DEFAULT
	}
	return p.Privileges
}
func (p *RevokePrivilegesArgs) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *RevokePrivilegesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokePrivilegesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Privileges = &PrivilegeBag{}
	if err := p.Privileges.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Privileges, err)
	}
	return nil
}

func (p *RevokePrivilegesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_privileges_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokePrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:privileges: %s", p, err)
	}
	if err := p.Privileges.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Privileges, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:privileges: %s", p, err)
	}
	return err
}

func (p *RevokePrivilegesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokePrivilegesArgs(%+v)", *p)
}

type RevokePrivilegesResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewRevokePrivilegesResult() *RevokePrivilegesResult {
	return &RevokePrivilegesResult{}
}

var RevokePrivilegesResult_Success_DEFAULT bool

func (p *RevokePrivilegesResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RevokePrivilegesResult_Success_DEFAULT
	}
	return *p.Success
}

var RevokePrivilegesResult_O1_DEFAULT *MetaException

func (p *RevokePrivilegesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return RevokePrivilegesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *RevokePrivilegesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RevokePrivilegesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *RevokePrivilegesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokePrivilegesResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RevokePrivilegesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *RevokePrivilegesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_privileges_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokePrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RevokePrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *RevokePrivilegesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokePrivilegesResult(%+v)", *p)
}

type SetUgiArgs struct {
	UserName   string   `thrift:"user_name,1" json:"user_name"`
	GroupNames []string `thrift:"group_names,2" json:"group_names"`
}

func NewSetUgiArgs() *SetUgiArgs {
	return &SetUgiArgs{}
}

func (p *SetUgiArgs) GetUserName() string {
	return p.UserName
}

func (p *SetUgiArgs) GetGroupNames() []string {
	return p.GroupNames
}
func (p *SetUgiArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetUgiArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *SetUgiArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupNames = tSlice
	for i := 0; i < size; i++ {
		var _elem326 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem326 = v
		}
		p.GroupNames = append(p.GroupNames, _elem326)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SetUgiArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_ugi_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetUgiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_name: %s", p, err)
	}
	return err
}

func (p *SetUgiArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:group_names: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.GroupNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:group_names: %s", p, err)
	}
	return err
}

func (p *SetUgiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetUgiArgs(%+v)", *p)
}

type SetUgiResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewSetUgiResult() *SetUgiResult {
	return &SetUgiResult{}
}

var SetUgiResult_Success_DEFAULT []string

func (p *SetUgiResult) GetSuccess() []string {
	return p.Success
}

var SetUgiResult_O1_DEFAULT *MetaException

func (p *SetUgiResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return SetUgiResult_O1_DEFAULT
	}
	return p.O1
}
func (p *SetUgiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetUgiResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *SetUgiResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetUgiResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem327 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem327 = v
		}
		p.Success = append(p.Success, _elem327)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SetUgiResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *SetUgiResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_ugi_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetUgiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SetUgiResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *SetUgiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetUgiResult(%+v)", *p)
}

type GetDelegationTokenArgs struct {
	TokenOwner                   string `thrift:"token_owner,1" json:"token_owner"`
	RenewerKerberosPrincipalName string `thrift:"renewer_kerberos_principal_name,2" json:"renewer_kerberos_principal_name"`
}

func NewGetDelegationTokenArgs() *GetDelegationTokenArgs {
	return &GetDelegationTokenArgs{}
}

func (p *GetDelegationTokenArgs) GetTokenOwner() string {
	return p.TokenOwner
}

func (p *GetDelegationTokenArgs) GetRenewerKerberosPrincipalName() string {
	return p.RenewerKerberosPrincipalName
}
func (p *GetDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDelegationTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TokenOwner = v
	}
	return nil
}

func (p *GetDelegationTokenArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.RenewerKerberosPrincipalName = v
	}
	return nil
}

func (p *GetDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_delegation_token_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token_owner", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:token_owner: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TokenOwner)); err != nil {
		return fmt.Errorf("%T.token_owner (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:token_owner: %s", p, err)
	}
	return err
}

func (p *GetDelegationTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("renewer_kerberos_principal_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:renewer_kerberos_principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RenewerKerberosPrincipalName)); err != nil {
		return fmt.Errorf("%T.renewer_kerberos_principal_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:renewer_kerberos_principal_name: %s", p, err)
	}
	return err
}

func (p *GetDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDelegationTokenArgs(%+v)", *p)
}

type GetDelegationTokenResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetDelegationTokenResult() *GetDelegationTokenResult {
	return &GetDelegationTokenResult{}
}

var GetDelegationTokenResult_Success_DEFAULT string

func (p *GetDelegationTokenResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return GetDelegationTokenResult_Success_DEFAULT
	}
	return *p.Success
}

var GetDelegationTokenResult_O1_DEFAULT *MetaException

func (p *GetDelegationTokenResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetDelegationTokenResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetDelegationTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetDelegationTokenResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDelegationTokenResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GetDelegationTokenResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_delegation_token_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDelegationTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDelegationTokenResult(%+v)", *p)
}

type RenewDelegationTokenArgs struct {
	TokenStrForm string `thrift:"token_str_form,1" json:"token_str_form"`
}

func NewRenewDelegationTokenArgs() *RenewDelegationTokenArgs {
	return &RenewDelegationTokenArgs{}
}

func (p *RenewDelegationTokenArgs) GetTokenStrForm() string {
	return p.TokenStrForm
}
func (p *RenewDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenewDelegationTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TokenStrForm = v
	}
	return nil
}

func (p *RenewDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renew_delegation_token_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RenewDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token_str_form", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:token_str_form: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TokenStrForm)); err != nil {
		return fmt.Errorf("%T.token_str_form (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:token_str_form: %s", p, err)
	}
	return err
}

func (p *RenewDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenewDelegationTokenArgs(%+v)", *p)
}

type RenewDelegationTokenResult struct {
	Success *int64         `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewRenewDelegationTokenResult() *RenewDelegationTokenResult {
	return &RenewDelegationTokenResult{}
}

var RenewDelegationTokenResult_Success_DEFAULT int64

func (p *RenewDelegationTokenResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return RenewDelegationTokenResult_Success_DEFAULT
	}
	return *p.Success
}

var RenewDelegationTokenResult_O1_DEFAULT *MetaException

func (p *RenewDelegationTokenResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return RenewDelegationTokenResult_O1_DEFAULT
	}
	return p.O1
}
func (p *RenewDelegationTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RenewDelegationTokenResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *RenewDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenewDelegationTokenResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RenewDelegationTokenResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *RenewDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renew_delegation_token_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RenewDelegationTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RenewDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *RenewDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenewDelegationTokenResult(%+v)", *p)
}

type CancelDelegationTokenArgs struct {
	TokenStrForm string `thrift:"token_str_form,1" json:"token_str_form"`
}

func NewCancelDelegationTokenArgs() *CancelDelegationTokenArgs {
	return &CancelDelegationTokenArgs{}
}

func (p *CancelDelegationTokenArgs) GetTokenStrForm() string {
	return p.TokenStrForm
}
func (p *CancelDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CancelDelegationTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TokenStrForm = v
	}
	return nil
}

func (p *CancelDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancel_delegation_token_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CancelDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token_str_form", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:token_str_form: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TokenStrForm)); err != nil {
		return fmt.Errorf("%T.token_str_form (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:token_str_form: %s", p, err)
	}
	return err
}

func (p *CancelDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelDelegationTokenArgs(%+v)", *p)
}

type CancelDelegationTokenResult struct {
	O1 *MetaException `thrift:"o1,1" json:"o1"`
}

func NewCancelDelegationTokenResult() *CancelDelegationTokenResult {
	return &CancelDelegationTokenResult{}
}

var CancelDelegationTokenResult_O1_DEFAULT *MetaException

func (p *CancelDelegationTokenResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return CancelDelegationTokenResult_O1_DEFAULT
	}
	return p.O1
}
func (p *CancelDelegationTokenResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *CancelDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CancelDelegationTokenResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *CancelDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancel_delegation_token_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CancelDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CancelDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelDelegationTokenResult(%+v)", *p)
}

type GetOpenTxnsArgs struct {
}

func NewGetOpenTxnsArgs() *GetOpenTxnsArgs {
	return &GetOpenTxnsArgs{}
}

func (p *GetOpenTxnsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetOpenTxnsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_open_txns_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetOpenTxnsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOpenTxnsArgs(%+v)", *p)
}

type GetOpenTxnsResult struct {
	Success *GetOpenTxnsResponse `thrift:"success,0" json:"success"`
}

func NewGetOpenTxnsResult() *GetOpenTxnsResult {
	return &GetOpenTxnsResult{}
}

var GetOpenTxnsResult_Success_DEFAULT *GetOpenTxnsResponse

func (p *GetOpenTxnsResult) GetSuccess() *GetOpenTxnsResponse {
	if !p.IsSetSuccess() {
		return GetOpenTxnsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GetOpenTxnsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetOpenTxnsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetOpenTxnsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetOpenTxnsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetOpenTxnsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_open_txns_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetOpenTxnsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetOpenTxnsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOpenTxnsResult(%+v)", *p)
}

type GetOpenTxnsInfoArgs struct {
}

func NewGetOpenTxnsInfoArgs() *GetOpenTxnsInfoArgs {
	return &GetOpenTxnsInfoArgs{}
}

func (p *GetOpenTxnsInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetOpenTxnsInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_open_txns_info_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetOpenTxnsInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOpenTxnsInfoArgs(%+v)", *p)
}

type GetOpenTxnsInfoResult struct {
	Success *GetOpenTxnsInfoResponse `thrift:"success,0" json:"success"`
}

func NewGetOpenTxnsInfoResult() *GetOpenTxnsInfoResult {
	return &GetOpenTxnsInfoResult{}
}

var GetOpenTxnsInfoResult_Success_DEFAULT *GetOpenTxnsInfoResponse

func (p *GetOpenTxnsInfoResult) GetSuccess() *GetOpenTxnsInfoResponse {
	if !p.IsSetSuccess() {
		return GetOpenTxnsInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GetOpenTxnsInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetOpenTxnsInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetOpenTxnsInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetOpenTxnsInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetOpenTxnsInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_open_txns_info_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetOpenTxnsInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetOpenTxnsInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOpenTxnsInfoResult(%+v)", *p)
}

type OpenTxnsArgs struct {
	Rqst *OpenTxnRequest `thrift:"rqst,1" json:"rqst"`
}

func NewOpenTxnsArgs() *OpenTxnsArgs {
	return &OpenTxnsArgs{}
}

var OpenTxnsArgs_Rqst_DEFAULT *OpenTxnRequest

func (p *OpenTxnsArgs) GetRqst() *OpenTxnRequest {
	if !p.IsSetRqst() {
		return OpenTxnsArgs_Rqst_DEFAULT
	}
	return p.Rqst
}
func (p *OpenTxnsArgs) IsSetRqst() bool {
	return p.Rqst != nil
}

func (p *OpenTxnsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OpenTxnsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Rqst = &OpenTxnRequest{}
	if err := p.Rqst.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Rqst, err)
	}
	return nil
}

func (p *OpenTxnsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("open_txns_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OpenTxnsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rqst", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rqst: %s", p, err)
	}
	if err := p.Rqst.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Rqst, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rqst: %s", p, err)
	}
	return err
}

func (p *OpenTxnsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OpenTxnsArgs(%+v)", *p)
}

type OpenTxnsResult struct {
	Success *OpenTxnsResponse `thrift:"success,0" json:"success"`
}

func NewOpenTxnsResult() *OpenTxnsResult {
	return &OpenTxnsResult{}
}

var OpenTxnsResult_Success_DEFAULT *OpenTxnsResponse

func (p *OpenTxnsResult) GetSuccess() *OpenTxnsResponse {
	if !p.IsSetSuccess() {
		return OpenTxnsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OpenTxnsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OpenTxnsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OpenTxnsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &OpenTxnsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *OpenTxnsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("open_txns_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OpenTxnsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *OpenTxnsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OpenTxnsResult(%+v)", *p)
}

type AbortTxnArgs struct {
	Rqst *AbortTxnRequest `thrift:"rqst,1" json:"rqst"`
}

func NewAbortTxnArgs() *AbortTxnArgs {
	return &AbortTxnArgs{}
}

var AbortTxnArgs_Rqst_DEFAULT *AbortTxnRequest

func (p *AbortTxnArgs) GetRqst() *AbortTxnRequest {
	if !p.IsSetRqst() {
		return AbortTxnArgs_Rqst_DEFAULT
	}
	return p.Rqst
}
func (p *AbortTxnArgs) IsSetRqst() bool {
	return p.Rqst != nil
}

func (p *AbortTxnArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AbortTxnArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Rqst = &AbortTxnRequest{}
	if err := p.Rqst.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Rqst, err)
	}
	return nil
}

func (p *AbortTxnArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("abort_txn_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AbortTxnArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rqst", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rqst: %s", p, err)
	}
	if err := p.Rqst.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Rqst, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rqst: %s", p, err)
	}
	return err
}

func (p *AbortTxnArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AbortTxnArgs(%+v)", *p)
}

type AbortTxnResult struct {
	O1 *NoSuchTxnException `thrift:"o1,1" json:"o1"`
}

func NewAbortTxnResult() *AbortTxnResult {
	return &AbortTxnResult{}
}

var AbortTxnResult_O1_DEFAULT *NoSuchTxnException

func (p *AbortTxnResult) GetO1() *NoSuchTxnException {
	if !p.IsSetO1() {
		return AbortTxnResult_O1_DEFAULT
	}
	return p.O1
}
func (p *AbortTxnResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AbortTxnResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AbortTxnResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchTxnException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AbortTxnResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("abort_txn_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AbortTxnResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AbortTxnResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AbortTxnResult(%+v)", *p)
}

type CommitTxnArgs struct {
	Rqst *CommitTxnRequest `thrift:"rqst,1" json:"rqst"`
}

func NewCommitTxnArgs() *CommitTxnArgs {
	return &CommitTxnArgs{}
}

var CommitTxnArgs_Rqst_DEFAULT *CommitTxnRequest

func (p *CommitTxnArgs) GetRqst() *CommitTxnRequest {
	if !p.IsSetRqst() {
		return CommitTxnArgs_Rqst_DEFAULT
	}
	return p.Rqst
}
func (p *CommitTxnArgs) IsSetRqst() bool {
	return p.Rqst != nil
}

func (p *CommitTxnArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommitTxnArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Rqst = &CommitTxnRequest{}
	if err := p.Rqst.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Rqst, err)
	}
	return nil
}

func (p *CommitTxnArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("commit_txn_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommitTxnArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rqst", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rqst: %s", p, err)
	}
	if err := p.Rqst.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Rqst, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rqst: %s", p, err)
	}
	return err
}

func (p *CommitTxnArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitTxnArgs(%+v)", *p)
}

type CommitTxnResult struct {
	O1 *NoSuchTxnException  `thrift:"o1,1" json:"o1"`
	O2 *TxnAbortedException `thrift:"o2,2" json:"o2"`
}

func NewCommitTxnResult() *CommitTxnResult {
	return &CommitTxnResult{}
}

var CommitTxnResult_O1_DEFAULT *NoSuchTxnException

func (p *CommitTxnResult) GetO1() *NoSuchTxnException {
	if !p.IsSetO1() {
		return CommitTxnResult_O1_DEFAULT
	}
	return p.O1
}

var CommitTxnResult_O2_DEFAULT *TxnAbortedException

func (p *CommitTxnResult) GetO2() *TxnAbortedException {
	if !p.IsSetO2() {
		return CommitTxnResult_O2_DEFAULT
	}
	return p.O2
}
func (p *CommitTxnResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *CommitTxnResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *CommitTxnResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommitTxnResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchTxnException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *CommitTxnResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &TxnAbortedException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *CommitTxnResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("commit_txn_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommitTxnResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CommitTxnResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *CommitTxnResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitTxnResult(%+v)", *p)
}

type LockArgs struct {
	Rqst *LockRequest `thrift:"rqst,1" json:"rqst"`
}

func NewLockArgs() *LockArgs {
	return &LockArgs{}
}

var LockArgs_Rqst_DEFAULT *LockRequest

func (p *LockArgs) GetRqst() *LockRequest {
	if !p.IsSetRqst() {
		return LockArgs_Rqst_DEFAULT
	}
	return p.Rqst
}
func (p *LockArgs) IsSetRqst() bool {
	return p.Rqst != nil
}

func (p *LockArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Rqst = &LockRequest{}
	if err := p.Rqst.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Rqst, err)
	}
	return nil
}

func (p *LockArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lock_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rqst", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rqst: %s", p, err)
	}
	if err := p.Rqst.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Rqst, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rqst: %s", p, err)
	}
	return err
}

func (p *LockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockArgs(%+v)", *p)
}

type LockResult struct {
	Success *LockResponse        `thrift:"success,0" json:"success"`
	O1      *NoSuchTxnException  `thrift:"o1,1" json:"o1"`
	O2      *TxnAbortedException `thrift:"o2,2" json:"o2"`
}

func NewLockResult() *LockResult {
	return &LockResult{}
}

var LockResult_Success_DEFAULT *LockResponse

func (p *LockResult) GetSuccess() *LockResponse {
	if !p.IsSetSuccess() {
		return LockResult_Success_DEFAULT
	}
	return p.Success
}

var LockResult_O1_DEFAULT *NoSuchTxnException

func (p *LockResult) GetO1() *NoSuchTxnException {
	if !p.IsSetO1() {
		return LockResult_O1_DEFAULT
	}
	return p.O1
}

var LockResult_O2_DEFAULT *TxnAbortedException

func (p *LockResult) GetO2() *TxnAbortedException {
	if !p.IsSetO2() {
		return LockResult_O2_DEFAULT
	}
	return p.O2
}
func (p *LockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LockResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *LockResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *LockResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &LockResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *LockResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchTxnException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *LockResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &TxnAbortedException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *LockResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lock_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *LockResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *LockResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *LockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockResult(%+v)", *p)
}

type CheckLockArgs struct {
	Rqst *CheckLockRequest `thrift:"rqst,1" json:"rqst"`
}

func NewCheckLockArgs() *CheckLockArgs {
	return &CheckLockArgs{}
}

var CheckLockArgs_Rqst_DEFAULT *CheckLockRequest

func (p *CheckLockArgs) GetRqst() *CheckLockRequest {
	if !p.IsSetRqst() {
		return CheckLockArgs_Rqst_DEFAULT
	}
	return p.Rqst
}
func (p *CheckLockArgs) IsSetRqst() bool {
	return p.Rqst != nil
}

func (p *CheckLockArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckLockArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Rqst = &CheckLockRequest{}
	if err := p.Rqst.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Rqst, err)
	}
	return nil
}

func (p *CheckLockArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("check_lock_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckLockArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rqst", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rqst: %s", p, err)
	}
	if err := p.Rqst.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Rqst, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rqst: %s", p, err)
	}
	return err
}

func (p *CheckLockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckLockArgs(%+v)", *p)
}

type CheckLockResult struct {
	Success *LockResponse        `thrift:"success,0" json:"success"`
	O1      *NoSuchTxnException  `thrift:"o1,1" json:"o1"`
	O2      *TxnAbortedException `thrift:"o2,2" json:"o2"`
	O3      *NoSuchLockException `thrift:"o3,3" json:"o3"`
}

func NewCheckLockResult() *CheckLockResult {
	return &CheckLockResult{}
}

var CheckLockResult_Success_DEFAULT *LockResponse

func (p *CheckLockResult) GetSuccess() *LockResponse {
	if !p.IsSetSuccess() {
		return CheckLockResult_Success_DEFAULT
	}
	return p.Success
}

var CheckLockResult_O1_DEFAULT *NoSuchTxnException

func (p *CheckLockResult) GetO1() *NoSuchTxnException {
	if !p.IsSetO1() {
		return CheckLockResult_O1_DEFAULT
	}
	return p.O1
}

var CheckLockResult_O2_DEFAULT *TxnAbortedException

func (p *CheckLockResult) GetO2() *TxnAbortedException {
	if !p.IsSetO2() {
		return CheckLockResult_O2_DEFAULT
	}
	return p.O2
}

var CheckLockResult_O3_DEFAULT *NoSuchLockException

func (p *CheckLockResult) GetO3() *NoSuchLockException {
	if !p.IsSetO3() {
		return CheckLockResult_O3_DEFAULT
	}
	return p.O3
}
func (p *CheckLockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckLockResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *CheckLockResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *CheckLockResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *CheckLockResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckLockResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &LockResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CheckLockResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchTxnException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *CheckLockResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &TxnAbortedException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *CheckLockResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &NoSuchLockException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *CheckLockResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("check_lock_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckLockResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CheckLockResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CheckLockResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *CheckLockResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *CheckLockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckLockResult(%+v)", *p)
}

type UnlockArgs struct {
	Rqst *UnlockRequest `thrift:"rqst,1" json:"rqst"`
}

func NewUnlockArgs() *UnlockArgs {
	return &UnlockArgs{}
}

var UnlockArgs_Rqst_DEFAULT *UnlockRequest

func (p *UnlockArgs) GetRqst() *UnlockRequest {
	if !p.IsSetRqst() {
		return UnlockArgs_Rqst_DEFAULT
	}
	return p.Rqst
}
func (p *UnlockArgs) IsSetRqst() bool {
	return p.Rqst != nil
}

func (p *UnlockArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnlockArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Rqst = &UnlockRequest{}
	if err := p.Rqst.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Rqst, err)
	}
	return nil
}

func (p *UnlockArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unlock_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnlockArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rqst", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rqst: %s", p, err)
	}
	if err := p.Rqst.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Rqst, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rqst: %s", p, err)
	}
	return err
}

func (p *UnlockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnlockArgs(%+v)", *p)
}

type UnlockResult struct {
	O1 *NoSuchLockException `thrift:"o1,1" json:"o1"`
	O2 *TxnOpenException    `thrift:"o2,2" json:"o2"`
}

func NewUnlockResult() *UnlockResult {
	return &UnlockResult{}
}

var UnlockResult_O1_DEFAULT *NoSuchLockException

func (p *UnlockResult) GetO1() *NoSuchLockException {
	if !p.IsSetO1() {
		return UnlockResult_O1_DEFAULT
	}
	return p.O1
}

var UnlockResult_O2_DEFAULT *TxnOpenException

func (p *UnlockResult) GetO2() *TxnOpenException {
	if !p.IsSetO2() {
		return UnlockResult_O2_DEFAULT
	}
	return p.O2
}
func (p *UnlockResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *UnlockResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *UnlockResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnlockResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchLockException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *UnlockResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &TxnOpenException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *UnlockResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unlock_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnlockResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *UnlockResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *UnlockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnlockResult(%+v)", *p)
}

type ShowLocksArgs struct {
	Rqst *ShowLocksRequest `thrift:"rqst,1" json:"rqst"`
}

func NewShowLocksArgs() *ShowLocksArgs {
	return &ShowLocksArgs{}
}

var ShowLocksArgs_Rqst_DEFAULT *ShowLocksRequest

func (p *ShowLocksArgs) GetRqst() *ShowLocksRequest {
	if !p.IsSetRqst() {
		return ShowLocksArgs_Rqst_DEFAULT
	}
	return p.Rqst
}
func (p *ShowLocksArgs) IsSetRqst() bool {
	return p.Rqst != nil
}

func (p *ShowLocksArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShowLocksArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Rqst = &ShowLocksRequest{}
	if err := p.Rqst.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Rqst, err)
	}
	return nil
}

func (p *ShowLocksArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("show_locks_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ShowLocksArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rqst", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rqst: %s", p, err)
	}
	if err := p.Rqst.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Rqst, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rqst: %s", p, err)
	}
	return err
}

func (p *ShowLocksArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowLocksArgs(%+v)", *p)
}

type ShowLocksResult struct {
	Success *ShowLocksResponse `thrift:"success,0" json:"success"`
}

func NewShowLocksResult() *ShowLocksResult {
	return &ShowLocksResult{}
}

var ShowLocksResult_Success_DEFAULT *ShowLocksResponse

func (p *ShowLocksResult) GetSuccess() *ShowLocksResponse {
	if !p.IsSetSuccess() {
		return ShowLocksResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ShowLocksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ShowLocksResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShowLocksResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ShowLocksResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ShowLocksResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("show_locks_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ShowLocksResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ShowLocksResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowLocksResult(%+v)", *p)
}

type HeartbeatArgs struct {
	Ids *HeartbeatRequest `thrift:"ids,1" json:"ids"`
}

func NewHeartbeatArgs() *HeartbeatArgs {
	return &HeartbeatArgs{}
}

var HeartbeatArgs_Ids_DEFAULT *HeartbeatRequest

func (p *HeartbeatArgs) GetIds() *HeartbeatRequest {
	if !p.IsSetIds() {
		return HeartbeatArgs_Ids_DEFAULT
	}
	return p.Ids
}
func (p *HeartbeatArgs) IsSetIds() bool {
	return p.Ids != nil
}

func (p *HeartbeatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HeartbeatArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Ids = &HeartbeatRequest{}
	if err := p.Ids.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ids, err)
	}
	return nil
}

func (p *HeartbeatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("heartbeat_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HeartbeatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ids", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ids: %s", p, err)
	}
	if err := p.Ids.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Ids, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ids: %s", p, err)
	}
	return err
}

func (p *HeartbeatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HeartbeatArgs(%+v)", *p)
}

type HeartbeatResult struct {
	O1 *NoSuchLockException `thrift:"o1,1" json:"o1"`
	O2 *NoSuchTxnException  `thrift:"o2,2" json:"o2"`
	O3 *TxnAbortedException `thrift:"o3,3" json:"o3"`
}

func NewHeartbeatResult() *HeartbeatResult {
	return &HeartbeatResult{}
}

var HeartbeatResult_O1_DEFAULT *NoSuchLockException

func (p *HeartbeatResult) GetO1() *NoSuchLockException {
	if !p.IsSetO1() {
		return HeartbeatResult_O1_DEFAULT
	}
	return p.O1
}

var HeartbeatResult_O2_DEFAULT *NoSuchTxnException

func (p *HeartbeatResult) GetO2() *NoSuchTxnException {
	if !p.IsSetO2() {
		return HeartbeatResult_O2_DEFAULT
	}
	return p.O2
}

var HeartbeatResult_O3_DEFAULT *TxnAbortedException

func (p *HeartbeatResult) GetO3() *TxnAbortedException {
	if !p.IsSetO3() {
		return HeartbeatResult_O3_DEFAULT
	}
	return p.O3
}
func (p *HeartbeatResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *HeartbeatResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *HeartbeatResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *HeartbeatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HeartbeatResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchLockException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *HeartbeatResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchTxnException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *HeartbeatResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &TxnAbortedException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *HeartbeatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("heartbeat_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HeartbeatResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *HeartbeatResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *HeartbeatResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *HeartbeatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HeartbeatResult(%+v)", *p)
}

type HeartbeatTxnRangeArgs struct {
	Txns *HeartbeatTxnRangeRequest `thrift:"txns,1" json:"txns"`
}

func NewHeartbeatTxnRangeArgs() *HeartbeatTxnRangeArgs {
	return &HeartbeatTxnRangeArgs{}
}

var HeartbeatTxnRangeArgs_Txns_DEFAULT *HeartbeatTxnRangeRequest

func (p *HeartbeatTxnRangeArgs) GetTxns() *HeartbeatTxnRangeRequest {
	if !p.IsSetTxns() {
		return HeartbeatTxnRangeArgs_Txns_DEFAULT
	}
	return p.Txns
}
func (p *HeartbeatTxnRangeArgs) IsSetTxns() bool {
	return p.Txns != nil
}

func (p *HeartbeatTxnRangeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HeartbeatTxnRangeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Txns = &HeartbeatTxnRangeRequest{}
	if err := p.Txns.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Txns, err)
	}
	return nil
}

func (p *HeartbeatTxnRangeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("heartbeat_txn_range_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HeartbeatTxnRangeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("txns", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:txns: %s", p, err)
	}
	if err := p.Txns.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Txns, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:txns: %s", p, err)
	}
	return err
}

func (p *HeartbeatTxnRangeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HeartbeatTxnRangeArgs(%+v)", *p)
}

type HeartbeatTxnRangeResult struct {
	Success *HeartbeatTxnRangeResponse `thrift:"success,0" json:"success"`
}

func NewHeartbeatTxnRangeResult() *HeartbeatTxnRangeResult {
	return &HeartbeatTxnRangeResult{}
}

var HeartbeatTxnRangeResult_Success_DEFAULT *HeartbeatTxnRangeResponse

func (p *HeartbeatTxnRangeResult) GetSuccess() *HeartbeatTxnRangeResponse {
	if !p.IsSetSuccess() {
		return HeartbeatTxnRangeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HeartbeatTxnRangeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HeartbeatTxnRangeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HeartbeatTxnRangeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &HeartbeatTxnRangeResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *HeartbeatTxnRangeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("heartbeat_txn_range_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HeartbeatTxnRangeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *HeartbeatTxnRangeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HeartbeatTxnRangeResult(%+v)", *p)
}

type CompactArgs struct {
	Rqst *CompactionRequest `thrift:"rqst,1" json:"rqst"`
}

func NewCompactArgs() *CompactArgs {
	return &CompactArgs{}
}

var CompactArgs_Rqst_DEFAULT *CompactionRequest

func (p *CompactArgs) GetRqst() *CompactionRequest {
	if !p.IsSetRqst() {
		return CompactArgs_Rqst_DEFAULT
	}
	return p.Rqst
}
func (p *CompactArgs) IsSetRqst() bool {
	return p.Rqst != nil
}

func (p *CompactArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CompactArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Rqst = &CompactionRequest{}
	if err := p.Rqst.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Rqst, err)
	}
	return nil
}

func (p *CompactArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("compact_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CompactArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rqst", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rqst: %s", p, err)
	}
	if err := p.Rqst.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Rqst, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rqst: %s", p, err)
	}
	return err
}

func (p *CompactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompactArgs(%+v)", *p)
}

type CompactResult struct {
}

func NewCompactResult() *CompactResult {
	return &CompactResult{}
}

func (p *CompactResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CompactResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("compact_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CompactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompactResult(%+v)", *p)
}

type ShowCompactArgs struct {
	Rqst *ShowCompactRequest `thrift:"rqst,1" json:"rqst"`
}

func NewShowCompactArgs() *ShowCompactArgs {
	return &ShowCompactArgs{}
}

var ShowCompactArgs_Rqst_DEFAULT *ShowCompactRequest

func (p *ShowCompactArgs) GetRqst() *ShowCompactRequest {
	if !p.IsSetRqst() {
		return ShowCompactArgs_Rqst_DEFAULT
	}
	return p.Rqst
}
func (p *ShowCompactArgs) IsSetRqst() bool {
	return p.Rqst != nil
}

func (p *ShowCompactArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShowCompactArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Rqst = &ShowCompactRequest{}
	if err := p.Rqst.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Rqst, err)
	}
	return nil
}

func (p *ShowCompactArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("show_compact_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ShowCompactArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rqst", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rqst: %s", p, err)
	}
	if err := p.Rqst.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Rqst, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rqst: %s", p, err)
	}
	return err
}

func (p *ShowCompactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowCompactArgs(%+v)", *p)
}

type ShowCompactResult struct {
	Success *ShowCompactResponse `thrift:"success,0" json:"success"`
}

func NewShowCompactResult() *ShowCompactResult {
	return &ShowCompactResult{}
}

var ShowCompactResult_Success_DEFAULT *ShowCompactResponse

func (p *ShowCompactResult) GetSuccess() *ShowCompactResponse {
	if !p.IsSetSuccess() {
		return ShowCompactResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ShowCompactResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ShowCompactResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShowCompactResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ShowCompactResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ShowCompactResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("show_compact_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ShowCompactResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ShowCompactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowCompactResult(%+v)", *p)
}
