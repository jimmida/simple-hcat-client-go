// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hive

import (
	"bytes"
	"fb303"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = fb303.GoUnusedProtection__
var GoUnusedProtection__ int

type HiveObjectType int64

const (
	HiveObjectType_GLOBAL    HiveObjectType = 1
	HiveObjectType_DATABASE  HiveObjectType = 2
	HiveObjectType_TABLE     HiveObjectType = 3
	HiveObjectType_PARTITION HiveObjectType = 4
	HiveObjectType_COLUMN    HiveObjectType = 5
)

func (p HiveObjectType) String() string {
	switch p {
	case HiveObjectType_GLOBAL:
		return "HiveObjectType_GLOBAL"
	case HiveObjectType_DATABASE:
		return "HiveObjectType_DATABASE"
	case HiveObjectType_TABLE:
		return "HiveObjectType_TABLE"
	case HiveObjectType_PARTITION:
		return "HiveObjectType_PARTITION"
	case HiveObjectType_COLUMN:
		return "HiveObjectType_COLUMN"
	}
	return "<UNSET>"
}

func HiveObjectTypeFromString(s string) (HiveObjectType, error) {
	switch s {
	case "HiveObjectType_GLOBAL":
		return HiveObjectType_GLOBAL, nil
	case "HiveObjectType_DATABASE":
		return HiveObjectType_DATABASE, nil
	case "HiveObjectType_TABLE":
		return HiveObjectType_TABLE, nil
	case "HiveObjectType_PARTITION":
		return HiveObjectType_PARTITION, nil
	case "HiveObjectType_COLUMN":
		return HiveObjectType_COLUMN, nil
	}
	return HiveObjectType(0), fmt.Errorf("not a valid HiveObjectType string")
}

func HiveObjectTypePtr(v HiveObjectType) *HiveObjectType { return &v }

type PrincipalType int64

const (
	PrincipalType_USER  PrincipalType = 1
	PrincipalType_ROLE  PrincipalType = 2
	PrincipalType_GROUP PrincipalType = 3
)

func (p PrincipalType) String() string {
	switch p {
	case PrincipalType_USER:
		return "PrincipalType_USER"
	case PrincipalType_ROLE:
		return "PrincipalType_ROLE"
	case PrincipalType_GROUP:
		return "PrincipalType_GROUP"
	}
	return "<UNSET>"
}

func PrincipalTypeFromString(s string) (PrincipalType, error) {
	switch s {
	case "PrincipalType_USER":
		return PrincipalType_USER, nil
	case "PrincipalType_ROLE":
		return PrincipalType_ROLE, nil
	case "PrincipalType_GROUP":
		return PrincipalType_GROUP, nil
	}
	return PrincipalType(0), fmt.Errorf("not a valid PrincipalType string")
}

func PrincipalTypePtr(v PrincipalType) *PrincipalType { return &v }

type PartitionEventType int64

const (
	PartitionEventType_LOAD_DONE PartitionEventType = 1
)

func (p PartitionEventType) String() string {
	switch p {
	case PartitionEventType_LOAD_DONE:
		return "PartitionEventType_LOAD_DONE"
	}
	return "<UNSET>"
}

func PartitionEventTypeFromString(s string) (PartitionEventType, error) {
	switch s {
	case "PartitionEventType_LOAD_DONE":
		return PartitionEventType_LOAD_DONE, nil
	}
	return PartitionEventType(0), fmt.Errorf("not a valid PartitionEventType string")
}

func PartitionEventTypePtr(v PartitionEventType) *PartitionEventType { return &v }

type TxnState int64

const (
	TxnState_COMMITTED TxnState = 1
	TxnState_ABORTED   TxnState = 2
	TxnState_OPEN      TxnState = 3
)

func (p TxnState) String() string {
	switch p {
	case TxnState_COMMITTED:
		return "TxnState_COMMITTED"
	case TxnState_ABORTED:
		return "TxnState_ABORTED"
	case TxnState_OPEN:
		return "TxnState_OPEN"
	}
	return "<UNSET>"
}

func TxnStateFromString(s string) (TxnState, error) {
	switch s {
	case "TxnState_COMMITTED":
		return TxnState_COMMITTED, nil
	case "TxnState_ABORTED":
		return TxnState_ABORTED, nil
	case "TxnState_OPEN":
		return TxnState_OPEN, nil
	}
	return TxnState(0), fmt.Errorf("not a valid TxnState string")
}

func TxnStatePtr(v TxnState) *TxnState { return &v }

type LockLevel int64

const (
	LockLevel_DB        LockLevel = 1
	LockLevel_TABLE     LockLevel = 2
	LockLevel_PARTITION LockLevel = 3
)

func (p LockLevel) String() string {
	switch p {
	case LockLevel_DB:
		return "LockLevel_DB"
	case LockLevel_TABLE:
		return "LockLevel_TABLE"
	case LockLevel_PARTITION:
		return "LockLevel_PARTITION"
	}
	return "<UNSET>"
}

func LockLevelFromString(s string) (LockLevel, error) {
	switch s {
	case "LockLevel_DB":
		return LockLevel_DB, nil
	case "LockLevel_TABLE":
		return LockLevel_TABLE, nil
	case "LockLevel_PARTITION":
		return LockLevel_PARTITION, nil
	}
	return LockLevel(0), fmt.Errorf("not a valid LockLevel string")
}

func LockLevelPtr(v LockLevel) *LockLevel { return &v }

type LockState int64

const (
	LockState_ACQUIRED     LockState = 1
	LockState_WAITING      LockState = 2
	LockState_ABORT        LockState = 3
	LockState_NOT_ACQUIRED LockState = 4
)

func (p LockState) String() string {
	switch p {
	case LockState_ACQUIRED:
		return "LockState_ACQUIRED"
	case LockState_WAITING:
		return "LockState_WAITING"
	case LockState_ABORT:
		return "LockState_ABORT"
	case LockState_NOT_ACQUIRED:
		return "LockState_NOT_ACQUIRED"
	}
	return "<UNSET>"
}

func LockStateFromString(s string) (LockState, error) {
	switch s {
	case "LockState_ACQUIRED":
		return LockState_ACQUIRED, nil
	case "LockState_WAITING":
		return LockState_WAITING, nil
	case "LockState_ABORT":
		return LockState_ABORT, nil
	case "LockState_NOT_ACQUIRED":
		return LockState_NOT_ACQUIRED, nil
	}
	return LockState(0), fmt.Errorf("not a valid LockState string")
}

func LockStatePtr(v LockState) *LockState { return &v }

type LockType int64

const (
	LockType_SHARED_READ  LockType = 1
	LockType_SHARED_WRITE LockType = 2
	LockType_EXCLUSIVE    LockType = 3
)

func (p LockType) String() string {
	switch p {
	case LockType_SHARED_READ:
		return "LockType_SHARED_READ"
	case LockType_SHARED_WRITE:
		return "LockType_SHARED_WRITE"
	case LockType_EXCLUSIVE:
		return "LockType_EXCLUSIVE"
	}
	return "<UNSET>"
}

func LockTypeFromString(s string) (LockType, error) {
	switch s {
	case "LockType_SHARED_READ":
		return LockType_SHARED_READ, nil
	case "LockType_SHARED_WRITE":
		return LockType_SHARED_WRITE, nil
	case "LockType_EXCLUSIVE":
		return LockType_EXCLUSIVE, nil
	}
	return LockType(0), fmt.Errorf("not a valid LockType string")
}

func LockTypePtr(v LockType) *LockType { return &v }

type CompactionType int64

const (
	CompactionType_MINOR CompactionType = 1
	CompactionType_MAJOR CompactionType = 2
)

func (p CompactionType) String() string {
	switch p {
	case CompactionType_MINOR:
		return "CompactionType_MINOR"
	case CompactionType_MAJOR:
		return "CompactionType_MAJOR"
	}
	return "<UNSET>"
}

func CompactionTypeFromString(s string) (CompactionType, error) {
	switch s {
	case "CompactionType_MINOR":
		return CompactionType_MINOR, nil
	case "CompactionType_MAJOR":
		return CompactionType_MAJOR, nil
	}
	return CompactionType(0), fmt.Errorf("not a valid CompactionType string")
}

func CompactionTypePtr(v CompactionType) *CompactionType { return &v }

type FunctionType int64

const (
	FunctionType_JAVA FunctionType = 1
)

func (p FunctionType) String() string {
	switch p {
	case FunctionType_JAVA:
		return "FunctionType_JAVA"
	}
	return "<UNSET>"
}

func FunctionTypeFromString(s string) (FunctionType, error) {
	switch s {
	case "FunctionType_JAVA":
		return FunctionType_JAVA, nil
	}
	return FunctionType(0), fmt.Errorf("not a valid FunctionType string")
}

func FunctionTypePtr(v FunctionType) *FunctionType { return &v }

type ResourceType int64

const (
	ResourceType_JAR     ResourceType = 1
	ResourceType_FILE    ResourceType = 2
	ResourceType_ARCHIVE ResourceType = 3
)

func (p ResourceType) String() string {
	switch p {
	case ResourceType_JAR:
		return "ResourceType_JAR"
	case ResourceType_FILE:
		return "ResourceType_FILE"
	case ResourceType_ARCHIVE:
		return "ResourceType_ARCHIVE"
	}
	return "<UNSET>"
}

func ResourceTypeFromString(s string) (ResourceType, error) {
	switch s {
	case "ResourceType_JAR":
		return ResourceType_JAR, nil
	case "ResourceType_FILE":
		return ResourceType_FILE, nil
	case "ResourceType_ARCHIVE":
		return ResourceType_ARCHIVE, nil
	}
	return ResourceType(0), fmt.Errorf("not a valid ResourceType string")
}

func ResourceTypePtr(v ResourceType) *ResourceType { return &v }

type Version struct {
	Version  string `thrift:"version,1" json:"version"`
	Comments string `thrift:"comments,2" json:"comments"`
}

func NewVersion() *Version {
	return &Version{}
}

func (p *Version) GetVersion() string {
	return p.Version
}

func (p *Version) GetComments() string {
	return p.Comments
}
func (p *Version) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Version) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *Version) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Comments = v
	}
	return nil
}

func (p *Version) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Version"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Version) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:version: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return fmt.Errorf("%T.version (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:version: %s", p, err)
	}
	return err
}

func (p *Version) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("comments", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:comments: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Comments)); err != nil {
		return fmt.Errorf("%T.comments (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:comments: %s", p, err)
	}
	return err
}

func (p *Version) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Version(%+v)", *p)
}

type FieldSchema struct {
	Name    string `thrift:"name,1" json:"name"`
	TypeA1  string `thrift:"type,2" json:"type"`
	Comment string `thrift:"comment,3" json:"comment"`
}

func NewFieldSchema() *FieldSchema {
	return &FieldSchema{}
}

func (p *FieldSchema) GetName() string {
	return p.Name
}

func (p *FieldSchema) GetTypeA1() string {
	return p.TypeA1
}

func (p *FieldSchema) GetComment() string {
	return p.Comment
}
func (p *FieldSchema) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FieldSchema) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *FieldSchema) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *FieldSchema) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Comment = v
	}
	return nil
}

func (p *FieldSchema) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FieldSchema"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FieldSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *FieldSchema) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:type: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:type: %s", p, err)
	}
	return err
}

func (p *FieldSchema) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("comment", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:comment: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Comment)); err != nil {
		return fmt.Errorf("%T.comment (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:comment: %s", p, err)
	}
	return err
}

func (p *FieldSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldSchema(%+v)", *p)
}

type Type struct {
	Name   string         `thrift:"name,1" json:"name"`
	Type1  *string        `thrift:"type1,2" json:"type1"`
	Type2  *string        `thrift:"type2,3" json:"type2"`
	Fields []*FieldSchema `thrift:"fields,4" json:"fields"`
}

func NewType() *Type {
	return &Type{}
}

func (p *Type) GetName() string {
	return p.Name
}

var Type_Type1_DEFAULT string

func (p *Type) GetType1() string {
	if !p.IsSetType1() {
		return Type_Type1_DEFAULT
	}
	return *p.Type1
}

var Type_Type2_DEFAULT string

func (p *Type) GetType2() string {
	if !p.IsSetType2() {
		return Type_Type2_DEFAULT
	}
	return *p.Type2
}

var Type_Fields_DEFAULT []*FieldSchema

func (p *Type) GetFields() []*FieldSchema {
	return p.Fields
}
func (p *Type) IsSetType1() bool {
	return p.Type1 != nil
}

func (p *Type) IsSetType2() bool {
	return p.Type2 != nil
}

func (p *Type) IsSetFields() bool {
	return p.Fields != nil
}

func (p *Type) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Type) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Type) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Type1 = &v
	}
	return nil
}

func (p *Type) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Type2 = &v
	}
	return nil
}

func (p *Type) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FieldSchema, 0, size)
	p.Fields = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &FieldSchema{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.Fields = append(p.Fields, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Type) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Type"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Type) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *Type) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType1() {
		if err := oprot.WriteFieldBegin("type1", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:type1: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Type1)); err != nil {
			return fmt.Errorf("%T.type1 (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:type1: %s", p, err)
		}
	}
	return err
}

func (p *Type) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetType2() {
		if err := oprot.WriteFieldBegin("type2", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:type2: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Type2)); err != nil {
			return fmt.Errorf("%T.type2 (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:type2: %s", p, err)
		}
	}
	return err
}

func (p *Type) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFields() {
		if err := oprot.WriteFieldBegin("fields", thrift.LIST, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:fields: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Fields {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:fields: %s", p, err)
		}
	}
	return err
}

func (p *Type) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Type(%+v)", *p)
}

type HiveObjectRef struct {
	ObjectType HiveObjectType `thrift:"objectType,1" json:"objectType"`
	DbName     string         `thrift:"dbName,2" json:"dbName"`
	ObjectName string         `thrift:"objectName,3" json:"objectName"`
	PartValues []string       `thrift:"partValues,4" json:"partValues"`
	ColumnName string         `thrift:"columnName,5" json:"columnName"`
}

func NewHiveObjectRef() *HiveObjectRef {
	return &HiveObjectRef{}
}

func (p *HiveObjectRef) GetObjectType() HiveObjectType {
	return p.ObjectType
}

func (p *HiveObjectRef) GetDbName() string {
	return p.DbName
}

func (p *HiveObjectRef) GetObjectName() string {
	return p.ObjectName
}

func (p *HiveObjectRef) GetPartValues() []string {
	return p.PartValues
}

func (p *HiveObjectRef) GetColumnName() string {
	return p.ColumnName
}
func (p *HiveObjectRef) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HiveObjectRef) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := HiveObjectType(v)
		p.ObjectType = temp
	}
	return nil
}

func (p *HiveObjectRef) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *HiveObjectRef) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ObjectName = v
	}
	return nil
}

func (p *HiveObjectRef) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartValues = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.PartValues = append(p.PartValues, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *HiveObjectRef) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ColumnName = v
	}
	return nil
}

func (p *HiveObjectRef) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HiveObjectRef"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HiveObjectRef) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("objectType", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:objectType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ObjectType)); err != nil {
		return fmt.Errorf("%T.objectType (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:objectType: %s", p, err)
	}
	return err
}

func (p *HiveObjectRef) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:dbName: %s", p, err)
	}
	return err
}

func (p *HiveObjectRef) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("objectName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:objectName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ObjectName)); err != nil {
		return fmt.Errorf("%T.objectName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:objectName: %s", p, err)
	}
	return err
}

func (p *HiveObjectRef) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partValues", thrift.LIST, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:partValues: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartValues)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartValues {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:partValues: %s", p, err)
	}
	return err
}

func (p *HiveObjectRef) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columnName", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:columnName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ColumnName)); err != nil {
		return fmt.Errorf("%T.columnName (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:columnName: %s", p, err)
	}
	return err
}

func (p *HiveObjectRef) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HiveObjectRef(%+v)", *p)
}

type PrivilegeGrantInfo struct {
	Privilege   string        `thrift:"privilege,1" json:"privilege"`
	CreateTime  int32         `thrift:"createTime,2" json:"createTime"`
	Grantor     string        `thrift:"grantor,3" json:"grantor"`
	GrantorType PrincipalType `thrift:"grantorType,4" json:"grantorType"`
	GrantOption bool          `thrift:"grantOption,5" json:"grantOption"`
}

func NewPrivilegeGrantInfo() *PrivilegeGrantInfo {
	return &PrivilegeGrantInfo{}
}

func (p *PrivilegeGrantInfo) GetPrivilege() string {
	return p.Privilege
}

func (p *PrivilegeGrantInfo) GetCreateTime() int32 {
	return p.CreateTime
}

func (p *PrivilegeGrantInfo) GetGrantor() string {
	return p.Grantor
}

func (p *PrivilegeGrantInfo) GetGrantorType() PrincipalType {
	return p.GrantorType
}

func (p *PrivilegeGrantInfo) GetGrantOption() bool {
	return p.GrantOption
}
func (p *PrivilegeGrantInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PrivilegeGrantInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Privilege = v
	}
	return nil
}

func (p *PrivilegeGrantInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *PrivilegeGrantInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Grantor = v
	}
	return nil
}

func (p *PrivilegeGrantInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := PrincipalType(v)
		p.GrantorType = temp
	}
	return nil
}

func (p *PrivilegeGrantInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.GrantOption = v
	}
	return nil
}

func (p *PrivilegeGrantInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PrivilegeGrantInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PrivilegeGrantInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privilege", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:privilege: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Privilege)); err != nil {
		return fmt.Errorf("%T.privilege (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:privilege: %s", p, err)
	}
	return err
}

func (p *PrivilegeGrantInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:createTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.createTime (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:createTime: %s", p, err)
	}
	return err
}

func (p *PrivilegeGrantInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantor", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:grantor: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Grantor)); err != nil {
		return fmt.Errorf("%T.grantor (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:grantor: %s", p, err)
	}
	return err
}

func (p *PrivilegeGrantInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantorType", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:grantorType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.GrantorType)); err != nil {
		return fmt.Errorf("%T.grantorType (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:grantorType: %s", p, err)
	}
	return err
}

func (p *PrivilegeGrantInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantOption", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:grantOption: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.GrantOption)); err != nil {
		return fmt.Errorf("%T.grantOption (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:grantOption: %s", p, err)
	}
	return err
}

func (p *PrivilegeGrantInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrivilegeGrantInfo(%+v)", *p)
}

type HiveObjectPrivilege struct {
	HiveObject    *HiveObjectRef      `thrift:"hiveObject,1" json:"hiveObject"`
	PrincipalName string              `thrift:"principalName,2" json:"principalName"`
	PrincipalType PrincipalType       `thrift:"principalType,3" json:"principalType"`
	GrantInfo     *PrivilegeGrantInfo `thrift:"grantInfo,4" json:"grantInfo"`
}

func NewHiveObjectPrivilege() *HiveObjectPrivilege {
	return &HiveObjectPrivilege{}
}

var HiveObjectPrivilege_HiveObject_DEFAULT *HiveObjectRef

func (p *HiveObjectPrivilege) GetHiveObject() *HiveObjectRef {
	if !p.IsSetHiveObject() {
		return HiveObjectPrivilege_HiveObject_DEFAULT
	}
	return p.HiveObject
}

func (p *HiveObjectPrivilege) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *HiveObjectPrivilege) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}

var HiveObjectPrivilege_GrantInfo_DEFAULT *PrivilegeGrantInfo

func (p *HiveObjectPrivilege) GetGrantInfo() *PrivilegeGrantInfo {
	if !p.IsSetGrantInfo() {
		return HiveObjectPrivilege_GrantInfo_DEFAULT
	}
	return p.GrantInfo
}
func (p *HiveObjectPrivilege) IsSetHiveObject() bool {
	return p.HiveObject != nil
}

func (p *HiveObjectPrivilege) IsSetGrantInfo() bool {
	return p.GrantInfo != nil
}

func (p *HiveObjectPrivilege) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HiveObjectPrivilege) ReadField1(iprot thrift.TProtocol) error {
	p.HiveObject = &HiveObjectRef{}
	if err := p.HiveObject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.HiveObject, err)
	}
	return nil
}

func (p *HiveObjectPrivilege) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *HiveObjectPrivilege) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *HiveObjectPrivilege) ReadField4(iprot thrift.TProtocol) error {
	p.GrantInfo = &PrivilegeGrantInfo{}
	if err := p.GrantInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GrantInfo, err)
	}
	return nil
}

func (p *HiveObjectPrivilege) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HiveObjectPrivilege"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HiveObjectPrivilege) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:hiveObject: %s", p, err)
	}
	if err := p.HiveObject.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.HiveObject, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:hiveObject: %s", p, err)
	}
	return err
}

func (p *HiveObjectPrivilege) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principalName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:principalName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principalName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:principalName: %s", p, err)
	}
	return err
}

func (p *HiveObjectPrivilege) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principalType", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:principalType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return fmt.Errorf("%T.principalType (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:principalType: %s", p, err)
	}
	return err
}

func (p *HiveObjectPrivilege) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantInfo", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:grantInfo: %s", p, err)
	}
	if err := p.GrantInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.GrantInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:grantInfo: %s", p, err)
	}
	return err
}

func (p *HiveObjectPrivilege) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HiveObjectPrivilege(%+v)", *p)
}

type PrivilegeBag struct {
	Privileges []*HiveObjectPrivilege `thrift:"privileges,1" json:"privileges"`
}

func NewPrivilegeBag() *PrivilegeBag {
	return &PrivilegeBag{}
}

func (p *PrivilegeBag) GetPrivileges() []*HiveObjectPrivilege {
	return p.Privileges
}
func (p *PrivilegeBag) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PrivilegeBag) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*HiveObjectPrivilege, 0, size)
	p.Privileges = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &HiveObjectPrivilege{}
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2, err)
		}
		p.Privileges = append(p.Privileges, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PrivilegeBag) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PrivilegeBag"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PrivilegeBag) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privileges", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:privileges: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Privileges)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Privileges {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:privileges: %s", p, err)
	}
	return err
}

func (p *PrivilegeBag) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrivilegeBag(%+v)", *p)
}

type PrincipalPrivilegeSet struct {
	UserPrivileges  map[string][]*PrivilegeGrantInfo `thrift:"userPrivileges,1" json:"userPrivileges"`
	GroupPrivileges map[string][]*PrivilegeGrantInfo `thrift:"groupPrivileges,2" json:"groupPrivileges"`
	RolePrivileges  map[string][]*PrivilegeGrantInfo `thrift:"rolePrivileges,3" json:"rolePrivileges"`
}

func NewPrincipalPrivilegeSet() *PrincipalPrivilegeSet {
	return &PrincipalPrivilegeSet{}
}

func (p *PrincipalPrivilegeSet) GetUserPrivileges() map[string][]*PrivilegeGrantInfo {
	return p.UserPrivileges
}

func (p *PrincipalPrivilegeSet) GetGroupPrivileges() map[string][]*PrivilegeGrantInfo {
	return p.GroupPrivileges
}

func (p *PrincipalPrivilegeSet) GetRolePrivileges() map[string][]*PrivilegeGrantInfo {
	return p.RolePrivileges
}
func (p *PrincipalPrivilegeSet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PrincipalPrivilegeSet) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]*PrivilegeGrantInfo, size)
	p.UserPrivileges = tMap
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key3 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]*PrivilegeGrantInfo, 0, size)
		_val4 := tSlice
		for i := 0; i < size; i++ {
			_elem5 := &PrivilegeGrantInfo{}
			if err := _elem5.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _elem5, err)
			}
			_val4 = append(_val4, _elem5)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.UserPrivileges[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *PrincipalPrivilegeSet) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]*PrivilegeGrantInfo, size)
	p.GroupPrivileges = tMap
	for i := 0; i < size; i++ {
		var _key6 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key6 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]*PrivilegeGrantInfo, 0, size)
		_val7 := tSlice
		for i := 0; i < size; i++ {
			_elem8 := &PrivilegeGrantInfo{}
			if err := _elem8.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _elem8, err)
			}
			_val7 = append(_val7, _elem8)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.GroupPrivileges[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *PrincipalPrivilegeSet) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]*PrivilegeGrantInfo, size)
	p.RolePrivileges = tMap
	for i := 0; i < size; i++ {
		var _key9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key9 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]*PrivilegeGrantInfo, 0, size)
		_val10 := tSlice
		for i := 0; i < size; i++ {
			_elem11 := &PrivilegeGrantInfo{}
			if err := _elem11.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _elem11, err)
			}
			_val10 = append(_val10, _elem11)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.RolePrivileges[_key9] = _val10
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *PrincipalPrivilegeSet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PrincipalPrivilegeSet"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PrincipalPrivilegeSet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userPrivileges", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:userPrivileges: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.UserPrivileges)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.UserPrivileges {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:userPrivileges: %s", p, err)
	}
	return err
}

func (p *PrincipalPrivilegeSet) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupPrivileges", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupPrivileges: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.GroupPrivileges)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.GroupPrivileges {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupPrivileges: %s", p, err)
	}
	return err
}

func (p *PrincipalPrivilegeSet) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rolePrivileges", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:rolePrivileges: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.RolePrivileges)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.RolePrivileges {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:rolePrivileges: %s", p, err)
	}
	return err
}

func (p *PrincipalPrivilegeSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrincipalPrivilegeSet(%+v)", *p)
}

type Role struct {
	RoleName   string `thrift:"roleName,1" json:"roleName"`
	CreateTime int32  `thrift:"createTime,2" json:"createTime"`
	OwnerName  string `thrift:"ownerName,3" json:"ownerName"`
}

func NewRole() *Role {
	return &Role{}
}

func (p *Role) GetRoleName() string {
	return p.RoleName
}

func (p *Role) GetCreateTime() int32 {
	return p.CreateTime
}

func (p *Role) GetOwnerName() string {
	return p.OwnerName
}
func (p *Role) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Role) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *Role) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *Role) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.OwnerName = v
	}
	return nil
}

func (p *Role) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Role"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Role) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:roleName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return fmt.Errorf("%T.roleName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:roleName: %s", p, err)
	}
	return err
}

func (p *Role) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:createTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.createTime (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:createTime: %s", p, err)
	}
	return err
}

func (p *Role) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ownerName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ownerName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OwnerName)); err != nil {
		return fmt.Errorf("%T.ownerName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ownerName: %s", p, err)
	}
	return err
}

func (p *Role) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Role(%+v)", *p)
}

type RolePrincipalGrant struct {
	RoleName             string        `thrift:"roleName,1" json:"roleName"`
	PrincipalName        string        `thrift:"principalName,2" json:"principalName"`
	PrincipalType        PrincipalType `thrift:"principalType,3" json:"principalType"`
	GrantOption          bool          `thrift:"grantOption,4" json:"grantOption"`
	GrantTime            int32         `thrift:"grantTime,5" json:"grantTime"`
	GrantorName          string        `thrift:"grantorName,6" json:"grantorName"`
	GrantorPrincipalType PrincipalType `thrift:"grantorPrincipalType,7" json:"grantorPrincipalType"`
}

func NewRolePrincipalGrant() *RolePrincipalGrant {
	return &RolePrincipalGrant{}
}

func (p *RolePrincipalGrant) GetRoleName() string {
	return p.RoleName
}

func (p *RolePrincipalGrant) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *RolePrincipalGrant) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}

func (p *RolePrincipalGrant) GetGrantOption() bool {
	return p.GrantOption
}

func (p *RolePrincipalGrant) GetGrantTime() int32 {
	return p.GrantTime
}

func (p *RolePrincipalGrant) GetGrantorName() string {
	return p.GrantorName
}

func (p *RolePrincipalGrant) GetGrantorPrincipalType() PrincipalType {
	return p.GrantorPrincipalType
}
func (p *RolePrincipalGrant) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RolePrincipalGrant) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *RolePrincipalGrant) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *RolePrincipalGrant) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *RolePrincipalGrant) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.GrantOption = v
	}
	return nil
}

func (p *RolePrincipalGrant) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.GrantTime = v
	}
	return nil
}

func (p *RolePrincipalGrant) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.GrantorName = v
	}
	return nil
}

func (p *RolePrincipalGrant) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := PrincipalType(v)
		p.GrantorPrincipalType = temp
	}
	return nil
}

func (p *RolePrincipalGrant) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RolePrincipalGrant"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RolePrincipalGrant) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:roleName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return fmt.Errorf("%T.roleName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:roleName: %s", p, err)
	}
	return err
}

func (p *RolePrincipalGrant) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principalName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:principalName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principalName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:principalName: %s", p, err)
	}
	return err
}

func (p *RolePrincipalGrant) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principalType", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:principalType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return fmt.Errorf("%T.principalType (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:principalType: %s", p, err)
	}
	return err
}

func (p *RolePrincipalGrant) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantOption", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:grantOption: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.GrantOption)); err != nil {
		return fmt.Errorf("%T.grantOption (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:grantOption: %s", p, err)
	}
	return err
}

func (p *RolePrincipalGrant) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantTime", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:grantTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.GrantTime)); err != nil {
		return fmt.Errorf("%T.grantTime (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:grantTime: %s", p, err)
	}
	return err
}

func (p *RolePrincipalGrant) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantorName", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:grantorName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GrantorName)); err != nil {
		return fmt.Errorf("%T.grantorName (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:grantorName: %s", p, err)
	}
	return err
}

func (p *RolePrincipalGrant) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantorPrincipalType", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:grantorPrincipalType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.GrantorPrincipalType)); err != nil {
		return fmt.Errorf("%T.grantorPrincipalType (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:grantorPrincipalType: %s", p, err)
	}
	return err
}

func (p *RolePrincipalGrant) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RolePrincipalGrant(%+v)", *p)
}

type GetRoleGrantsForPrincipalRequest struct {
	PrincipalName string        `thrift:"principal_name,1,required" json:"principal_name"`
	PrincipalType PrincipalType `thrift:"principal_type,2,required" json:"principal_type"`
}

func NewGetRoleGrantsForPrincipalRequest() *GetRoleGrantsForPrincipalRequest {
	return &GetRoleGrantsForPrincipalRequest{}
}

func (p *GetRoleGrantsForPrincipalRequest) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *GetRoleGrantsForPrincipalRequest) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}
func (p *GetRoleGrantsForPrincipalRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRoleGrantsForPrincipalRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *GetRoleGrantsForPrincipalRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *GetRoleGrantsForPrincipalRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetRoleGrantsForPrincipalRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRoleGrantsForPrincipalRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principal_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:principal_name: %s", p, err)
	}
	return err
}

func (p *GetRoleGrantsForPrincipalRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:principal_type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return fmt.Errorf("%T.principal_type (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:principal_type: %s", p, err)
	}
	return err
}

func (p *GetRoleGrantsForPrincipalRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoleGrantsForPrincipalRequest(%+v)", *p)
}

type GetRoleGrantsForPrincipalResponse struct {
	PrincipalGrants []*RolePrincipalGrant `thrift:"principalGrants,1,required" json:"principalGrants"`
}

func NewGetRoleGrantsForPrincipalResponse() *GetRoleGrantsForPrincipalResponse {
	return &GetRoleGrantsForPrincipalResponse{}
}

func (p *GetRoleGrantsForPrincipalResponse) GetPrincipalGrants() []*RolePrincipalGrant {
	return p.PrincipalGrants
}
func (p *GetRoleGrantsForPrincipalResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRoleGrantsForPrincipalResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*RolePrincipalGrant, 0, size)
	p.PrincipalGrants = tSlice
	for i := 0; i < size; i++ {
		_elem12 := &RolePrincipalGrant{}
		if err := _elem12.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem12, err)
		}
		p.PrincipalGrants = append(p.PrincipalGrants, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetRoleGrantsForPrincipalResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetRoleGrantsForPrincipalResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRoleGrantsForPrincipalResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principalGrants", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:principalGrants: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PrincipalGrants)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PrincipalGrants {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:principalGrants: %s", p, err)
	}
	return err
}

func (p *GetRoleGrantsForPrincipalResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoleGrantsForPrincipalResponse(%+v)", *p)
}

type GetPrincipalsInRoleRequest struct {
	RoleName string `thrift:"roleName,1,required" json:"roleName"`
}

func NewGetPrincipalsInRoleRequest() *GetPrincipalsInRoleRequest {
	return &GetPrincipalsInRoleRequest{}
}

func (p *GetPrincipalsInRoleRequest) GetRoleName() string {
	return p.RoleName
}
func (p *GetPrincipalsInRoleRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPrincipalsInRoleRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *GetPrincipalsInRoleRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPrincipalsInRoleRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPrincipalsInRoleRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:roleName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return fmt.Errorf("%T.roleName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:roleName: %s", p, err)
	}
	return err
}

func (p *GetPrincipalsInRoleRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPrincipalsInRoleRequest(%+v)", *p)
}

type GetPrincipalsInRoleResponse struct {
	PrincipalGrants []*RolePrincipalGrant `thrift:"principalGrants,1,required" json:"principalGrants"`
}

func NewGetPrincipalsInRoleResponse() *GetPrincipalsInRoleResponse {
	return &GetPrincipalsInRoleResponse{}
}

func (p *GetPrincipalsInRoleResponse) GetPrincipalGrants() []*RolePrincipalGrant {
	return p.PrincipalGrants
}
func (p *GetPrincipalsInRoleResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPrincipalsInRoleResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*RolePrincipalGrant, 0, size)
	p.PrincipalGrants = tSlice
	for i := 0; i < size; i++ {
		_elem13 := &RolePrincipalGrant{}
		if err := _elem13.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem13, err)
		}
		p.PrincipalGrants = append(p.PrincipalGrants, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPrincipalsInRoleResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPrincipalsInRoleResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPrincipalsInRoleResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principalGrants", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:principalGrants: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PrincipalGrants)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PrincipalGrants {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:principalGrants: %s", p, err)
	}
	return err
}

func (p *GetPrincipalsInRoleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPrincipalsInRoleResponse(%+v)", *p)
}

type Database struct {
	Name        string                 `thrift:"name,1" json:"name"`
	Description string                 `thrift:"description,2" json:"description"`
	LocationUri string                 `thrift:"locationUri,3" json:"locationUri"`
	Parameters  map[string]string      `thrift:"parameters,4" json:"parameters"`
	Privileges  *PrincipalPrivilegeSet `thrift:"privileges,5" json:"privileges"`
	OwnerName   *string                `thrift:"ownerName,6" json:"ownerName"`
	OwnerType   *PrincipalType         `thrift:"ownerType,7" json:"ownerType"`
}

func NewDatabase() *Database {
	return &Database{}
}

func (p *Database) GetName() string {
	return p.Name
}

func (p *Database) GetDescription() string {
	return p.Description
}

func (p *Database) GetLocationUri() string {
	return p.LocationUri
}

func (p *Database) GetParameters() map[string]string {
	return p.Parameters
}

var Database_Privileges_DEFAULT *PrincipalPrivilegeSet

func (p *Database) GetPrivileges() *PrincipalPrivilegeSet {
	if !p.IsSetPrivileges() {
		return Database_Privileges_DEFAULT
	}
	return p.Privileges
}

var Database_OwnerName_DEFAULT string

func (p *Database) GetOwnerName() string {
	if !p.IsSetOwnerName() {
		return Database_OwnerName_DEFAULT
	}
	return *p.OwnerName
}

var Database_OwnerType_DEFAULT PrincipalType

func (p *Database) GetOwnerType() PrincipalType {
	if !p.IsSetOwnerType() {
		return Database_OwnerType_DEFAULT
	}
	return *p.OwnerType
}
func (p *Database) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *Database) IsSetOwnerName() bool {
	return p.OwnerName != nil
}

func (p *Database) IsSetOwnerType() bool {
	return p.OwnerType != nil
}

func (p *Database) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Database) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Database) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *Database) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.LocationUri = v
	}
	return nil
}

func (p *Database) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Parameters = tMap
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key14 = v
		}
		var _val15 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val15 = v
		}
		p.Parameters[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Database) ReadField5(iprot thrift.TProtocol) error {
	p.Privileges = &PrincipalPrivilegeSet{}
	if err := p.Privileges.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Privileges, err)
	}
	return nil
}

func (p *Database) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.OwnerName = &v
	}
	return nil
}

func (p *Database) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := PrincipalType(v)
		p.OwnerType = &temp
	}
	return nil
}

func (p *Database) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Database"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Database) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *Database) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:description: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return fmt.Errorf("%T.description (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:description: %s", p, err)
	}
	return err
}

func (p *Database) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("locationUri", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:locationUri: %s", p, err)
	}
	if err := oprot.WriteString(string(p.LocationUri)); err != nil {
		return fmt.Errorf("%T.locationUri (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:locationUri: %s", p, err)
	}
	return err
}

func (p *Database) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:parameters: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Parameters {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:parameters: %s", p, err)
	}
	return err
}

func (p *Database) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivileges() {
		if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:privileges: %s", p, err)
		}
		if err := p.Privileges.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Privileges, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:privileges: %s", p, err)
		}
	}
	return err
}

func (p *Database) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerName() {
		if err := oprot.WriteFieldBegin("ownerName", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:ownerName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.OwnerName)); err != nil {
			return fmt.Errorf("%T.ownerName (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:ownerName: %s", p, err)
		}
	}
	return err
}

func (p *Database) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerType() {
		if err := oprot.WriteFieldBegin("ownerType", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:ownerType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.OwnerType)); err != nil {
			return fmt.Errorf("%T.ownerType (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:ownerType: %s", p, err)
		}
	}
	return err
}

func (p *Database) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Database(%+v)", *p)
}

type SerDeInfo struct {
	Name             string            `thrift:"name,1" json:"name"`
	SerializationLib string            `thrift:"serializationLib,2" json:"serializationLib"`
	Parameters       map[string]string `thrift:"parameters,3" json:"parameters"`
}

func NewSerDeInfo() *SerDeInfo {
	return &SerDeInfo{}
}

func (p *SerDeInfo) GetName() string {
	return p.Name
}

func (p *SerDeInfo) GetSerializationLib() string {
	return p.SerializationLib
}

func (p *SerDeInfo) GetParameters() map[string]string {
	return p.Parameters
}
func (p *SerDeInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SerDeInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *SerDeInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SerializationLib = v
	}
	return nil
}

func (p *SerDeInfo) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Parameters = tMap
	for i := 0; i < size; i++ {
		var _key16 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key16 = v
		}
		var _val17 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val17 = v
		}
		p.Parameters[_key16] = _val17
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *SerDeInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SerDeInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SerDeInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *SerDeInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serializationLib", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:serializationLib: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SerializationLib)); err != nil {
		return fmt.Errorf("%T.serializationLib (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:serializationLib: %s", p, err)
	}
	return err
}

func (p *SerDeInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:parameters: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Parameters {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:parameters: %s", p, err)
	}
	return err
}

func (p *SerDeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SerDeInfo(%+v)", *p)
}

type Order struct {
	Col   string `thrift:"col,1" json:"col"`
	Order int32  `thrift:"order,2" json:"order"`
}

func NewOrder() *Order {
	return &Order{}
}

func (p *Order) GetCol() string {
	return p.Col
}

func (p *Order) GetOrder() int32 {
	return p.Order
}
func (p *Order) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Order) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Col = v
	}
	return nil
}

func (p *Order) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Order = v
	}
	return nil
}

func (p *Order) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Order"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Order) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("col", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:col: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Col)); err != nil {
		return fmt.Errorf("%T.col (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:col: %s", p, err)
	}
	return err
}

func (p *Order) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:order: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Order)); err != nil {
		return fmt.Errorf("%T.order (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:order: %s", p, err)
	}
	return err
}

func (p *Order) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Order(%+v)", *p)
}

type StorageDescriptor struct {
	Cols         []*FieldSchema    `thrift:"cols,1" json:"cols"`
	Location     string            `thrift:"location,2" json:"location"`
	InputFormat  string            `thrift:"inputFormat,3" json:"inputFormat"`
	OutputFormat string            `thrift:"outputFormat,4" json:"outputFormat"`
	Compressed   bool              `thrift:"compressed,5" json:"compressed"`
	NumBuckets   int32             `thrift:"numBuckets,6" json:"numBuckets"`
	SerdeInfo    *SerDeInfo        `thrift:"serdeInfo,7" json:"serdeInfo"`
	BucketCols   []string          `thrift:"bucketCols,8" json:"bucketCols"`
	SortCols     []*Order          `thrift:"sortCols,9" json:"sortCols"`
	Parameters   map[string]string `thrift:"parameters,10" json:"parameters"`
	// unused field # 11
	StoredAsSubDirectories *bool `thrift:"storedAsSubDirectories,12" json:"storedAsSubDirectories"`
}

func NewStorageDescriptor() *StorageDescriptor {
	return &StorageDescriptor{}
}

func (p *StorageDescriptor) GetCols() []*FieldSchema {
	return p.Cols
}

func (p *StorageDescriptor) GetLocation() string {
	return p.Location
}

func (p *StorageDescriptor) GetInputFormat() string {
	return p.InputFormat
}

func (p *StorageDescriptor) GetOutputFormat() string {
	return p.OutputFormat
}

func (p *StorageDescriptor) GetCompressed() bool {
	return p.Compressed
}

func (p *StorageDescriptor) GetNumBuckets() int32 {
	return p.NumBuckets
}

var StorageDescriptor_SerdeInfo_DEFAULT *SerDeInfo

func (p *StorageDescriptor) GetSerdeInfo() *SerDeInfo {
	if !p.IsSetSerdeInfo() {
		return StorageDescriptor_SerdeInfo_DEFAULT
	}
	return p.SerdeInfo
}

func (p *StorageDescriptor) GetBucketCols() []string {
	return p.BucketCols
}

func (p *StorageDescriptor) GetSortCols() []*Order {
	return p.SortCols
}

func (p *StorageDescriptor) GetParameters() map[string]string {
	return p.Parameters
}

var StorageDescriptor_StoredAsSubDirectories_DEFAULT bool

func (p *StorageDescriptor) GetStoredAsSubDirectories() bool {
	if !p.IsSetStoredAsSubDirectories() {
		return StorageDescriptor_StoredAsSubDirectories_DEFAULT
	}
	return *p.StoredAsSubDirectories
}
func (p *StorageDescriptor) IsSetSerdeInfo() bool {
	return p.SerdeInfo != nil
}

func (p *StorageDescriptor) IsSetStoredAsSubDirectories() bool {
	return p.StoredAsSubDirectories != nil
}

func (p *StorageDescriptor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StorageDescriptor) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FieldSchema, 0, size)
	p.Cols = tSlice
	for i := 0; i < size; i++ {
		_elem18 := &FieldSchema{}
		if err := _elem18.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem18, err)
		}
		p.Cols = append(p.Cols, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *StorageDescriptor) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Location = v
	}
	return nil
}

func (p *StorageDescriptor) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.InputFormat = v
	}
	return nil
}

func (p *StorageDescriptor) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.OutputFormat = v
	}
	return nil
}

func (p *StorageDescriptor) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Compressed = v
	}
	return nil
}

func (p *StorageDescriptor) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.NumBuckets = v
	}
	return nil
}

func (p *StorageDescriptor) ReadField7(iprot thrift.TProtocol) error {
	p.SerdeInfo = &SerDeInfo{}
	if err := p.SerdeInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SerdeInfo, err)
	}
	return nil
}

func (p *StorageDescriptor) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.BucketCols = tSlice
	for i := 0; i < size; i++ {
		var _elem19 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem19 = v
		}
		p.BucketCols = append(p.BucketCols, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *StorageDescriptor) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Order, 0, size)
	p.SortCols = tSlice
	for i := 0; i < size; i++ {
		_elem20 := &Order{}
		if err := _elem20.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem20, err)
		}
		p.SortCols = append(p.SortCols, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *StorageDescriptor) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Parameters = tMap
	for i := 0; i < size; i++ {
		var _key21 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key21 = v
		}
		var _val22 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val22 = v
		}
		p.Parameters[_key21] = _val22
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *StorageDescriptor) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.StoredAsSubDirectories = &v
	}
	return nil
}

func (p *StorageDescriptor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StorageDescriptor"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StorageDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cols", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:cols: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cols)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Cols {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:cols: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("location", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:location: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Location)); err != nil {
		return fmt.Errorf("%T.location (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:location: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inputFormat", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:inputFormat: %s", p, err)
	}
	if err := oprot.WriteString(string(p.InputFormat)); err != nil {
		return fmt.Errorf("%T.inputFormat (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:inputFormat: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("outputFormat", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:outputFormat: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OutputFormat)); err != nil {
		return fmt.Errorf("%T.outputFormat (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:outputFormat: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compressed", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:compressed: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Compressed)); err != nil {
		return fmt.Errorf("%T.compressed (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:compressed: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numBuckets", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:numBuckets: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NumBuckets)); err != nil {
		return fmt.Errorf("%T.numBuckets (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:numBuckets: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serdeInfo", thrift.STRUCT, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:serdeInfo: %s", p, err)
	}
	if err := p.SerdeInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.SerdeInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:serdeInfo: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bucketCols", thrift.LIST, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:bucketCols: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.BucketCols)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.BucketCols {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:bucketCols: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sortCols", thrift.LIST, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:sortCols: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SortCols)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.SortCols {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:sortCols: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:parameters: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Parameters {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:parameters: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoredAsSubDirectories() {
		if err := oprot.WriteFieldBegin("storedAsSubDirectories", thrift.BOOL, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:storedAsSubDirectories: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.StoredAsSubDirectories)); err != nil {
			return fmt.Errorf("%T.storedAsSubDirectories (12) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:storedAsSubDirectories: %s", p, err)
		}
	}
	return err
}

func (p *StorageDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageDescriptor(%+v)", *p)
}

type Table struct {
	TableName        string                 `thrift:"tableName,1" json:"tableName"`
	DbName           string                 `thrift:"dbName,2" json:"dbName"`
	Owner            string                 `thrift:"owner,3" json:"owner"`
	CreateTime       int32                  `thrift:"createTime,4" json:"createTime"`
	LastAccessTime   int32                  `thrift:"lastAccessTime,5" json:"lastAccessTime"`
	Retention        int32                  `thrift:"retention,6" json:"retention"`
	Sd               *StorageDescriptor     `thrift:"sd,7" json:"sd"`
	PartitionKeys    []*FieldSchema         `thrift:"partitionKeys,8" json:"partitionKeys"`
	Parameters       map[string]string      `thrift:"parameters,9" json:"parameters"`
	ViewOriginalText string                 `thrift:"viewOriginalText,10" json:"viewOriginalText"`
	ViewExpandedText string                 `thrift:"viewExpandedText,11" json:"viewExpandedText"`
	TableType        string                 `thrift:"tableType,12" json:"tableType"`
	Privileges       *PrincipalPrivilegeSet `thrift:"privileges,13" json:"privileges"`
}

func NewTable() *Table {
	return &Table{}
}

func (p *Table) GetTableName() string {
	return p.TableName
}

func (p *Table) GetDbName() string {
	return p.DbName
}

func (p *Table) GetOwner() string {
	return p.Owner
}

func (p *Table) GetCreateTime() int32 {
	return p.CreateTime
}

func (p *Table) GetLastAccessTime() int32 {
	return p.LastAccessTime
}

func (p *Table) GetRetention() int32 {
	return p.Retention
}

var Table_Sd_DEFAULT *StorageDescriptor

func (p *Table) GetSd() *StorageDescriptor {
	if !p.IsSetSd() {
		return Table_Sd_DEFAULT
	}
	return p.Sd
}

func (p *Table) GetPartitionKeys() []*FieldSchema {
	return p.PartitionKeys
}

func (p *Table) GetParameters() map[string]string {
	return p.Parameters
}

func (p *Table) GetViewOriginalText() string {
	return p.ViewOriginalText
}

func (p *Table) GetViewExpandedText() string {
	return p.ViewExpandedText
}

func (p *Table) GetTableType() string {
	return p.TableType
}

var Table_Privileges_DEFAULT *PrincipalPrivilegeSet

func (p *Table) GetPrivileges() *PrincipalPrivilegeSet {
	if !p.IsSetPrivileges() {
		return Table_Privileges_DEFAULT
	}
	return p.Privileges
}
func (p *Table) IsSetSd() bool {
	return p.Sd != nil
}

func (p *Table) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *Table) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Table) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *Table) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *Table) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Owner = v
	}
	return nil
}

func (p *Table) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *Table) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.LastAccessTime = v
	}
	return nil
}

func (p *Table) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Retention = v
	}
	return nil
}

func (p *Table) ReadField7(iprot thrift.TProtocol) error {
	p.Sd = &StorageDescriptor{}
	if err := p.Sd.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Sd, err)
	}
	return nil
}

func (p *Table) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FieldSchema, 0, size)
	p.PartitionKeys = tSlice
	for i := 0; i < size; i++ {
		_elem23 := &FieldSchema{}
		if err := _elem23.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem23, err)
		}
		p.PartitionKeys = append(p.PartitionKeys, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Table) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Parameters = tMap
	for i := 0; i < size; i++ {
		var _key24 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key24 = v
		}
		var _val25 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val25 = v
		}
		p.Parameters[_key24] = _val25
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Table) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.ViewOriginalText = v
	}
	return nil
}

func (p *Table) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.ViewExpandedText = v
	}
	return nil
}

func (p *Table) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.TableType = v
	}
	return nil
}

func (p *Table) ReadField13(iprot thrift.TProtocol) error {
	p.Privileges = &PrincipalPrivilegeSet{}
	if err := p.Privileges.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Privileges, err)
	}
	return nil
}

func (p *Table) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Table"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Table) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
	}
	return err
}

func (p *Table) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:dbName: %s", p, err)
	}
	return err
}

func (p *Table) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("owner", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:owner: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Owner)); err != nil {
		return fmt.Errorf("%T.owner (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:owner: %s", p, err)
	}
	return err
}

func (p *Table) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:createTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.createTime (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:createTime: %s", p, err)
	}
	return err
}

func (p *Table) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastAccessTime", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:lastAccessTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.LastAccessTime)); err != nil {
		return fmt.Errorf("%T.lastAccessTime (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:lastAccessTime: %s", p, err)
	}
	return err
}

func (p *Table) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("retention", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:retention: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Retention)); err != nil {
		return fmt.Errorf("%T.retention (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:retention: %s", p, err)
	}
	return err
}

func (p *Table) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sd", thrift.STRUCT, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:sd: %s", p, err)
	}
	if err := p.Sd.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Sd, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:sd: %s", p, err)
	}
	return err
}

func (p *Table) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionKeys", thrift.LIST, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:partitionKeys: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartitionKeys)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartitionKeys {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:partitionKeys: %s", p, err)
	}
	return err
}

func (p *Table) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:parameters: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Parameters {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:parameters: %s", p, err)
	}
	return err
}

func (p *Table) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("viewOriginalText", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:viewOriginalText: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ViewOriginalText)); err != nil {
		return fmt.Errorf("%T.viewOriginalText (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:viewOriginalText: %s", p, err)
	}
	return err
}

func (p *Table) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("viewExpandedText", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:viewExpandedText: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ViewExpandedText)); err != nil {
		return fmt.Errorf("%T.viewExpandedText (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:viewExpandedText: %s", p, err)
	}
	return err
}

func (p *Table) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableType", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:tableType: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableType)); err != nil {
		return fmt.Errorf("%T.tableType (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:tableType: %s", p, err)
	}
	return err
}

func (p *Table) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivileges() {
		if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:privileges: %s", p, err)
		}
		if err := p.Privileges.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Privileges, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:privileges: %s", p, err)
		}
	}
	return err
}

func (p *Table) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Table(%+v)", *p)
}

type Partition struct {
	Values         []string               `thrift:"values,1" json:"values"`
	DbName         string                 `thrift:"dbName,2" json:"dbName"`
	TableName      string                 `thrift:"tableName,3" json:"tableName"`
	CreateTime     int32                  `thrift:"createTime,4" json:"createTime"`
	LastAccessTime int32                  `thrift:"lastAccessTime,5" json:"lastAccessTime"`
	Sd             *StorageDescriptor     `thrift:"sd,6" json:"sd"`
	Parameters     map[string]string      `thrift:"parameters,7" json:"parameters"`
	Privileges     *PrincipalPrivilegeSet `thrift:"privileges,8" json:"privileges"`
}

func NewPartition() *Partition {
	return &Partition{}
}

func (p *Partition) GetValues() []string {
	return p.Values
}

func (p *Partition) GetDbName() string {
	return p.DbName
}

func (p *Partition) GetTableName() string {
	return p.TableName
}

func (p *Partition) GetCreateTime() int32 {
	return p.CreateTime
}

func (p *Partition) GetLastAccessTime() int32 {
	return p.LastAccessTime
}

var Partition_Sd_DEFAULT *StorageDescriptor

func (p *Partition) GetSd() *StorageDescriptor {
	if !p.IsSetSd() {
		return Partition_Sd_DEFAULT
	}
	return p.Sd
}

func (p *Partition) GetParameters() map[string]string {
	return p.Parameters
}

var Partition_Privileges_DEFAULT *PrincipalPrivilegeSet

func (p *Partition) GetPrivileges() *PrincipalPrivilegeSet {
	if !p.IsSetPrivileges() {
		return Partition_Privileges_DEFAULT
	}
	return p.Privileges
}
func (p *Partition) IsSetSd() bool {
	return p.Sd != nil
}

func (p *Partition) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *Partition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Partition) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Values = tSlice
	for i := 0; i < size; i++ {
		var _elem26 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem26 = v
		}
		p.Values = append(p.Values, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Partition) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *Partition) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *Partition) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *Partition) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.LastAccessTime = v
	}
	return nil
}

func (p *Partition) ReadField6(iprot thrift.TProtocol) error {
	p.Sd = &StorageDescriptor{}
	if err := p.Sd.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Sd, err)
	}
	return nil
}

func (p *Partition) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Parameters = tMap
	for i := 0; i < size; i++ {
		var _key27 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key27 = v
		}
		var _val28 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val28 = v
		}
		p.Parameters[_key27] = _val28
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Partition) ReadField8(iprot thrift.TProtocol) error {
	p.Privileges = &PrincipalPrivilegeSet{}
	if err := p.Privileges.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Privileges, err)
	}
	return nil
}

func (p *Partition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Partition"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Partition) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("values", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:values: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Values)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Values {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:values: %s", p, err)
	}
	return err
}

func (p *Partition) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:dbName: %s", p, err)
	}
	return err
}

func (p *Partition) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:tableName: %s", p, err)
	}
	return err
}

func (p *Partition) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:createTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.createTime (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:createTime: %s", p, err)
	}
	return err
}

func (p *Partition) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastAccessTime", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:lastAccessTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.LastAccessTime)); err != nil {
		return fmt.Errorf("%T.lastAccessTime (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:lastAccessTime: %s", p, err)
	}
	return err
}

func (p *Partition) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sd", thrift.STRUCT, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:sd: %s", p, err)
	}
	if err := p.Sd.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Sd, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:sd: %s", p, err)
	}
	return err
}

func (p *Partition) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:parameters: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Parameters {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:parameters: %s", p, err)
	}
	return err
}

func (p *Partition) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivileges() {
		if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:privileges: %s", p, err)
		}
		if err := p.Privileges.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Privileges, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:privileges: %s", p, err)
		}
	}
	return err
}

func (p *Partition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Partition(%+v)", *p)
}

type Index struct {
	IndexName         string             `thrift:"indexName,1" json:"indexName"`
	IndexHandlerClass string             `thrift:"indexHandlerClass,2" json:"indexHandlerClass"`
	DbName            string             `thrift:"dbName,3" json:"dbName"`
	OrigTableName     string             `thrift:"origTableName,4" json:"origTableName"`
	CreateTime        int32              `thrift:"createTime,5" json:"createTime"`
	LastAccessTime    int32              `thrift:"lastAccessTime,6" json:"lastAccessTime"`
	IndexTableName    string             `thrift:"indexTableName,7" json:"indexTableName"`
	Sd                *StorageDescriptor `thrift:"sd,8" json:"sd"`
	Parameters        map[string]string  `thrift:"parameters,9" json:"parameters"`
	DeferredRebuild   bool               `thrift:"deferredRebuild,10" json:"deferredRebuild"`
}

func NewIndex() *Index {
	return &Index{}
}

func (p *Index) GetIndexName() string {
	return p.IndexName
}

func (p *Index) GetIndexHandlerClass() string {
	return p.IndexHandlerClass
}

func (p *Index) GetDbName() string {
	return p.DbName
}

func (p *Index) GetOrigTableName() string {
	return p.OrigTableName
}

func (p *Index) GetCreateTime() int32 {
	return p.CreateTime
}

func (p *Index) GetLastAccessTime() int32 {
	return p.LastAccessTime
}

func (p *Index) GetIndexTableName() string {
	return p.IndexTableName
}

var Index_Sd_DEFAULT *StorageDescriptor

func (p *Index) GetSd() *StorageDescriptor {
	if !p.IsSetSd() {
		return Index_Sd_DEFAULT
	}
	return p.Sd
}

func (p *Index) GetParameters() map[string]string {
	return p.Parameters
}

func (p *Index) GetDeferredRebuild() bool {
	return p.DeferredRebuild
}
func (p *Index) IsSetSd() bool {
	return p.Sd != nil
}

func (p *Index) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Index) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.IndexName = v
	}
	return nil
}

func (p *Index) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.IndexHandlerClass = v
	}
	return nil
}

func (p *Index) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *Index) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.OrigTableName = v
	}
	return nil
}

func (p *Index) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *Index) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.LastAccessTime = v
	}
	return nil
}

func (p *Index) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.IndexTableName = v
	}
	return nil
}

func (p *Index) ReadField8(iprot thrift.TProtocol) error {
	p.Sd = &StorageDescriptor{}
	if err := p.Sd.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Sd, err)
	}
	return nil
}

func (p *Index) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Parameters = tMap
	for i := 0; i < size; i++ {
		var _key29 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key29 = v
		}
		var _val30 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val30 = v
		}
		p.Parameters[_key29] = _val30
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Index) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.DeferredRebuild = v
	}
	return nil
}

func (p *Index) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Index"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Index) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("indexName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:indexName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IndexName)); err != nil {
		return fmt.Errorf("%T.indexName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:indexName: %s", p, err)
	}
	return err
}

func (p *Index) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("indexHandlerClass", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:indexHandlerClass: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IndexHandlerClass)); err != nil {
		return fmt.Errorf("%T.indexHandlerClass (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:indexHandlerClass: %s", p, err)
	}
	return err
}

func (p *Index) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:dbName: %s", p, err)
	}
	return err
}

func (p *Index) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("origTableName", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:origTableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OrigTableName)); err != nil {
		return fmt.Errorf("%T.origTableName (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:origTableName: %s", p, err)
	}
	return err
}

func (p *Index) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:createTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.createTime (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:createTime: %s", p, err)
	}
	return err
}

func (p *Index) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastAccessTime", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:lastAccessTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.LastAccessTime)); err != nil {
		return fmt.Errorf("%T.lastAccessTime (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:lastAccessTime: %s", p, err)
	}
	return err
}

func (p *Index) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("indexTableName", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:indexTableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IndexTableName)); err != nil {
		return fmt.Errorf("%T.indexTableName (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:indexTableName: %s", p, err)
	}
	return err
}

func (p *Index) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sd", thrift.STRUCT, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:sd: %s", p, err)
	}
	if err := p.Sd.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Sd, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:sd: %s", p, err)
	}
	return err
}

func (p *Index) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:parameters: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Parameters {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:parameters: %s", p, err)
	}
	return err
}

func (p *Index) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deferredRebuild", thrift.BOOL, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:deferredRebuild: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeferredRebuild)); err != nil {
		return fmt.Errorf("%T.deferredRebuild (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:deferredRebuild: %s", p, err)
	}
	return err
}

func (p *Index) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Index(%+v)", *p)
}

type BooleanColumnStatsData struct {
	NumTrues  int64 `thrift:"numTrues,1,required" json:"numTrues"`
	NumFalses int64 `thrift:"numFalses,2,required" json:"numFalses"`
	NumNulls  int64 `thrift:"numNulls,3,required" json:"numNulls"`
}

func NewBooleanColumnStatsData() *BooleanColumnStatsData {
	return &BooleanColumnStatsData{}
}

func (p *BooleanColumnStatsData) GetNumTrues() int64 {
	return p.NumTrues
}

func (p *BooleanColumnStatsData) GetNumFalses() int64 {
	return p.NumFalses
}

func (p *BooleanColumnStatsData) GetNumNulls() int64 {
	return p.NumNulls
}
func (p *BooleanColumnStatsData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BooleanColumnStatsData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.NumTrues = v
	}
	return nil
}

func (p *BooleanColumnStatsData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.NumFalses = v
	}
	return nil
}

func (p *BooleanColumnStatsData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.NumNulls = v
	}
	return nil
}

func (p *BooleanColumnStatsData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BooleanColumnStatsData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BooleanColumnStatsData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numTrues", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:numTrues: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumTrues)); err != nil {
		return fmt.Errorf("%T.numTrues (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:numTrues: %s", p, err)
	}
	return err
}

func (p *BooleanColumnStatsData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numFalses", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:numFalses: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumFalses)); err != nil {
		return fmt.Errorf("%T.numFalses (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:numFalses: %s", p, err)
	}
	return err
}

func (p *BooleanColumnStatsData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numNulls", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:numNulls: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumNulls)); err != nil {
		return fmt.Errorf("%T.numNulls (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:numNulls: %s", p, err)
	}
	return err
}

func (p *BooleanColumnStatsData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BooleanColumnStatsData(%+v)", *p)
}

type DoubleColumnStatsData struct {
	LowValue  *float64 `thrift:"lowValue,1" json:"lowValue"`
	HighValue *float64 `thrift:"highValue,2" json:"highValue"`
	NumNulls  int64    `thrift:"numNulls,3,required" json:"numNulls"`
	NumDVs    int64    `thrift:"numDVs,4,required" json:"numDVs"`
}

func NewDoubleColumnStatsData() *DoubleColumnStatsData {
	return &DoubleColumnStatsData{}
}

var DoubleColumnStatsData_LowValue_DEFAULT float64

func (p *DoubleColumnStatsData) GetLowValue() float64 {
	if !p.IsSetLowValue() {
		return DoubleColumnStatsData_LowValue_DEFAULT
	}
	return *p.LowValue
}

var DoubleColumnStatsData_HighValue_DEFAULT float64

func (p *DoubleColumnStatsData) GetHighValue() float64 {
	if !p.IsSetHighValue() {
		return DoubleColumnStatsData_HighValue_DEFAULT
	}
	return *p.HighValue
}

func (p *DoubleColumnStatsData) GetNumNulls() int64 {
	return p.NumNulls
}

func (p *DoubleColumnStatsData) GetNumDVs() int64 {
	return p.NumDVs
}
func (p *DoubleColumnStatsData) IsSetLowValue() bool {
	return p.LowValue != nil
}

func (p *DoubleColumnStatsData) IsSetHighValue() bool {
	return p.HighValue != nil
}

func (p *DoubleColumnStatsData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DoubleColumnStatsData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.LowValue = &v
	}
	return nil
}

func (p *DoubleColumnStatsData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.HighValue = &v
	}
	return nil
}

func (p *DoubleColumnStatsData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.NumNulls = v
	}
	return nil
}

func (p *DoubleColumnStatsData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.NumDVs = v
	}
	return nil
}

func (p *DoubleColumnStatsData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DoubleColumnStatsData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DoubleColumnStatsData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLowValue() {
		if err := oprot.WriteFieldBegin("lowValue", thrift.DOUBLE, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:lowValue: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.LowValue)); err != nil {
			return fmt.Errorf("%T.lowValue (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:lowValue: %s", p, err)
		}
	}
	return err
}

func (p *DoubleColumnStatsData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHighValue() {
		if err := oprot.WriteFieldBegin("highValue", thrift.DOUBLE, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:highValue: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.HighValue)); err != nil {
			return fmt.Errorf("%T.highValue (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:highValue: %s", p, err)
		}
	}
	return err
}

func (p *DoubleColumnStatsData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numNulls", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:numNulls: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumNulls)); err != nil {
		return fmt.Errorf("%T.numNulls (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:numNulls: %s", p, err)
	}
	return err
}

func (p *DoubleColumnStatsData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numDVs", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:numDVs: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumDVs)); err != nil {
		return fmt.Errorf("%T.numDVs (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:numDVs: %s", p, err)
	}
	return err
}

func (p *DoubleColumnStatsData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DoubleColumnStatsData(%+v)", *p)
}

type LongColumnStatsData struct {
	LowValue  *int64 `thrift:"lowValue,1" json:"lowValue"`
	HighValue *int64 `thrift:"highValue,2" json:"highValue"`
	NumNulls  int64  `thrift:"numNulls,3,required" json:"numNulls"`
	NumDVs    int64  `thrift:"numDVs,4,required" json:"numDVs"`
}

func NewLongColumnStatsData() *LongColumnStatsData {
	return &LongColumnStatsData{}
}

var LongColumnStatsData_LowValue_DEFAULT int64

func (p *LongColumnStatsData) GetLowValue() int64 {
	if !p.IsSetLowValue() {
		return LongColumnStatsData_LowValue_DEFAULT
	}
	return *p.LowValue
}

var LongColumnStatsData_HighValue_DEFAULT int64

func (p *LongColumnStatsData) GetHighValue() int64 {
	if !p.IsSetHighValue() {
		return LongColumnStatsData_HighValue_DEFAULT
	}
	return *p.HighValue
}

func (p *LongColumnStatsData) GetNumNulls() int64 {
	return p.NumNulls
}

func (p *LongColumnStatsData) GetNumDVs() int64 {
	return p.NumDVs
}
func (p *LongColumnStatsData) IsSetLowValue() bool {
	return p.LowValue != nil
}

func (p *LongColumnStatsData) IsSetHighValue() bool {
	return p.HighValue != nil
}

func (p *LongColumnStatsData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LongColumnStatsData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.LowValue = &v
	}
	return nil
}

func (p *LongColumnStatsData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.HighValue = &v
	}
	return nil
}

func (p *LongColumnStatsData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.NumNulls = v
	}
	return nil
}

func (p *LongColumnStatsData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.NumDVs = v
	}
	return nil
}

func (p *LongColumnStatsData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LongColumnStatsData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LongColumnStatsData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLowValue() {
		if err := oprot.WriteFieldBegin("lowValue", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:lowValue: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.LowValue)); err != nil {
			return fmt.Errorf("%T.lowValue (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:lowValue: %s", p, err)
		}
	}
	return err
}

func (p *LongColumnStatsData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHighValue() {
		if err := oprot.WriteFieldBegin("highValue", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:highValue: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.HighValue)); err != nil {
			return fmt.Errorf("%T.highValue (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:highValue: %s", p, err)
		}
	}
	return err
}

func (p *LongColumnStatsData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numNulls", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:numNulls: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumNulls)); err != nil {
		return fmt.Errorf("%T.numNulls (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:numNulls: %s", p, err)
	}
	return err
}

func (p *LongColumnStatsData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numDVs", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:numDVs: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumDVs)); err != nil {
		return fmt.Errorf("%T.numDVs (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:numDVs: %s", p, err)
	}
	return err
}

func (p *LongColumnStatsData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LongColumnStatsData(%+v)", *p)
}

type StringColumnStatsData struct {
	MaxColLen int64   `thrift:"maxColLen,1,required" json:"maxColLen"`
	AvgColLen float64 `thrift:"avgColLen,2,required" json:"avgColLen"`
	NumNulls  int64   `thrift:"numNulls,3,required" json:"numNulls"`
	NumDVs    int64   `thrift:"numDVs,4,required" json:"numDVs"`
}

func NewStringColumnStatsData() *StringColumnStatsData {
	return &StringColumnStatsData{}
}

func (p *StringColumnStatsData) GetMaxColLen() int64 {
	return p.MaxColLen
}

func (p *StringColumnStatsData) GetAvgColLen() float64 {
	return p.AvgColLen
}

func (p *StringColumnStatsData) GetNumNulls() int64 {
	return p.NumNulls
}

func (p *StringColumnStatsData) GetNumDVs() int64 {
	return p.NumDVs
}
func (p *StringColumnStatsData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StringColumnStatsData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MaxColLen = v
	}
	return nil
}

func (p *StringColumnStatsData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AvgColLen = v
	}
	return nil
}

func (p *StringColumnStatsData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.NumNulls = v
	}
	return nil
}

func (p *StringColumnStatsData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.NumDVs = v
	}
	return nil
}

func (p *StringColumnStatsData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StringColumnStatsData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StringColumnStatsData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxColLen", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:maxColLen: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MaxColLen)); err != nil {
		return fmt.Errorf("%T.maxColLen (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:maxColLen: %s", p, err)
	}
	return err
}

func (p *StringColumnStatsData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("avgColLen", thrift.DOUBLE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:avgColLen: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.AvgColLen)); err != nil {
		return fmt.Errorf("%T.avgColLen (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:avgColLen: %s", p, err)
	}
	return err
}

func (p *StringColumnStatsData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numNulls", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:numNulls: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumNulls)); err != nil {
		return fmt.Errorf("%T.numNulls (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:numNulls: %s", p, err)
	}
	return err
}

func (p *StringColumnStatsData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numDVs", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:numDVs: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumDVs)); err != nil {
		return fmt.Errorf("%T.numDVs (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:numDVs: %s", p, err)
	}
	return err
}

func (p *StringColumnStatsData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StringColumnStatsData(%+v)", *p)
}

type BinaryColumnStatsData struct {
	MaxColLen int64   `thrift:"maxColLen,1,required" json:"maxColLen"`
	AvgColLen float64 `thrift:"avgColLen,2,required" json:"avgColLen"`
	NumNulls  int64   `thrift:"numNulls,3,required" json:"numNulls"`
}

func NewBinaryColumnStatsData() *BinaryColumnStatsData {
	return &BinaryColumnStatsData{}
}

func (p *BinaryColumnStatsData) GetMaxColLen() int64 {
	return p.MaxColLen
}

func (p *BinaryColumnStatsData) GetAvgColLen() float64 {
	return p.AvgColLen
}

func (p *BinaryColumnStatsData) GetNumNulls() int64 {
	return p.NumNulls
}
func (p *BinaryColumnStatsData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BinaryColumnStatsData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MaxColLen = v
	}
	return nil
}

func (p *BinaryColumnStatsData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AvgColLen = v
	}
	return nil
}

func (p *BinaryColumnStatsData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.NumNulls = v
	}
	return nil
}

func (p *BinaryColumnStatsData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BinaryColumnStatsData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BinaryColumnStatsData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxColLen", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:maxColLen: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MaxColLen)); err != nil {
		return fmt.Errorf("%T.maxColLen (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:maxColLen: %s", p, err)
	}
	return err
}

func (p *BinaryColumnStatsData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("avgColLen", thrift.DOUBLE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:avgColLen: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.AvgColLen)); err != nil {
		return fmt.Errorf("%T.avgColLen (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:avgColLen: %s", p, err)
	}
	return err
}

func (p *BinaryColumnStatsData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numNulls", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:numNulls: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumNulls)); err != nil {
		return fmt.Errorf("%T.numNulls (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:numNulls: %s", p, err)
	}
	return err
}

func (p *BinaryColumnStatsData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BinaryColumnStatsData(%+v)", *p)
}

type Decimal struct {
	Unscaled []byte `thrift:"unscaled,1,required" json:"unscaled"`
	// unused field # 2
	Scale int16 `thrift:"scale,3,required" json:"scale"`
}

func NewDecimal() *Decimal {
	return &Decimal{}
}

func (p *Decimal) GetUnscaled() []byte {
	return p.Unscaled
}

func (p *Decimal) GetScale() int16 {
	return p.Scale
}
func (p *Decimal) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Decimal) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Unscaled = v
	}
	return nil
}

func (p *Decimal) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Scale = v
	}
	return nil
}

func (p *Decimal) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Decimal"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Decimal) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unscaled", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:unscaled: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Unscaled); err != nil {
		return fmt.Errorf("%T.unscaled (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:unscaled: %s", p, err)
	}
	return err
}

func (p *Decimal) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scale", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:scale: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Scale)); err != nil {
		return fmt.Errorf("%T.scale (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:scale: %s", p, err)
	}
	return err
}

func (p *Decimal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Decimal(%+v)", *p)
}

type DecimalColumnStatsData struct {
	LowValue  *Decimal `thrift:"lowValue,1" json:"lowValue"`
	HighValue *Decimal `thrift:"highValue,2" json:"highValue"`
	NumNulls  int64    `thrift:"numNulls,3,required" json:"numNulls"`
	NumDVs    int64    `thrift:"numDVs,4,required" json:"numDVs"`
}

func NewDecimalColumnStatsData() *DecimalColumnStatsData {
	return &DecimalColumnStatsData{}
}

var DecimalColumnStatsData_LowValue_DEFAULT *Decimal

func (p *DecimalColumnStatsData) GetLowValue() *Decimal {
	if !p.IsSetLowValue() {
		return DecimalColumnStatsData_LowValue_DEFAULT
	}
	return p.LowValue
}

var DecimalColumnStatsData_HighValue_DEFAULT *Decimal

func (p *DecimalColumnStatsData) GetHighValue() *Decimal {
	if !p.IsSetHighValue() {
		return DecimalColumnStatsData_HighValue_DEFAULT
	}
	return p.HighValue
}

func (p *DecimalColumnStatsData) GetNumNulls() int64 {
	return p.NumNulls
}

func (p *DecimalColumnStatsData) GetNumDVs() int64 {
	return p.NumDVs
}
func (p *DecimalColumnStatsData) IsSetLowValue() bool {
	return p.LowValue != nil
}

func (p *DecimalColumnStatsData) IsSetHighValue() bool {
	return p.HighValue != nil
}

func (p *DecimalColumnStatsData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DecimalColumnStatsData) ReadField1(iprot thrift.TProtocol) error {
	p.LowValue = &Decimal{}
	if err := p.LowValue.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.LowValue, err)
	}
	return nil
}

func (p *DecimalColumnStatsData) ReadField2(iprot thrift.TProtocol) error {
	p.HighValue = &Decimal{}
	if err := p.HighValue.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.HighValue, err)
	}
	return nil
}

func (p *DecimalColumnStatsData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.NumNulls = v
	}
	return nil
}

func (p *DecimalColumnStatsData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.NumDVs = v
	}
	return nil
}

func (p *DecimalColumnStatsData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DecimalColumnStatsData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DecimalColumnStatsData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLowValue() {
		if err := oprot.WriteFieldBegin("lowValue", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:lowValue: %s", p, err)
		}
		if err := p.LowValue.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.LowValue, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:lowValue: %s", p, err)
		}
	}
	return err
}

func (p *DecimalColumnStatsData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHighValue() {
		if err := oprot.WriteFieldBegin("highValue", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:highValue: %s", p, err)
		}
		if err := p.HighValue.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.HighValue, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:highValue: %s", p, err)
		}
	}
	return err
}

func (p *DecimalColumnStatsData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numNulls", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:numNulls: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumNulls)); err != nil {
		return fmt.Errorf("%T.numNulls (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:numNulls: %s", p, err)
	}
	return err
}

func (p *DecimalColumnStatsData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numDVs", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:numDVs: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumDVs)); err != nil {
		return fmt.Errorf("%T.numDVs (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:numDVs: %s", p, err)
	}
	return err
}

func (p *DecimalColumnStatsData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DecimalColumnStatsData(%+v)", *p)
}

type ColumnStatisticsData struct {
	BooleanStats *BooleanColumnStatsData `thrift:"booleanStats,1" json:"booleanStats"`
	LongStats    *LongColumnStatsData    `thrift:"longStats,2" json:"longStats"`
	DoubleStats  *DoubleColumnStatsData  `thrift:"doubleStats,3" json:"doubleStats"`
	StringStats  *StringColumnStatsData  `thrift:"stringStats,4" json:"stringStats"`
	BinaryStats  *BinaryColumnStatsData  `thrift:"binaryStats,5" json:"binaryStats"`
	DecimalStats *DecimalColumnStatsData `thrift:"decimalStats,6" json:"decimalStats"`
}

func NewColumnStatisticsData() *ColumnStatisticsData {
	return &ColumnStatisticsData{}
}

var ColumnStatisticsData_BooleanStats_DEFAULT *BooleanColumnStatsData

func (p *ColumnStatisticsData) GetBooleanStats() *BooleanColumnStatsData {
	if !p.IsSetBooleanStats() {
		return ColumnStatisticsData_BooleanStats_DEFAULT
	}
	return p.BooleanStats
}

var ColumnStatisticsData_LongStats_DEFAULT *LongColumnStatsData

func (p *ColumnStatisticsData) GetLongStats() *LongColumnStatsData {
	if !p.IsSetLongStats() {
		return ColumnStatisticsData_LongStats_DEFAULT
	}
	return p.LongStats
}

var ColumnStatisticsData_DoubleStats_DEFAULT *DoubleColumnStatsData

func (p *ColumnStatisticsData) GetDoubleStats() *DoubleColumnStatsData {
	if !p.IsSetDoubleStats() {
		return ColumnStatisticsData_DoubleStats_DEFAULT
	}
	return p.DoubleStats
}

var ColumnStatisticsData_StringStats_DEFAULT *StringColumnStatsData

func (p *ColumnStatisticsData) GetStringStats() *StringColumnStatsData {
	if !p.IsSetStringStats() {
		return ColumnStatisticsData_StringStats_DEFAULT
	}
	return p.StringStats
}

var ColumnStatisticsData_BinaryStats_DEFAULT *BinaryColumnStatsData

func (p *ColumnStatisticsData) GetBinaryStats() *BinaryColumnStatsData {
	if !p.IsSetBinaryStats() {
		return ColumnStatisticsData_BinaryStats_DEFAULT
	}
	return p.BinaryStats
}

var ColumnStatisticsData_DecimalStats_DEFAULT *DecimalColumnStatsData

func (p *ColumnStatisticsData) GetDecimalStats() *DecimalColumnStatsData {
	if !p.IsSetDecimalStats() {
		return ColumnStatisticsData_DecimalStats_DEFAULT
	}
	return p.DecimalStats
}
func (p *ColumnStatisticsData) IsSetBooleanStats() bool {
	return p.BooleanStats != nil
}

func (p *ColumnStatisticsData) IsSetLongStats() bool {
	return p.LongStats != nil
}

func (p *ColumnStatisticsData) IsSetDoubleStats() bool {
	return p.DoubleStats != nil
}

func (p *ColumnStatisticsData) IsSetStringStats() bool {
	return p.StringStats != nil
}

func (p *ColumnStatisticsData) IsSetBinaryStats() bool {
	return p.BinaryStats != nil
}

func (p *ColumnStatisticsData) IsSetDecimalStats() bool {
	return p.DecimalStats != nil
}

func (p *ColumnStatisticsData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ColumnStatisticsData) ReadField1(iprot thrift.TProtocol) error {
	p.BooleanStats = &BooleanColumnStatsData{}
	if err := p.BooleanStats.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BooleanStats, err)
	}
	return nil
}

func (p *ColumnStatisticsData) ReadField2(iprot thrift.TProtocol) error {
	p.LongStats = &LongColumnStatsData{}
	if err := p.LongStats.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.LongStats, err)
	}
	return nil
}

func (p *ColumnStatisticsData) ReadField3(iprot thrift.TProtocol) error {
	p.DoubleStats = &DoubleColumnStatsData{}
	if err := p.DoubleStats.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DoubleStats, err)
	}
	return nil
}

func (p *ColumnStatisticsData) ReadField4(iprot thrift.TProtocol) error {
	p.StringStats = &StringColumnStatsData{}
	if err := p.StringStats.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.StringStats, err)
	}
	return nil
}

func (p *ColumnStatisticsData) ReadField5(iprot thrift.TProtocol) error {
	p.BinaryStats = &BinaryColumnStatsData{}
	if err := p.BinaryStats.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BinaryStats, err)
	}
	return nil
}

func (p *ColumnStatisticsData) ReadField6(iprot thrift.TProtocol) error {
	p.DecimalStats = &DecimalColumnStatsData{}
	if err := p.DecimalStats.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DecimalStats, err)
	}
	return nil
}

func (p *ColumnStatisticsData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ColumnStatisticsData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ColumnStatisticsData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("booleanStats", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:booleanStats: %s", p, err)
	}
	if err := p.BooleanStats.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BooleanStats, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:booleanStats: %s", p, err)
	}
	return err
}

func (p *ColumnStatisticsData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("longStats", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:longStats: %s", p, err)
	}
	if err := p.LongStats.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.LongStats, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:longStats: %s", p, err)
	}
	return err
}

func (p *ColumnStatisticsData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("doubleStats", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:doubleStats: %s", p, err)
	}
	if err := p.DoubleStats.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DoubleStats, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:doubleStats: %s", p, err)
	}
	return err
}

func (p *ColumnStatisticsData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stringStats", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:stringStats: %s", p, err)
	}
	if err := p.StringStats.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.StringStats, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:stringStats: %s", p, err)
	}
	return err
}

func (p *ColumnStatisticsData) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("binaryStats", thrift.STRUCT, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:binaryStats: %s", p, err)
	}
	if err := p.BinaryStats.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BinaryStats, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:binaryStats: %s", p, err)
	}
	return err
}

func (p *ColumnStatisticsData) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("decimalStats", thrift.STRUCT, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:decimalStats: %s", p, err)
	}
	if err := p.DecimalStats.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DecimalStats, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:decimalStats: %s", p, err)
	}
	return err
}

func (p *ColumnStatisticsData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnStatisticsData(%+v)", *p)
}

type ColumnStatisticsObj struct {
	ColName   string                `thrift:"colName,1,required" json:"colName"`
	ColType   string                `thrift:"colType,2,required" json:"colType"`
	StatsData *ColumnStatisticsData `thrift:"statsData,3,required" json:"statsData"`
}

func NewColumnStatisticsObj() *ColumnStatisticsObj {
	return &ColumnStatisticsObj{}
}

func (p *ColumnStatisticsObj) GetColName() string {
	return p.ColName
}

func (p *ColumnStatisticsObj) GetColType() string {
	return p.ColType
}

var ColumnStatisticsObj_StatsData_DEFAULT *ColumnStatisticsData

func (p *ColumnStatisticsObj) GetStatsData() *ColumnStatisticsData {
	if !p.IsSetStatsData() {
		return ColumnStatisticsObj_StatsData_DEFAULT
	}
	return p.StatsData
}
func (p *ColumnStatisticsObj) IsSetStatsData() bool {
	return p.StatsData != nil
}

func (p *ColumnStatisticsObj) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ColumnStatisticsObj) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ColName = v
	}
	return nil
}

func (p *ColumnStatisticsObj) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ColType = v
	}
	return nil
}

func (p *ColumnStatisticsObj) ReadField3(iprot thrift.TProtocol) error {
	p.StatsData = &ColumnStatisticsData{}
	if err := p.StatsData.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.StatsData, err)
	}
	return nil
}

func (p *ColumnStatisticsObj) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ColumnStatisticsObj"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ColumnStatisticsObj) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:colName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ColName)); err != nil {
		return fmt.Errorf("%T.colName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:colName: %s", p, err)
	}
	return err
}

func (p *ColumnStatisticsObj) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colType", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:colType: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ColType)); err != nil {
		return fmt.Errorf("%T.colType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:colType: %s", p, err)
	}
	return err
}

func (p *ColumnStatisticsObj) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statsData", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:statsData: %s", p, err)
	}
	if err := p.StatsData.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.StatsData, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:statsData: %s", p, err)
	}
	return err
}

func (p *ColumnStatisticsObj) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnStatisticsObj(%+v)", *p)
}

type ColumnStatisticsDesc struct {
	IsTblLevel   bool    `thrift:"isTblLevel,1,required" json:"isTblLevel"`
	DbName       string  `thrift:"dbName,2,required" json:"dbName"`
	TableName    string  `thrift:"tableName,3,required" json:"tableName"`
	PartName     *string `thrift:"partName,4" json:"partName"`
	LastAnalyzed *int64  `thrift:"lastAnalyzed,5" json:"lastAnalyzed"`
}

func NewColumnStatisticsDesc() *ColumnStatisticsDesc {
	return &ColumnStatisticsDesc{}
}

func (p *ColumnStatisticsDesc) GetIsTblLevel() bool {
	return p.IsTblLevel
}

func (p *ColumnStatisticsDesc) GetDbName() string {
	return p.DbName
}

func (p *ColumnStatisticsDesc) GetTableName() string {
	return p.TableName
}

var ColumnStatisticsDesc_PartName_DEFAULT string

func (p *ColumnStatisticsDesc) GetPartName() string {
	if !p.IsSetPartName() {
		return ColumnStatisticsDesc_PartName_DEFAULT
	}
	return *p.PartName
}

var ColumnStatisticsDesc_LastAnalyzed_DEFAULT int64

func (p *ColumnStatisticsDesc) GetLastAnalyzed() int64 {
	if !p.IsSetLastAnalyzed() {
		return ColumnStatisticsDesc_LastAnalyzed_DEFAULT
	}
	return *p.LastAnalyzed
}
func (p *ColumnStatisticsDesc) IsSetPartName() bool {
	return p.PartName != nil
}

func (p *ColumnStatisticsDesc) IsSetLastAnalyzed() bool {
	return p.LastAnalyzed != nil
}

func (p *ColumnStatisticsDesc) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ColumnStatisticsDesc) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.IsTblLevel = v
	}
	return nil
}

func (p *ColumnStatisticsDesc) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ColumnStatisticsDesc) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *ColumnStatisticsDesc) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.PartName = &v
	}
	return nil
}

func (p *ColumnStatisticsDesc) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.LastAnalyzed = &v
	}
	return nil
}

func (p *ColumnStatisticsDesc) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ColumnStatisticsDesc"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ColumnStatisticsDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isTblLevel", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:isTblLevel: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsTblLevel)); err != nil {
		return fmt.Errorf("%T.isTblLevel (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:isTblLevel: %s", p, err)
	}
	return err
}

func (p *ColumnStatisticsDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:dbName: %s", p, err)
	}
	return err
}

func (p *ColumnStatisticsDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:tableName: %s", p, err)
	}
	return err
}

func (p *ColumnStatisticsDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartName() {
		if err := oprot.WriteFieldBegin("partName", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:partName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.PartName)); err != nil {
			return fmt.Errorf("%T.partName (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:partName: %s", p, err)
		}
	}
	return err
}

func (p *ColumnStatisticsDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastAnalyzed() {
		if err := oprot.WriteFieldBegin("lastAnalyzed", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:lastAnalyzed: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.LastAnalyzed)); err != nil {
			return fmt.Errorf("%T.lastAnalyzed (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:lastAnalyzed: %s", p, err)
		}
	}
	return err
}

func (p *ColumnStatisticsDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnStatisticsDesc(%+v)", *p)
}

type ColumnStatistics struct {
	StatsDesc *ColumnStatisticsDesc  `thrift:"statsDesc,1,required" json:"statsDesc"`
	StatsObj  []*ColumnStatisticsObj `thrift:"statsObj,2,required" json:"statsObj"`
}

func NewColumnStatistics() *ColumnStatistics {
	return &ColumnStatistics{}
}

var ColumnStatistics_StatsDesc_DEFAULT *ColumnStatisticsDesc

func (p *ColumnStatistics) GetStatsDesc() *ColumnStatisticsDesc {
	if !p.IsSetStatsDesc() {
		return ColumnStatistics_StatsDesc_DEFAULT
	}
	return p.StatsDesc
}

func (p *ColumnStatistics) GetStatsObj() []*ColumnStatisticsObj {
	return p.StatsObj
}
func (p *ColumnStatistics) IsSetStatsDesc() bool {
	return p.StatsDesc != nil
}

func (p *ColumnStatistics) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ColumnStatistics) ReadField1(iprot thrift.TProtocol) error {
	p.StatsDesc = &ColumnStatisticsDesc{}
	if err := p.StatsDesc.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.StatsDesc, err)
	}
	return nil
}

func (p *ColumnStatistics) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ColumnStatisticsObj, 0, size)
	p.StatsObj = tSlice
	for i := 0; i < size; i++ {
		_elem31 := &ColumnStatisticsObj{}
		if err := _elem31.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem31, err)
		}
		p.StatsObj = append(p.StatsObj, _elem31)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ColumnStatistics) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ColumnStatistics"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ColumnStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statsDesc", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:statsDesc: %s", p, err)
	}
	if err := p.StatsDesc.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.StatsDesc, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:statsDesc: %s", p, err)
	}
	return err
}

func (p *ColumnStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statsObj", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:statsObj: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StatsObj)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.StatsObj {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:statsObj: %s", p, err)
	}
	return err
}

func (p *ColumnStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnStatistics(%+v)", *p)
}

type Schema struct {
	FieldSchemas []*FieldSchema    `thrift:"fieldSchemas,1" json:"fieldSchemas"`
	Properties   map[string]string `thrift:"properties,2" json:"properties"`
}

func NewSchema() *Schema {
	return &Schema{}
}

func (p *Schema) GetFieldSchemas() []*FieldSchema {
	return p.FieldSchemas
}

func (p *Schema) GetProperties() map[string]string {
	return p.Properties
}
func (p *Schema) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Schema) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FieldSchema, 0, size)
	p.FieldSchemas = tSlice
	for i := 0; i < size; i++ {
		_elem32 := &FieldSchema{}
		if err := _elem32.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem32, err)
		}
		p.FieldSchemas = append(p.FieldSchemas, _elem32)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Schema) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Properties = tMap
	for i := 0; i < size; i++ {
		var _key33 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key33 = v
		}
		var _val34 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val34 = v
		}
		p.Properties[_key33] = _val34
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Schema) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Schema"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Schema) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fieldSchemas", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:fieldSchemas: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FieldSchemas)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.FieldSchemas {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:fieldSchemas: %s", p, err)
	}
	return err
}

func (p *Schema) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("properties", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:properties: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Properties {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:properties: %s", p, err)
	}
	return err
}

func (p *Schema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Schema(%+v)", *p)
}

type EnvironmentContext struct {
	Properties map[string]string `thrift:"properties,1" json:"properties"`
}

func NewEnvironmentContext() *EnvironmentContext {
	return &EnvironmentContext{}
}

func (p *EnvironmentContext) GetProperties() map[string]string {
	return p.Properties
}
func (p *EnvironmentContext) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EnvironmentContext) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Properties = tMap
	for i := 0; i < size; i++ {
		var _key35 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key35 = v
		}
		var _val36 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val36 = v
		}
		p.Properties[_key35] = _val36
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *EnvironmentContext) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EnvironmentContext"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EnvironmentContext) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("properties", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:properties: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Properties {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:properties: %s", p, err)
	}
	return err
}

func (p *EnvironmentContext) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EnvironmentContext(%+v)", *p)
}

type PartitionsByExprResult_ struct {
	Partitions           []*Partition `thrift:"partitions,1,required" json:"partitions"`
	HasUnknownPartitions bool         `thrift:"hasUnknownPartitions,2,required" json:"hasUnknownPartitions"`
}

func NewPartitionsByExprResult_() *PartitionsByExprResult_ {
	return &PartitionsByExprResult_{}
}

func (p *PartitionsByExprResult_) GetPartitions() []*Partition {
	return p.Partitions
}

func (p *PartitionsByExprResult_) GetHasUnknownPartitions() bool {
	return p.HasUnknownPartitions
}
func (p *PartitionsByExprResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionsByExprResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Partitions = tSlice
	for i := 0; i < size; i++ {
		_elem37 := &Partition{}
		if err := _elem37.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem37, err)
		}
		p.Partitions = append(p.Partitions, _elem37)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PartitionsByExprResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.HasUnknownPartitions = v
	}
	return nil
}

func (p *PartitionsByExprResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PartitionsByExprResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionsByExprResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitions", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:partitions: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Partitions)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Partitions {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:partitions: %s", p, err)
	}
	return err
}

func (p *PartitionsByExprResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasUnknownPartitions", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:hasUnknownPartitions: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HasUnknownPartitions)); err != nil {
		return fmt.Errorf("%T.hasUnknownPartitions (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:hasUnknownPartitions: %s", p, err)
	}
	return err
}

func (p *PartitionsByExprResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionsByExprResult_(%+v)", *p)
}

type PartitionsByExprRequest struct {
	DbName               string  `thrift:"dbName,1,required" json:"dbName"`
	TblName              string  `thrift:"tblName,2,required" json:"tblName"`
	Expr                 []byte  `thrift:"expr,3,required" json:"expr"`
	DefaultPartitionName *string `thrift:"defaultPartitionName,4" json:"defaultPartitionName"`
	MaxParts             int16   `thrift:"maxParts,5" json:"maxParts"`
}

func NewPartitionsByExprRequest() *PartitionsByExprRequest {
	return &PartitionsByExprRequest{
		MaxParts: -1,
	}
}

func (p *PartitionsByExprRequest) GetDbName() string {
	return p.DbName
}

func (p *PartitionsByExprRequest) GetTblName() string {
	return p.TblName
}

func (p *PartitionsByExprRequest) GetExpr() []byte {
	return p.Expr
}

var PartitionsByExprRequest_DefaultPartitionName_DEFAULT string

func (p *PartitionsByExprRequest) GetDefaultPartitionName() string {
	if !p.IsSetDefaultPartitionName() {
		return PartitionsByExprRequest_DefaultPartitionName_DEFAULT
	}
	return *p.DefaultPartitionName
}

var PartitionsByExprRequest_MaxParts_DEFAULT int16 = -1

func (p *PartitionsByExprRequest) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *PartitionsByExprRequest) IsSetDefaultPartitionName() bool {
	return p.DefaultPartitionName != nil
}

func (p *PartitionsByExprRequest) IsSetMaxParts() bool {
	return p.MaxParts != PartitionsByExprRequest_MaxParts_DEFAULT
}

func (p *PartitionsByExprRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionsByExprRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *PartitionsByExprRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *PartitionsByExprRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Expr = v
	}
	return nil
}

func (p *PartitionsByExprRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DefaultPartitionName = &v
	}
	return nil
}

func (p *PartitionsByExprRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *PartitionsByExprRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PartitionsByExprRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionsByExprRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbName: %s", p, err)
	}
	return err
}

func (p *PartitionsByExprRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tblName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tblName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tblName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tblName: %s", p, err)
	}
	return err
}

func (p *PartitionsByExprRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expr", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:expr: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Expr); err != nil {
		return fmt.Errorf("%T.expr (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:expr: %s", p, err)
	}
	return err
}

func (p *PartitionsByExprRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultPartitionName() {
		if err := oprot.WriteFieldBegin("defaultPartitionName", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:defaultPartitionName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DefaultPartitionName)); err != nil {
			return fmt.Errorf("%T.defaultPartitionName (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:defaultPartitionName: %s", p, err)
		}
	}
	return err
}

func (p *PartitionsByExprRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxParts() {
		if err := oprot.WriteFieldBegin("maxParts", thrift.I16, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:maxParts: %s", p, err)
		}
		if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
			return fmt.Errorf("%T.maxParts (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:maxParts: %s", p, err)
		}
	}
	return err
}

func (p *PartitionsByExprRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionsByExprRequest(%+v)", *p)
}

type TableStatsResult_ struct {
	TableStats []*ColumnStatisticsObj `thrift:"tableStats,1,required" json:"tableStats"`
}

func NewTableStatsResult_() *TableStatsResult_ {
	return &TableStatsResult_{}
}

func (p *TableStatsResult_) GetTableStats() []*ColumnStatisticsObj {
	return p.TableStats
}
func (p *TableStatsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TableStatsResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ColumnStatisticsObj, 0, size)
	p.TableStats = tSlice
	for i := 0; i < size; i++ {
		_elem38 := &ColumnStatisticsObj{}
		if err := _elem38.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem38, err)
		}
		p.TableStats = append(p.TableStats, _elem38)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TableStatsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TableStatsResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TableStatsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableStats", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tableStats: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TableStats)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.TableStats {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tableStats: %s", p, err)
	}
	return err
}

func (p *TableStatsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TableStatsResult_(%+v)", *p)
}

type PartitionsStatsResult_ struct {
	PartStats map[string][]*ColumnStatisticsObj `thrift:"partStats,1,required" json:"partStats"`
}

func NewPartitionsStatsResult_() *PartitionsStatsResult_ {
	return &PartitionsStatsResult_{}
}

func (p *PartitionsStatsResult_) GetPartStats() map[string][]*ColumnStatisticsObj {
	return p.PartStats
}
func (p *PartitionsStatsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionsStatsResult_) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]*ColumnStatisticsObj, size)
	p.PartStats = tMap
	for i := 0; i < size; i++ {
		var _key39 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key39 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]*ColumnStatisticsObj, 0, size)
		_val40 := tSlice
		for i := 0; i < size; i++ {
			_elem41 := &ColumnStatisticsObj{}
			if err := _elem41.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _elem41, err)
			}
			_val40 = append(_val40, _elem41)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.PartStats[_key39] = _val40
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *PartitionsStatsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PartitionsStatsResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionsStatsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partStats", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:partStats: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.PartStats)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.PartStats {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:partStats: %s", p, err)
	}
	return err
}

func (p *PartitionsStatsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionsStatsResult_(%+v)", *p)
}

type TableStatsRequest struct {
	DbName   string   `thrift:"dbName,1,required" json:"dbName"`
	TblName  string   `thrift:"tblName,2,required" json:"tblName"`
	ColNames []string `thrift:"colNames,3,required" json:"colNames"`
}

func NewTableStatsRequest() *TableStatsRequest {
	return &TableStatsRequest{}
}

func (p *TableStatsRequest) GetDbName() string {
	return p.DbName
}

func (p *TableStatsRequest) GetTblName() string {
	return p.TblName
}

func (p *TableStatsRequest) GetColNames() []string {
	return p.ColNames
}
func (p *TableStatsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TableStatsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *TableStatsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *TableStatsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ColNames = tSlice
	for i := 0; i < size; i++ {
		var _elem42 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem42 = v
		}
		p.ColNames = append(p.ColNames, _elem42)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TableStatsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TableStatsRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TableStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbName: %s", p, err)
	}
	return err
}

func (p *TableStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tblName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tblName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tblName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tblName: %s", p, err)
	}
	return err
}

func (p *TableStatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colNames", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:colNames: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ColNames)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ColNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:colNames: %s", p, err)
	}
	return err
}

func (p *TableStatsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TableStatsRequest(%+v)", *p)
}

type PartitionsStatsRequest struct {
	DbName    string   `thrift:"dbName,1,required" json:"dbName"`
	TblName   string   `thrift:"tblName,2,required" json:"tblName"`
	ColNames  []string `thrift:"colNames,3,required" json:"colNames"`
	PartNames []string `thrift:"partNames,4,required" json:"partNames"`
}

func NewPartitionsStatsRequest() *PartitionsStatsRequest {
	return &PartitionsStatsRequest{}
}

func (p *PartitionsStatsRequest) GetDbName() string {
	return p.DbName
}

func (p *PartitionsStatsRequest) GetTblName() string {
	return p.TblName
}

func (p *PartitionsStatsRequest) GetColNames() []string {
	return p.ColNames
}

func (p *PartitionsStatsRequest) GetPartNames() []string {
	return p.PartNames
}
func (p *PartitionsStatsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionsStatsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *PartitionsStatsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *PartitionsStatsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ColNames = tSlice
	for i := 0; i < size; i++ {
		var _elem43 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem43 = v
		}
		p.ColNames = append(p.ColNames, _elem43)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PartitionsStatsRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartNames = tSlice
	for i := 0; i < size; i++ {
		var _elem44 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem44 = v
		}
		p.PartNames = append(p.PartNames, _elem44)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PartitionsStatsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PartitionsStatsRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionsStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbName: %s", p, err)
	}
	return err
}

func (p *PartitionsStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tblName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tblName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tblName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tblName: %s", p, err)
	}
	return err
}

func (p *PartitionsStatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colNames", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:colNames: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ColNames)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ColNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:colNames: %s", p, err)
	}
	return err
}

func (p *PartitionsStatsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partNames", thrift.LIST, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:partNames: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartNames)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:partNames: %s", p, err)
	}
	return err
}

func (p *PartitionsStatsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionsStatsRequest(%+v)", *p)
}

type AddPartitionsResult_ struct {
	Partitions []*Partition `thrift:"partitions,1" json:"partitions"`
}

func NewAddPartitionsResult_() *AddPartitionsResult_ {
	return &AddPartitionsResult_{}
}

var AddPartitionsResult__Partitions_DEFAULT []*Partition

func (p *AddPartitionsResult_) GetPartitions() []*Partition {
	return p.Partitions
}
func (p *AddPartitionsResult_) IsSetPartitions() bool {
	return p.Partitions != nil
}

func (p *AddPartitionsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPartitionsResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Partitions = tSlice
	for i := 0; i < size; i++ {
		_elem45 := &Partition{}
		if err := _elem45.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem45, err)
		}
		p.Partitions = append(p.Partitions, _elem45)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *AddPartitionsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddPartitionsResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPartitionsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitions() {
		if err := oprot.WriteFieldBegin("partitions", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:partitions: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Partitions)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Partitions {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:partitions: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartitionsResult_(%+v)", *p)
}

type AddPartitionsRequest struct {
	DbName      string       `thrift:"dbName,1,required" json:"dbName"`
	TblName     string       `thrift:"tblName,2,required" json:"tblName"`
	Parts       []*Partition `thrift:"parts,3,required" json:"parts"`
	IfNotExists bool         `thrift:"ifNotExists,4,required" json:"ifNotExists"`
	NeedResult_ bool         `thrift:"needResult,5" json:"needResult"`
}

func NewAddPartitionsRequest() *AddPartitionsRequest {
	return &AddPartitionsRequest{
		NeedResult_: true,
	}
}

func (p *AddPartitionsRequest) GetDbName() string {
	return p.DbName
}

func (p *AddPartitionsRequest) GetTblName() string {
	return p.TblName
}

func (p *AddPartitionsRequest) GetParts() []*Partition {
	return p.Parts
}

func (p *AddPartitionsRequest) GetIfNotExists() bool {
	return p.IfNotExists
}

var AddPartitionsRequest_NeedResult__DEFAULT bool = true

func (p *AddPartitionsRequest) GetNeedResult_() bool {
	return p.NeedResult_
}
func (p *AddPartitionsRequest) IsSetNeedResult_() bool {
	return p.NeedResult_ != AddPartitionsRequest_NeedResult__DEFAULT
}

func (p *AddPartitionsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPartitionsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AddPartitionsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AddPartitionsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Parts = tSlice
	for i := 0; i < size; i++ {
		_elem46 := &Partition{}
		if err := _elem46.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem46, err)
		}
		p.Parts = append(p.Parts, _elem46)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *AddPartitionsRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.IfNotExists = v
	}
	return nil
}

func (p *AddPartitionsRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.NeedResult_ = v
	}
	return nil
}

func (p *AddPartitionsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddPartitionsRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPartitionsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbName: %s", p, err)
	}
	return err
}

func (p *AddPartitionsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tblName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tblName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tblName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tblName: %s", p, err)
	}
	return err
}

func (p *AddPartitionsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parts", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:parts: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Parts)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Parts {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:parts: %s", p, err)
	}
	return err
}

func (p *AddPartitionsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ifNotExists", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:ifNotExists: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
		return fmt.Errorf("%T.ifNotExists (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:ifNotExists: %s", p, err)
	}
	return err
}

func (p *AddPartitionsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNeedResult_() {
		if err := oprot.WriteFieldBegin("needResult", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:needResult: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NeedResult_)); err != nil {
			return fmt.Errorf("%T.needResult (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:needResult: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartitionsRequest(%+v)", *p)
}

type DropPartitionsResult_ struct {
	Partitions []*Partition `thrift:"partitions,1" json:"partitions"`
}

func NewDropPartitionsResult_() *DropPartitionsResult_ {
	return &DropPartitionsResult_{}
}

var DropPartitionsResult__Partitions_DEFAULT []*Partition

func (p *DropPartitionsResult_) GetPartitions() []*Partition {
	return p.Partitions
}
func (p *DropPartitionsResult_) IsSetPartitions() bool {
	return p.Partitions != nil
}

func (p *DropPartitionsResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionsResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Partitions = tSlice
	for i := 0; i < size; i++ {
		_elem47 := &Partition{}
		if err := _elem47.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem47, err)
		}
		p.Partitions = append(p.Partitions, _elem47)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DropPartitionsResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DropPartitionsResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitions() {
		if err := oprot.WriteFieldBegin("partitions", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:partitions: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Partitions)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Partitions {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:partitions: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionsResult_(%+v)", *p)
}

type DropPartitionsExpr struct {
	Expr             []byte `thrift:"expr,1,required" json:"expr"`
	PartArchiveLevel *int32 `thrift:"partArchiveLevel,2" json:"partArchiveLevel"`
}

func NewDropPartitionsExpr() *DropPartitionsExpr {
	return &DropPartitionsExpr{}
}

func (p *DropPartitionsExpr) GetExpr() []byte {
	return p.Expr
}

var DropPartitionsExpr_PartArchiveLevel_DEFAULT int32

func (p *DropPartitionsExpr) GetPartArchiveLevel() int32 {
	if !p.IsSetPartArchiveLevel() {
		return DropPartitionsExpr_PartArchiveLevel_DEFAULT
	}
	return *p.PartArchiveLevel
}
func (p *DropPartitionsExpr) IsSetPartArchiveLevel() bool {
	return p.PartArchiveLevel != nil
}

func (p *DropPartitionsExpr) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionsExpr) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Expr = v
	}
	return nil
}

func (p *DropPartitionsExpr) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PartArchiveLevel = &v
	}
	return nil
}

func (p *DropPartitionsExpr) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DropPartitionsExpr"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionsExpr) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expr", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:expr: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Expr); err != nil {
		return fmt.Errorf("%T.expr (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:expr: %s", p, err)
	}
	return err
}

func (p *DropPartitionsExpr) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartArchiveLevel() {
		if err := oprot.WriteFieldBegin("partArchiveLevel", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:partArchiveLevel: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.PartArchiveLevel)); err != nil {
			return fmt.Errorf("%T.partArchiveLevel (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:partArchiveLevel: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionsExpr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionsExpr(%+v)", *p)
}

type RequestPartsSpec struct {
	Names []string              `thrift:"names,1" json:"names"`
	Exprs []*DropPartitionsExpr `thrift:"exprs,2" json:"exprs"`
}

func NewRequestPartsSpec() *RequestPartsSpec {
	return &RequestPartsSpec{}
}

func (p *RequestPartsSpec) GetNames() []string {
	return p.Names
}

func (p *RequestPartsSpec) GetExprs() []*DropPartitionsExpr {
	return p.Exprs
}
func (p *RequestPartsSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RequestPartsSpec) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Names = tSlice
	for i := 0; i < size; i++ {
		var _elem48 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem48 = v
		}
		p.Names = append(p.Names, _elem48)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *RequestPartsSpec) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*DropPartitionsExpr, 0, size)
	p.Exprs = tSlice
	for i := 0; i < size; i++ {
		_elem49 := &DropPartitionsExpr{}
		if err := _elem49.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem49, err)
		}
		p.Exprs = append(p.Exprs, _elem49)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *RequestPartsSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RequestPartsSpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RequestPartsSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("names", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:names: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Names)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Names {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:names: %s", p, err)
	}
	return err
}

func (p *RequestPartsSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("exprs", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:exprs: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Exprs)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Exprs {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:exprs: %s", p, err)
	}
	return err
}

func (p *RequestPartsSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestPartsSpec(%+v)", *p)
}

type DropPartitionsRequest struct {
	DbName             string              `thrift:"dbName,1,required" json:"dbName"`
	TblName            string              `thrift:"tblName,2,required" json:"tblName"`
	Parts              *RequestPartsSpec   `thrift:"parts,3,required" json:"parts"`
	DeleteData         *bool               `thrift:"deleteData,4" json:"deleteData"`
	IfExists           bool                `thrift:"ifExists,5" json:"ifExists"`
	IgnoreProtection   *bool               `thrift:"ignoreProtection,6" json:"ignoreProtection"`
	EnvironmentContext *EnvironmentContext `thrift:"environmentContext,7" json:"environmentContext"`
	NeedResult_        bool                `thrift:"needResult,8" json:"needResult"`
}

func NewDropPartitionsRequest() *DropPartitionsRequest {
	return &DropPartitionsRequest{
		IfExists: true,

		NeedResult_: true,
	}
}

func (p *DropPartitionsRequest) GetDbName() string {
	return p.DbName
}

func (p *DropPartitionsRequest) GetTblName() string {
	return p.TblName
}

var DropPartitionsRequest_Parts_DEFAULT *RequestPartsSpec

func (p *DropPartitionsRequest) GetParts() *RequestPartsSpec {
	if !p.IsSetParts() {
		return DropPartitionsRequest_Parts_DEFAULT
	}
	return p.Parts
}

var DropPartitionsRequest_DeleteData_DEFAULT bool

func (p *DropPartitionsRequest) GetDeleteData() bool {
	if !p.IsSetDeleteData() {
		return DropPartitionsRequest_DeleteData_DEFAULT
	}
	return *p.DeleteData
}

var DropPartitionsRequest_IfExists_DEFAULT bool = true

func (p *DropPartitionsRequest) GetIfExists() bool {
	return p.IfExists
}

var DropPartitionsRequest_IgnoreProtection_DEFAULT bool

func (p *DropPartitionsRequest) GetIgnoreProtection() bool {
	if !p.IsSetIgnoreProtection() {
		return DropPartitionsRequest_IgnoreProtection_DEFAULT
	}
	return *p.IgnoreProtection
}

var DropPartitionsRequest_EnvironmentContext_DEFAULT *EnvironmentContext

func (p *DropPartitionsRequest) GetEnvironmentContext() *EnvironmentContext {
	if !p.IsSetEnvironmentContext() {
		return DropPartitionsRequest_EnvironmentContext_DEFAULT
	}
	return p.EnvironmentContext
}

var DropPartitionsRequest_NeedResult__DEFAULT bool = true

func (p *DropPartitionsRequest) GetNeedResult_() bool {
	return p.NeedResult_
}
func (p *DropPartitionsRequest) IsSetParts() bool {
	return p.Parts != nil
}

func (p *DropPartitionsRequest) IsSetDeleteData() bool {
	return p.DeleteData != nil
}

func (p *DropPartitionsRequest) IsSetIfExists() bool {
	return p.IfExists != DropPartitionsRequest_IfExists_DEFAULT
}

func (p *DropPartitionsRequest) IsSetIgnoreProtection() bool {
	return p.IgnoreProtection != nil
}

func (p *DropPartitionsRequest) IsSetEnvironmentContext() bool {
	return p.EnvironmentContext != nil
}

func (p *DropPartitionsRequest) IsSetNeedResult_() bool {
	return p.NeedResult_ != DropPartitionsRequest_NeedResult__DEFAULT
}

func (p *DropPartitionsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DropPartitionsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *DropPartitionsRequest) ReadField3(iprot thrift.TProtocol) error {
	p.Parts = &RequestPartsSpec{}
	if err := p.Parts.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Parts, err)
	}
	return nil
}

func (p *DropPartitionsRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeleteData = &v
	}
	return nil
}

func (p *DropPartitionsRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.IfExists = v
	}
	return nil
}

func (p *DropPartitionsRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.IgnoreProtection = &v
	}
	return nil
}

func (p *DropPartitionsRequest) ReadField7(iprot thrift.TProtocol) error {
	p.EnvironmentContext = &EnvironmentContext{}
	if err := p.EnvironmentContext.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EnvironmentContext, err)
	}
	return nil
}

func (p *DropPartitionsRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.NeedResult_ = v
	}
	return nil
}

func (p *DropPartitionsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DropPartitionsRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbName: %s", p, err)
	}
	return err
}

func (p *DropPartitionsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tblName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tblName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tblName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tblName: %s", p, err)
	}
	return err
}

func (p *DropPartitionsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parts", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:parts: %s", p, err)
	}
	if err := p.Parts.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Parts, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:parts: %s", p, err)
	}
	return err
}

func (p *DropPartitionsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteData() {
		if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:deleteData: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.DeleteData)); err != nil {
			return fmt.Errorf("%T.deleteData (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:deleteData: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIfExists() {
		if err := oprot.WriteFieldBegin("ifExists", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:ifExists: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IfExists)); err != nil {
			return fmt.Errorf("%T.ifExists (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:ifExists: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionsRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIgnoreProtection() {
		if err := oprot.WriteFieldBegin("ignoreProtection", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:ignoreProtection: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.IgnoreProtection)); err != nil {
			return fmt.Errorf("%T.ignoreProtection (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:ignoreProtection: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionsRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnvironmentContext() {
		if err := oprot.WriteFieldBegin("environmentContext", thrift.STRUCT, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:environmentContext: %s", p, err)
		}
		if err := p.EnvironmentContext.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.EnvironmentContext, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:environmentContext: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionsRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetNeedResult_() {
		if err := oprot.WriteFieldBegin("needResult", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:needResult: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NeedResult_)); err != nil {
			return fmt.Errorf("%T.needResult (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:needResult: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionsRequest(%+v)", *p)
}

type ResourceUri struct {
	ResourceType ResourceType `thrift:"resourceType,1" json:"resourceType"`
	Uri          string       `thrift:"uri,2" json:"uri"`
}

func NewResourceUri() *ResourceUri {
	return &ResourceUri{}
}

func (p *ResourceUri) GetResourceType() ResourceType {
	return p.ResourceType
}

func (p *ResourceUri) GetUri() string {
	return p.Uri
}
func (p *ResourceUri) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ResourceUri) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := ResourceType(v)
		p.ResourceType = temp
	}
	return nil
}

func (p *ResourceUri) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Uri = v
	}
	return nil
}

func (p *ResourceUri) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResourceUri"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ResourceUri) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resourceType", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:resourceType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ResourceType)); err != nil {
		return fmt.Errorf("%T.resourceType (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:resourceType: %s", p, err)
	}
	return err
}

func (p *ResourceUri) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uri", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uri: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Uri)); err != nil {
		return fmt.Errorf("%T.uri (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uri: %s", p, err)
	}
	return err
}

func (p *ResourceUri) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceUri(%+v)", *p)
}

type Function struct {
	FunctionName string         `thrift:"functionName,1" json:"functionName"`
	DbName       string         `thrift:"dbName,2" json:"dbName"`
	ClassName    string         `thrift:"className,3" json:"className"`
	OwnerName    string         `thrift:"ownerName,4" json:"ownerName"`
	OwnerType    PrincipalType  `thrift:"ownerType,5" json:"ownerType"`
	CreateTime   int32          `thrift:"createTime,6" json:"createTime"`
	FunctionType FunctionType   `thrift:"functionType,7" json:"functionType"`
	ResourceUris []*ResourceUri `thrift:"resourceUris,8" json:"resourceUris"`
}

func NewFunction() *Function {
	return &Function{}
}

func (p *Function) GetFunctionName() string {
	return p.FunctionName
}

func (p *Function) GetDbName() string {
	return p.DbName
}

func (p *Function) GetClassName() string {
	return p.ClassName
}

func (p *Function) GetOwnerName() string {
	return p.OwnerName
}

func (p *Function) GetOwnerType() PrincipalType {
	return p.OwnerType
}

func (p *Function) GetCreateTime() int32 {
	return p.CreateTime
}

func (p *Function) GetFunctionType() FunctionType {
	return p.FunctionType
}

func (p *Function) GetResourceUris() []*ResourceUri {
	return p.ResourceUris
}
func (p *Function) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Function) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.FunctionName = v
	}
	return nil
}

func (p *Function) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *Function) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ClassName = v
	}
	return nil
}

func (p *Function) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.OwnerName = v
	}
	return nil
}

func (p *Function) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := PrincipalType(v)
		p.OwnerType = temp
	}
	return nil
}

func (p *Function) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *Function) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := FunctionType(v)
		p.FunctionType = temp
	}
	return nil
}

func (p *Function) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ResourceUri, 0, size)
	p.ResourceUris = tSlice
	for i := 0; i < size; i++ {
		_elem50 := &ResourceUri{}
		if err := _elem50.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem50, err)
		}
		p.ResourceUris = append(p.ResourceUris, _elem50)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Function) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Function"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Function) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("functionName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:functionName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FunctionName)); err != nil {
		return fmt.Errorf("%T.functionName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:functionName: %s", p, err)
	}
	return err
}

func (p *Function) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:dbName: %s", p, err)
	}
	return err
}

func (p *Function) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("className", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:className: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ClassName)); err != nil {
		return fmt.Errorf("%T.className (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:className: %s", p, err)
	}
	return err
}

func (p *Function) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ownerName", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:ownerName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OwnerName)); err != nil {
		return fmt.Errorf("%T.ownerName (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:ownerName: %s", p, err)
	}
	return err
}

func (p *Function) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ownerType", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:ownerType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OwnerType)); err != nil {
		return fmt.Errorf("%T.ownerType (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:ownerType: %s", p, err)
	}
	return err
}

func (p *Function) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:createTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.createTime (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:createTime: %s", p, err)
	}
	return err
}

func (p *Function) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("functionType", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:functionType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.FunctionType)); err != nil {
		return fmt.Errorf("%T.functionType (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:functionType: %s", p, err)
	}
	return err
}

func (p *Function) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resourceUris", thrift.LIST, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:resourceUris: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ResourceUris)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ResourceUris {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:resourceUris: %s", p, err)
	}
	return err
}

func (p *Function) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Function(%+v)", *p)
}

type TxnInfo struct {
	Id       int64    `thrift:"id,1,required" json:"id"`
	State    TxnState `thrift:"state,2,required" json:"state"`
	User     string   `thrift:"user,3,required" json:"user"`
	Hostname string   `thrift:"hostname,4,required" json:"hostname"`
}

func NewTxnInfo() *TxnInfo {
	return &TxnInfo{}
}

func (p *TxnInfo) GetId() int64 {
	return p.Id
}

func (p *TxnInfo) GetState() TxnState {
	return p.State
}

func (p *TxnInfo) GetUser() string {
	return p.User
}

func (p *TxnInfo) GetHostname() string {
	return p.Hostname
}
func (p *TxnInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TxnInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *TxnInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := TxnState(v)
		p.State = temp
	}
	return nil
}

func (p *TxnInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *TxnInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Hostname = v
	}
	return nil
}

func (p *TxnInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TxnInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TxnInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *TxnInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:state: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return fmt.Errorf("%T.state (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:state: %s", p, err)
	}
	return err
}

func (p *TxnInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:user: %s", p, err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return fmt.Errorf("%T.user (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:user: %s", p, err)
	}
	return err
}

func (p *TxnInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:hostname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Hostname)); err != nil {
		return fmt.Errorf("%T.hostname (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:hostname: %s", p, err)
	}
	return err
}

func (p *TxnInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TxnInfo(%+v)", *p)
}

type GetOpenTxnsInfoResponse struct {
	TxnHighWaterMark int64      `thrift:"txn_high_water_mark,1,required" json:"txn_high_water_mark"`
	OpenTxns         []*TxnInfo `thrift:"open_txns,2,required" json:"open_txns"`
}

func NewGetOpenTxnsInfoResponse() *GetOpenTxnsInfoResponse {
	return &GetOpenTxnsInfoResponse{}
}

func (p *GetOpenTxnsInfoResponse) GetTxnHighWaterMark() int64 {
	return p.TxnHighWaterMark
}

func (p *GetOpenTxnsInfoResponse) GetOpenTxns() []*TxnInfo {
	return p.OpenTxns
}
func (p *GetOpenTxnsInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetOpenTxnsInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TxnHighWaterMark = v
	}
	return nil
}

func (p *GetOpenTxnsInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TxnInfo, 0, size)
	p.OpenTxns = tSlice
	for i := 0; i < size; i++ {
		_elem51 := &TxnInfo{}
		if err := _elem51.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem51, err)
		}
		p.OpenTxns = append(p.OpenTxns, _elem51)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetOpenTxnsInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetOpenTxnsInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetOpenTxnsInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("txn_high_water_mark", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:txn_high_water_mark: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TxnHighWaterMark)); err != nil {
		return fmt.Errorf("%T.txn_high_water_mark (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:txn_high_water_mark: %s", p, err)
	}
	return err
}

func (p *GetOpenTxnsInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("open_txns", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:open_txns: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OpenTxns)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.OpenTxns {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:open_txns: %s", p, err)
	}
	return err
}

func (p *GetOpenTxnsInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOpenTxnsInfoResponse(%+v)", *p)
}

type GetOpenTxnsResponse struct {
	TxnHighWaterMark int64          `thrift:"txn_high_water_mark,1,required" json:"txn_high_water_mark"`
	OpenTxns         map[int64]bool `thrift:"open_txns,2,required" json:"open_txns"`
}

func NewGetOpenTxnsResponse() *GetOpenTxnsResponse {
	return &GetOpenTxnsResponse{}
}

func (p *GetOpenTxnsResponse) GetTxnHighWaterMark() int64 {
	return p.TxnHighWaterMark
}

func (p *GetOpenTxnsResponse) GetOpenTxns() map[int64]bool {
	return p.OpenTxns
}
func (p *GetOpenTxnsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetOpenTxnsResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TxnHighWaterMark = v
	}
	return nil
}

func (p *GetOpenTxnsResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[int64]bool, size)
	p.OpenTxns = tSet
	for i := 0; i < size; i++ {
		var _elem52 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem52 = v
		}
		p.OpenTxns[_elem52] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *GetOpenTxnsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetOpenTxnsResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetOpenTxnsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("txn_high_water_mark", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:txn_high_water_mark: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TxnHighWaterMark)); err != nil {
		return fmt.Errorf("%T.txn_high_water_mark (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:txn_high_water_mark: %s", p, err)
	}
	return err
}

func (p *GetOpenTxnsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("open_txns", thrift.SET, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:open_txns: %s", p, err)
	}
	if err := oprot.WriteSetBegin(thrift.I64, len(p.OpenTxns)); err != nil {
		return fmt.Errorf("error writing set begin: %s", err)
	}
	for v, _ := range p.OpenTxns {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return fmt.Errorf("error writing set end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:open_txns: %s", p, err)
	}
	return err
}

func (p *GetOpenTxnsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOpenTxnsResponse(%+v)", *p)
}

type OpenTxnRequest struct {
	NumTxns  int32  `thrift:"num_txns,1,required" json:"num_txns"`
	User     string `thrift:"user,2,required" json:"user"`
	Hostname string `thrift:"hostname,3,required" json:"hostname"`
}

func NewOpenTxnRequest() *OpenTxnRequest {
	return &OpenTxnRequest{}
}

func (p *OpenTxnRequest) GetNumTxns() int32 {
	return p.NumTxns
}

func (p *OpenTxnRequest) GetUser() string {
	return p.User
}

func (p *OpenTxnRequest) GetHostname() string {
	return p.Hostname
}
func (p *OpenTxnRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OpenTxnRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.NumTxns = v
	}
	return nil
}

func (p *OpenTxnRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *OpenTxnRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Hostname = v
	}
	return nil
}

func (p *OpenTxnRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OpenTxnRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OpenTxnRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_txns", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:num_txns: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NumTxns)); err != nil {
		return fmt.Errorf("%T.num_txns (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:num_txns: %s", p, err)
	}
	return err
}

func (p *OpenTxnRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user: %s", p, err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return fmt.Errorf("%T.user (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user: %s", p, err)
	}
	return err
}

func (p *OpenTxnRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:hostname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Hostname)); err != nil {
		return fmt.Errorf("%T.hostname (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:hostname: %s", p, err)
	}
	return err
}

func (p *OpenTxnRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OpenTxnRequest(%+v)", *p)
}

type OpenTxnsResponse struct {
	TxnIds []int64 `thrift:"txn_ids,1,required" json:"txn_ids"`
}

func NewOpenTxnsResponse() *OpenTxnsResponse {
	return &OpenTxnsResponse{}
}

func (p *OpenTxnsResponse) GetTxnIds() []int64 {
	return p.TxnIds
}
func (p *OpenTxnsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OpenTxnsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.TxnIds = tSlice
	for i := 0; i < size; i++ {
		var _elem53 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem53 = v
		}
		p.TxnIds = append(p.TxnIds, _elem53)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *OpenTxnsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OpenTxnsResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OpenTxnsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("txn_ids", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:txn_ids: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.TxnIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.TxnIds {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:txn_ids: %s", p, err)
	}
	return err
}

func (p *OpenTxnsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OpenTxnsResponse(%+v)", *p)
}

type AbortTxnRequest struct {
	Txnid int64 `thrift:"txnid,1,required" json:"txnid"`
}

func NewAbortTxnRequest() *AbortTxnRequest {
	return &AbortTxnRequest{}
}

func (p *AbortTxnRequest) GetTxnid() int64 {
	return p.Txnid
}
func (p *AbortTxnRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AbortTxnRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Txnid = v
	}
	return nil
}

func (p *AbortTxnRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AbortTxnRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AbortTxnRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("txnid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:txnid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Txnid)); err != nil {
		return fmt.Errorf("%T.txnid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:txnid: %s", p, err)
	}
	return err
}

func (p *AbortTxnRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AbortTxnRequest(%+v)", *p)
}

type CommitTxnRequest struct {
	Txnid int64 `thrift:"txnid,1,required" json:"txnid"`
}

func NewCommitTxnRequest() *CommitTxnRequest {
	return &CommitTxnRequest{}
}

func (p *CommitTxnRequest) GetTxnid() int64 {
	return p.Txnid
}
func (p *CommitTxnRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommitTxnRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Txnid = v
	}
	return nil
}

func (p *CommitTxnRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CommitTxnRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommitTxnRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("txnid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:txnid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Txnid)); err != nil {
		return fmt.Errorf("%T.txnid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:txnid: %s", p, err)
	}
	return err
}

func (p *CommitTxnRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitTxnRequest(%+v)", *p)
}

type LockComponent struct {
	TypeA1        LockType  `thrift:"type,1,required" json:"type"`
	Level         LockLevel `thrift:"level,2,required" json:"level"`
	Dbname        string    `thrift:"dbname,3,required" json:"dbname"`
	Tablename     *string   `thrift:"tablename,4" json:"tablename"`
	Partitionname *string   `thrift:"partitionname,5" json:"partitionname"`
}

func NewLockComponent() *LockComponent {
	return &LockComponent{}
}

func (p *LockComponent) GetTypeA1() LockType {
	return p.TypeA1
}

func (p *LockComponent) GetLevel() LockLevel {
	return p.Level
}

func (p *LockComponent) GetDbname() string {
	return p.Dbname
}

var LockComponent_Tablename_DEFAULT string

func (p *LockComponent) GetTablename() string {
	if !p.IsSetTablename() {
		return LockComponent_Tablename_DEFAULT
	}
	return *p.Tablename
}

var LockComponent_Partitionname_DEFAULT string

func (p *LockComponent) GetPartitionname() string {
	if !p.IsSetPartitionname() {
		return LockComponent_Partitionname_DEFAULT
	}
	return *p.Partitionname
}
func (p *LockComponent) IsSetTablename() bool {
	return p.Tablename != nil
}

func (p *LockComponent) IsSetPartitionname() bool {
	return p.Partitionname != nil
}

func (p *LockComponent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockComponent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := LockType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *LockComponent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := LockLevel(v)
		p.Level = temp
	}
	return nil
}

func (p *LockComponent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *LockComponent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Tablename = &v
	}
	return nil
}

func (p *LockComponent) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Partitionname = &v
	}
	return nil
}

func (p *LockComponent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LockComponent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockComponent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *LockComponent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("level", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:level: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return fmt.Errorf("%T.level (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:level: %s", p, err)
	}
	return err
}

func (p *LockComponent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:dbname: %s", p, err)
	}
	return err
}

func (p *LockComponent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTablename() {
		if err := oprot.WriteFieldBegin("tablename", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:tablename: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Tablename)); err != nil {
			return fmt.Errorf("%T.tablename (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:tablename: %s", p, err)
		}
	}
	return err
}

func (p *LockComponent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionname() {
		if err := oprot.WriteFieldBegin("partitionname", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:partitionname: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Partitionname)); err != nil {
			return fmt.Errorf("%T.partitionname (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:partitionname: %s", p, err)
		}
	}
	return err
}

func (p *LockComponent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockComponent(%+v)", *p)
}

type LockRequest struct {
	Component []*LockComponent `thrift:"component,1,required" json:"component"`
	Txnid     *int64           `thrift:"txnid,2" json:"txnid"`
	User      string           `thrift:"user,3,required" json:"user"`
	Hostname  string           `thrift:"hostname,4,required" json:"hostname"`
}

func NewLockRequest() *LockRequest {
	return &LockRequest{}
}

func (p *LockRequest) GetComponent() []*LockComponent {
	return p.Component
}

var LockRequest_Txnid_DEFAULT int64

func (p *LockRequest) GetTxnid() int64 {
	if !p.IsSetTxnid() {
		return LockRequest_Txnid_DEFAULT
	}
	return *p.Txnid
}

func (p *LockRequest) GetUser() string {
	return p.User
}

func (p *LockRequest) GetHostname() string {
	return p.Hostname
}
func (p *LockRequest) IsSetTxnid() bool {
	return p.Txnid != nil
}

func (p *LockRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*LockComponent, 0, size)
	p.Component = tSlice
	for i := 0; i < size; i++ {
		_elem54 := &LockComponent{}
		if err := _elem54.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem54, err)
		}
		p.Component = append(p.Component, _elem54)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *LockRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Txnid = &v
	}
	return nil
}

func (p *LockRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *LockRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Hostname = v
	}
	return nil
}

func (p *LockRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LockRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:component: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Component)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Component {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:component: %s", p, err)
	}
	return err
}

func (p *LockRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnid() {
		if err := oprot.WriteFieldBegin("txnid", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:txnid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Txnid)); err != nil {
			return fmt.Errorf("%T.txnid (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:txnid: %s", p, err)
		}
	}
	return err
}

func (p *LockRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:user: %s", p, err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return fmt.Errorf("%T.user (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:user: %s", p, err)
	}
	return err
}

func (p *LockRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:hostname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Hostname)); err != nil {
		return fmt.Errorf("%T.hostname (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:hostname: %s", p, err)
	}
	return err
}

func (p *LockRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockRequest(%+v)", *p)
}

type LockResponse struct {
	Lockid int64     `thrift:"lockid,1,required" json:"lockid"`
	State  LockState `thrift:"state,2,required" json:"state"`
}

func NewLockResponse() *LockResponse {
	return &LockResponse{}
}

func (p *LockResponse) GetLockid() int64 {
	return p.Lockid
}

func (p *LockResponse) GetState() LockState {
	return p.State
}
func (p *LockResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Lockid = v
	}
	return nil
}

func (p *LockResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := LockState(v)
		p.State = temp
	}
	return nil
}

func (p *LockResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LockResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lockid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:lockid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Lockid)); err != nil {
		return fmt.Errorf("%T.lockid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:lockid: %s", p, err)
	}
	return err
}

func (p *LockResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:state: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return fmt.Errorf("%T.state (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:state: %s", p, err)
	}
	return err
}

func (p *LockResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockResponse(%+v)", *p)
}

type CheckLockRequest struct {
	Lockid int64 `thrift:"lockid,1,required" json:"lockid"`
}

func NewCheckLockRequest() *CheckLockRequest {
	return &CheckLockRequest{}
}

func (p *CheckLockRequest) GetLockid() int64 {
	return p.Lockid
}
func (p *CheckLockRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckLockRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Lockid = v
	}
	return nil
}

func (p *CheckLockRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CheckLockRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckLockRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lockid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:lockid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Lockid)); err != nil {
		return fmt.Errorf("%T.lockid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:lockid: %s", p, err)
	}
	return err
}

func (p *CheckLockRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckLockRequest(%+v)", *p)
}

type UnlockRequest struct {
	Lockid int64 `thrift:"lockid,1,required" json:"lockid"`
}

func NewUnlockRequest() *UnlockRequest {
	return &UnlockRequest{}
}

func (p *UnlockRequest) GetLockid() int64 {
	return p.Lockid
}
func (p *UnlockRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnlockRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Lockid = v
	}
	return nil
}

func (p *UnlockRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnlockRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnlockRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lockid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:lockid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Lockid)); err != nil {
		return fmt.Errorf("%T.lockid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:lockid: %s", p, err)
	}
	return err
}

func (p *UnlockRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnlockRequest(%+v)", *p)
}

type ShowLocksRequest struct {
}

func NewShowLocksRequest() *ShowLocksRequest {
	return &ShowLocksRequest{}
}

func (p *ShowLocksRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShowLocksRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShowLocksRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ShowLocksRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowLocksRequest(%+v)", *p)
}

type ShowLocksResponseElement struct {
	Lockid        int64     `thrift:"lockid,1,required" json:"lockid"`
	Dbname        string    `thrift:"dbname,2,required" json:"dbname"`
	Tablename     *string   `thrift:"tablename,3" json:"tablename"`
	Partname      *string   `thrift:"partname,4" json:"partname"`
	State         LockState `thrift:"state,5,required" json:"state"`
	TypeA1        LockType  `thrift:"type,6,required" json:"type"`
	Txnid         *int64    `thrift:"txnid,7" json:"txnid"`
	Lastheartbeat int64     `thrift:"lastheartbeat,8,required" json:"lastheartbeat"`
	Acquiredat    *int64    `thrift:"acquiredat,9" json:"acquiredat"`
	User          string    `thrift:"user,10,required" json:"user"`
	Hostname      string    `thrift:"hostname,11,required" json:"hostname"`
}

func NewShowLocksResponseElement() *ShowLocksResponseElement {
	return &ShowLocksResponseElement{}
}

func (p *ShowLocksResponseElement) GetLockid() int64 {
	return p.Lockid
}

func (p *ShowLocksResponseElement) GetDbname() string {
	return p.Dbname
}

var ShowLocksResponseElement_Tablename_DEFAULT string

func (p *ShowLocksResponseElement) GetTablename() string {
	if !p.IsSetTablename() {
		return ShowLocksResponseElement_Tablename_DEFAULT
	}
	return *p.Tablename
}

var ShowLocksResponseElement_Partname_DEFAULT string

func (p *ShowLocksResponseElement) GetPartname() string {
	if !p.IsSetPartname() {
		return ShowLocksResponseElement_Partname_DEFAULT
	}
	return *p.Partname
}

func (p *ShowLocksResponseElement) GetState() LockState {
	return p.State
}

func (p *ShowLocksResponseElement) GetTypeA1() LockType {
	return p.TypeA1
}

var ShowLocksResponseElement_Txnid_DEFAULT int64

func (p *ShowLocksResponseElement) GetTxnid() int64 {
	if !p.IsSetTxnid() {
		return ShowLocksResponseElement_Txnid_DEFAULT
	}
	return *p.Txnid
}

func (p *ShowLocksResponseElement) GetLastheartbeat() int64 {
	return p.Lastheartbeat
}

var ShowLocksResponseElement_Acquiredat_DEFAULT int64

func (p *ShowLocksResponseElement) GetAcquiredat() int64 {
	if !p.IsSetAcquiredat() {
		return ShowLocksResponseElement_Acquiredat_DEFAULT
	}
	return *p.Acquiredat
}

func (p *ShowLocksResponseElement) GetUser() string {
	return p.User
}

func (p *ShowLocksResponseElement) GetHostname() string {
	return p.Hostname
}
func (p *ShowLocksResponseElement) IsSetTablename() bool {
	return p.Tablename != nil
}

func (p *ShowLocksResponseElement) IsSetPartname() bool {
	return p.Partname != nil
}

func (p *ShowLocksResponseElement) IsSetTxnid() bool {
	return p.Txnid != nil
}

func (p *ShowLocksResponseElement) IsSetAcquiredat() bool {
	return p.Acquiredat != nil
}

func (p *ShowLocksResponseElement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShowLocksResponseElement) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Lockid = v
	}
	return nil
}

func (p *ShowLocksResponseElement) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *ShowLocksResponseElement) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Tablename = &v
	}
	return nil
}

func (p *ShowLocksResponseElement) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Partname = &v
	}
	return nil
}

func (p *ShowLocksResponseElement) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := LockState(v)
		p.State = temp
	}
	return nil
}

func (p *ShowLocksResponseElement) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := LockType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *ShowLocksResponseElement) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Txnid = &v
	}
	return nil
}

func (p *ShowLocksResponseElement) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Lastheartbeat = v
	}
	return nil
}

func (p *ShowLocksResponseElement) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.Acquiredat = &v
	}
	return nil
}

func (p *ShowLocksResponseElement) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *ShowLocksResponseElement) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.Hostname = v
	}
	return nil
}

func (p *ShowLocksResponseElement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShowLocksResponseElement"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ShowLocksResponseElement) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lockid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:lockid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Lockid)); err != nil {
		return fmt.Errorf("%T.lockid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:lockid: %s", p, err)
	}
	return err
}

func (p *ShowLocksResponseElement) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:dbname: %s", p, err)
	}
	return err
}

func (p *ShowLocksResponseElement) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTablename() {
		if err := oprot.WriteFieldBegin("tablename", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:tablename: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Tablename)); err != nil {
			return fmt.Errorf("%T.tablename (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:tablename: %s", p, err)
		}
	}
	return err
}

func (p *ShowLocksResponseElement) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartname() {
		if err := oprot.WriteFieldBegin("partname", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:partname: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Partname)); err != nil {
			return fmt.Errorf("%T.partname (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:partname: %s", p, err)
		}
	}
	return err
}

func (p *ShowLocksResponseElement) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:state: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return fmt.Errorf("%T.state (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:state: %s", p, err)
	}
	return err
}

func (p *ShowLocksResponseElement) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:type: %s", p, err)
	}
	return err
}

func (p *ShowLocksResponseElement) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnid() {
		if err := oprot.WriteFieldBegin("txnid", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:txnid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Txnid)); err != nil {
			return fmt.Errorf("%T.txnid (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:txnid: %s", p, err)
		}
	}
	return err
}

func (p *ShowLocksResponseElement) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastheartbeat", thrift.I64, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:lastheartbeat: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Lastheartbeat)); err != nil {
		return fmt.Errorf("%T.lastheartbeat (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:lastheartbeat: %s", p, err)
	}
	return err
}

func (p *ShowLocksResponseElement) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAcquiredat() {
		if err := oprot.WriteFieldBegin("acquiredat", thrift.I64, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:acquiredat: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Acquiredat)); err != nil {
			return fmt.Errorf("%T.acquiredat (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:acquiredat: %s", p, err)
		}
	}
	return err
}

func (p *ShowLocksResponseElement) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:user: %s", p, err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return fmt.Errorf("%T.user (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:user: %s", p, err)
	}
	return err
}

func (p *ShowLocksResponseElement) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:hostname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Hostname)); err != nil {
		return fmt.Errorf("%T.hostname (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:hostname: %s", p, err)
	}
	return err
}

func (p *ShowLocksResponseElement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowLocksResponseElement(%+v)", *p)
}

type ShowLocksResponse struct {
	Locks []*ShowLocksResponseElement `thrift:"locks,1" json:"locks"`
}

func NewShowLocksResponse() *ShowLocksResponse {
	return &ShowLocksResponse{}
}

func (p *ShowLocksResponse) GetLocks() []*ShowLocksResponseElement {
	return p.Locks
}
func (p *ShowLocksResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShowLocksResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ShowLocksResponseElement, 0, size)
	p.Locks = tSlice
	for i := 0; i < size; i++ {
		_elem55 := &ShowLocksResponseElement{}
		if err := _elem55.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem55, err)
		}
		p.Locks = append(p.Locks, _elem55)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ShowLocksResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShowLocksResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ShowLocksResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("locks", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:locks: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Locks)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Locks {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:locks: %s", p, err)
	}
	return err
}

func (p *ShowLocksResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowLocksResponse(%+v)", *p)
}

type HeartbeatRequest struct {
	Lockid *int64 `thrift:"lockid,1" json:"lockid"`
	Txnid  *int64 `thrift:"txnid,2" json:"txnid"`
}

func NewHeartbeatRequest() *HeartbeatRequest {
	return &HeartbeatRequest{}
}

var HeartbeatRequest_Lockid_DEFAULT int64

func (p *HeartbeatRequest) GetLockid() int64 {
	if !p.IsSetLockid() {
		return HeartbeatRequest_Lockid_DEFAULT
	}
	return *p.Lockid
}

var HeartbeatRequest_Txnid_DEFAULT int64

func (p *HeartbeatRequest) GetTxnid() int64 {
	if !p.IsSetTxnid() {
		return HeartbeatRequest_Txnid_DEFAULT
	}
	return *p.Txnid
}
func (p *HeartbeatRequest) IsSetLockid() bool {
	return p.Lockid != nil
}

func (p *HeartbeatRequest) IsSetTxnid() bool {
	return p.Txnid != nil
}

func (p *HeartbeatRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HeartbeatRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Lockid = &v
	}
	return nil
}

func (p *HeartbeatRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Txnid = &v
	}
	return nil
}

func (p *HeartbeatRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HeartbeatRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HeartbeatRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLockid() {
		if err := oprot.WriteFieldBegin("lockid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:lockid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Lockid)); err != nil {
			return fmt.Errorf("%T.lockid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:lockid: %s", p, err)
		}
	}
	return err
}

func (p *HeartbeatRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnid() {
		if err := oprot.WriteFieldBegin("txnid", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:txnid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Txnid)); err != nil {
			return fmt.Errorf("%T.txnid (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:txnid: %s", p, err)
		}
	}
	return err
}

func (p *HeartbeatRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HeartbeatRequest(%+v)", *p)
}

type HeartbeatTxnRangeRequest struct {
	Min int64 `thrift:"min,1,required" json:"min"`
	Max int64 `thrift:"max,2,required" json:"max"`
}

func NewHeartbeatTxnRangeRequest() *HeartbeatTxnRangeRequest {
	return &HeartbeatTxnRangeRequest{}
}

func (p *HeartbeatTxnRangeRequest) GetMin() int64 {
	return p.Min
}

func (p *HeartbeatTxnRangeRequest) GetMax() int64 {
	return p.Max
}
func (p *HeartbeatTxnRangeRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HeartbeatTxnRangeRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Min = v
	}
	return nil
}

func (p *HeartbeatTxnRangeRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Max = v
	}
	return nil
}

func (p *HeartbeatTxnRangeRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HeartbeatTxnRangeRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HeartbeatTxnRangeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("min", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:min: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Min)); err != nil {
		return fmt.Errorf("%T.min (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:min: %s", p, err)
	}
	return err
}

func (p *HeartbeatTxnRangeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:max: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Max)); err != nil {
		return fmt.Errorf("%T.max (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:max: %s", p, err)
	}
	return err
}

func (p *HeartbeatTxnRangeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HeartbeatTxnRangeRequest(%+v)", *p)
}

type HeartbeatTxnRangeResponse struct {
	Aborted map[int64]bool `thrift:"aborted,1,required" json:"aborted"`
	Nosuch  map[int64]bool `thrift:"nosuch,2,required" json:"nosuch"`
}

func NewHeartbeatTxnRangeResponse() *HeartbeatTxnRangeResponse {
	return &HeartbeatTxnRangeResponse{}
}

func (p *HeartbeatTxnRangeResponse) GetAborted() map[int64]bool {
	return p.Aborted
}

func (p *HeartbeatTxnRangeResponse) GetNosuch() map[int64]bool {
	return p.Nosuch
}
func (p *HeartbeatTxnRangeResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HeartbeatTxnRangeResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[int64]bool, size)
	p.Aborted = tSet
	for i := 0; i < size; i++ {
		var _elem56 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem56 = v
		}
		p.Aborted[_elem56] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *HeartbeatTxnRangeResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[int64]bool, size)
	p.Nosuch = tSet
	for i := 0; i < size; i++ {
		var _elem57 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem57 = v
		}
		p.Nosuch[_elem57] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *HeartbeatTxnRangeResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HeartbeatTxnRangeResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HeartbeatTxnRangeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("aborted", thrift.SET, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:aborted: %s", p, err)
	}
	if err := oprot.WriteSetBegin(thrift.I64, len(p.Aborted)); err != nil {
		return fmt.Errorf("error writing set begin: %s", err)
	}
	for v, _ := range p.Aborted {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return fmt.Errorf("error writing set end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:aborted: %s", p, err)
	}
	return err
}

func (p *HeartbeatTxnRangeResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nosuch", thrift.SET, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:nosuch: %s", p, err)
	}
	if err := oprot.WriteSetBegin(thrift.I64, len(p.Nosuch)); err != nil {
		return fmt.Errorf("error writing set begin: %s", err)
	}
	for v, _ := range p.Nosuch {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return fmt.Errorf("error writing set end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:nosuch: %s", p, err)
	}
	return err
}

func (p *HeartbeatTxnRangeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HeartbeatTxnRangeResponse(%+v)", *p)
}

type CompactionRequest struct {
	Dbname        string         `thrift:"dbname,1,required" json:"dbname"`
	Tablename     string         `thrift:"tablename,2,required" json:"tablename"`
	Partitionname *string        `thrift:"partitionname,3" json:"partitionname"`
	TypeA1        CompactionType `thrift:"type,4,required" json:"type"`
	Runas         *string        `thrift:"runas,5" json:"runas"`
}

func NewCompactionRequest() *CompactionRequest {
	return &CompactionRequest{}
}

func (p *CompactionRequest) GetDbname() string {
	return p.Dbname
}

func (p *CompactionRequest) GetTablename() string {
	return p.Tablename
}

var CompactionRequest_Partitionname_DEFAULT string

func (p *CompactionRequest) GetPartitionname() string {
	if !p.IsSetPartitionname() {
		return CompactionRequest_Partitionname_DEFAULT
	}
	return *p.Partitionname
}

func (p *CompactionRequest) GetTypeA1() CompactionType {
	return p.TypeA1
}

var CompactionRequest_Runas_DEFAULT string

func (p *CompactionRequest) GetRunas() string {
	if !p.IsSetRunas() {
		return CompactionRequest_Runas_DEFAULT
	}
	return *p.Runas
}
func (p *CompactionRequest) IsSetPartitionname() bool {
	return p.Partitionname != nil
}

func (p *CompactionRequest) IsSetRunas() bool {
	return p.Runas != nil
}

func (p *CompactionRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CompactionRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *CompactionRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Tablename = v
	}
	return nil
}

func (p *CompactionRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Partitionname = &v
	}
	return nil
}

func (p *CompactionRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := CompactionType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *CompactionRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Runas = &v
	}
	return nil
}

func (p *CompactionRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CompactionRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CompactionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *CompactionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tablename", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tablename: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Tablename)); err != nil {
		return fmt.Errorf("%T.tablename (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tablename: %s", p, err)
	}
	return err
}

func (p *CompactionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionname() {
		if err := oprot.WriteFieldBegin("partitionname", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:partitionname: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Partitionname)); err != nil {
			return fmt.Errorf("%T.partitionname (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:partitionname: %s", p, err)
		}
	}
	return err
}

func (p *CompactionRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:type: %s", p, err)
	}
	return err
}

func (p *CompactionRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRunas() {
		if err := oprot.WriteFieldBegin("runas", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:runas: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Runas)); err != nil {
			return fmt.Errorf("%T.runas (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:runas: %s", p, err)
		}
	}
	return err
}

func (p *CompactionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompactionRequest(%+v)", *p)
}

type ShowCompactRequest struct {
}

func NewShowCompactRequest() *ShowCompactRequest {
	return &ShowCompactRequest{}
}

func (p *ShowCompactRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShowCompactRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShowCompactRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ShowCompactRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowCompactRequest(%+v)", *p)
}

type ShowCompactResponseElement struct {
	Dbname        string         `thrift:"dbname,1,required" json:"dbname"`
	Tablename     string         `thrift:"tablename,2,required" json:"tablename"`
	Partitionname string         `thrift:"partitionname,3,required" json:"partitionname"`
	TypeA1        CompactionType `thrift:"type,4,required" json:"type"`
	State         string         `thrift:"state,5,required" json:"state"`
	Workerid      string         `thrift:"workerid,6,required" json:"workerid"`
	Start         int64          `thrift:"start,7,required" json:"start"`
	RunAs         string         `thrift:"runAs,8,required" json:"runAs"`
}

func NewShowCompactResponseElement() *ShowCompactResponseElement {
	return &ShowCompactResponseElement{}
}

func (p *ShowCompactResponseElement) GetDbname() string {
	return p.Dbname
}

func (p *ShowCompactResponseElement) GetTablename() string {
	return p.Tablename
}

func (p *ShowCompactResponseElement) GetPartitionname() string {
	return p.Partitionname
}

func (p *ShowCompactResponseElement) GetTypeA1() CompactionType {
	return p.TypeA1
}

func (p *ShowCompactResponseElement) GetState() string {
	return p.State
}

func (p *ShowCompactResponseElement) GetWorkerid() string {
	return p.Workerid
}

func (p *ShowCompactResponseElement) GetStart() int64 {
	return p.Start
}

func (p *ShowCompactResponseElement) GetRunAs() string {
	return p.RunAs
}
func (p *ShowCompactResponseElement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShowCompactResponseElement) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *ShowCompactResponseElement) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Tablename = v
	}
	return nil
}

func (p *ShowCompactResponseElement) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Partitionname = v
	}
	return nil
}

func (p *ShowCompactResponseElement) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := CompactionType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *ShowCompactResponseElement) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *ShowCompactResponseElement) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Workerid = v
	}
	return nil
}

func (p *ShowCompactResponseElement) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *ShowCompactResponseElement) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.RunAs = v
	}
	return nil
}

func (p *ShowCompactResponseElement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShowCompactResponseElement"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ShowCompactResponseElement) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *ShowCompactResponseElement) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tablename", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tablename: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Tablename)); err != nil {
		return fmt.Errorf("%T.tablename (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tablename: %s", p, err)
	}
	return err
}

func (p *ShowCompactResponseElement) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionname", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:partitionname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Partitionname)); err != nil {
		return fmt.Errorf("%T.partitionname (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:partitionname: %s", p, err)
	}
	return err
}

func (p *ShowCompactResponseElement) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:type: %s", p, err)
	}
	return err
}

func (p *ShowCompactResponseElement) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:state: %s", p, err)
	}
	if err := oprot.WriteString(string(p.State)); err != nil {
		return fmt.Errorf("%T.state (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:state: %s", p, err)
	}
	return err
}

func (p *ShowCompactResponseElement) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("workerid", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:workerid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Workerid)); err != nil {
		return fmt.Errorf("%T.workerid (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:workerid: %s", p, err)
	}
	return err
}

func (p *ShowCompactResponseElement) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I64, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:start: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Start)); err != nil {
		return fmt.Errorf("%T.start (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:start: %s", p, err)
	}
	return err
}

func (p *ShowCompactResponseElement) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("runAs", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:runAs: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RunAs)); err != nil {
		return fmt.Errorf("%T.runAs (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:runAs: %s", p, err)
	}
	return err
}

func (p *ShowCompactResponseElement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowCompactResponseElement(%+v)", *p)
}

type ShowCompactResponse struct {
	Compacts []*ShowCompactResponseElement `thrift:"compacts,1,required" json:"compacts"`
}

func NewShowCompactResponse() *ShowCompactResponse {
	return &ShowCompactResponse{}
}

func (p *ShowCompactResponse) GetCompacts() []*ShowCompactResponseElement {
	return p.Compacts
}
func (p *ShowCompactResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShowCompactResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ShowCompactResponseElement, 0, size)
	p.Compacts = tSlice
	for i := 0; i < size; i++ {
		_elem58 := &ShowCompactResponseElement{}
		if err := _elem58.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem58, err)
		}
		p.Compacts = append(p.Compacts, _elem58)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ShowCompactResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShowCompactResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ShowCompactResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compacts", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:compacts: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Compacts)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Compacts {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:compacts: %s", p, err)
	}
	return err
}

func (p *ShowCompactResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowCompactResponse(%+v)", *p)
}

type MetaException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewMetaException() *MetaException {
	return &MetaException{}
}

func (p *MetaException) GetMessage() string {
	return p.Message
}
func (p *MetaException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MetaException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *MetaException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MetaException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MetaException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *MetaException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetaException(%+v)", *p)
}

func (p *MetaException) Error() string {
	return p.String()
}

type UnknownTableException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewUnknownTableException() *UnknownTableException {
	return &UnknownTableException{}
}

func (p *UnknownTableException) GetMessage() string {
	return p.Message
}
func (p *UnknownTableException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnknownTableException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *UnknownTableException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnknownTableException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnknownTableException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *UnknownTableException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnknownTableException(%+v)", *p)
}

func (p *UnknownTableException) Error() string {
	return p.String()
}

type UnknownDBException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewUnknownDBException() *UnknownDBException {
	return &UnknownDBException{}
}

func (p *UnknownDBException) GetMessage() string {
	return p.Message
}
func (p *UnknownDBException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnknownDBException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *UnknownDBException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnknownDBException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnknownDBException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *UnknownDBException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnknownDBException(%+v)", *p)
}

func (p *UnknownDBException) Error() string {
	return p.String()
}

type AlreadyExistsException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewAlreadyExistsException() *AlreadyExistsException {
	return &AlreadyExistsException{}
}

func (p *AlreadyExistsException) GetMessage() string {
	return p.Message
}
func (p *AlreadyExistsException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlreadyExistsException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *AlreadyExistsException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AlreadyExistsException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlreadyExistsException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *AlreadyExistsException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlreadyExistsException(%+v)", *p)
}

func (p *AlreadyExistsException) Error() string {
	return p.String()
}

type InvalidPartitionException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewInvalidPartitionException() *InvalidPartitionException {
	return &InvalidPartitionException{}
}

func (p *InvalidPartitionException) GetMessage() string {
	return p.Message
}
func (p *InvalidPartitionException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InvalidPartitionException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InvalidPartitionException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidPartitionException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InvalidPartitionException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *InvalidPartitionException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidPartitionException(%+v)", *p)
}

func (p *InvalidPartitionException) Error() string {
	return p.String()
}

type UnknownPartitionException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewUnknownPartitionException() *UnknownPartitionException {
	return &UnknownPartitionException{}
}

func (p *UnknownPartitionException) GetMessage() string {
	return p.Message
}
func (p *UnknownPartitionException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnknownPartitionException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *UnknownPartitionException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnknownPartitionException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnknownPartitionException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *UnknownPartitionException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnknownPartitionException(%+v)", *p)
}

func (p *UnknownPartitionException) Error() string {
	return p.String()
}

type InvalidObjectException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewInvalidObjectException() *InvalidObjectException {
	return &InvalidObjectException{}
}

func (p *InvalidObjectException) GetMessage() string {
	return p.Message
}
func (p *InvalidObjectException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InvalidObjectException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InvalidObjectException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidObjectException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InvalidObjectException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *InvalidObjectException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidObjectException(%+v)", *p)
}

func (p *InvalidObjectException) Error() string {
	return p.String()
}

type NoSuchObjectException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewNoSuchObjectException() *NoSuchObjectException {
	return &NoSuchObjectException{}
}

func (p *NoSuchObjectException) GetMessage() string {
	return p.Message
}
func (p *NoSuchObjectException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoSuchObjectException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *NoSuchObjectException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoSuchObjectException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NoSuchObjectException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *NoSuchObjectException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoSuchObjectException(%+v)", *p)
}

func (p *NoSuchObjectException) Error() string {
	return p.String()
}

type IndexAlreadyExistsException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewIndexAlreadyExistsException() *IndexAlreadyExistsException {
	return &IndexAlreadyExistsException{}
}

func (p *IndexAlreadyExistsException) GetMessage() string {
	return p.Message
}
func (p *IndexAlreadyExistsException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IndexAlreadyExistsException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *IndexAlreadyExistsException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IndexAlreadyExistsException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IndexAlreadyExistsException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *IndexAlreadyExistsException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IndexAlreadyExistsException(%+v)", *p)
}

func (p *IndexAlreadyExistsException) Error() string {
	return p.String()
}

type InvalidOperationException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewInvalidOperationException() *InvalidOperationException {
	return &InvalidOperationException{}
}

func (p *InvalidOperationException) GetMessage() string {
	return p.Message
}
func (p *InvalidOperationException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InvalidOperationException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InvalidOperationException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidOperationException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InvalidOperationException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *InvalidOperationException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidOperationException(%+v)", *p)
}

func (p *InvalidOperationException) Error() string {
	return p.String()
}

type ConfigValSecurityException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewConfigValSecurityException() *ConfigValSecurityException {
	return &ConfigValSecurityException{}
}

func (p *ConfigValSecurityException) GetMessage() string {
	return p.Message
}
func (p *ConfigValSecurityException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConfigValSecurityException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *ConfigValSecurityException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConfigValSecurityException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConfigValSecurityException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *ConfigValSecurityException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfigValSecurityException(%+v)", *p)
}

func (p *ConfigValSecurityException) Error() string {
	return p.String()
}

type InvalidInputException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewInvalidInputException() *InvalidInputException {
	return &InvalidInputException{}
}

func (p *InvalidInputException) GetMessage() string {
	return p.Message
}
func (p *InvalidInputException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InvalidInputException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InvalidInputException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidInputException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InvalidInputException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *InvalidInputException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidInputException(%+v)", *p)
}

func (p *InvalidInputException) Error() string {
	return p.String()
}

type NoSuchTxnException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewNoSuchTxnException() *NoSuchTxnException {
	return &NoSuchTxnException{}
}

func (p *NoSuchTxnException) GetMessage() string {
	return p.Message
}
func (p *NoSuchTxnException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoSuchTxnException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *NoSuchTxnException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoSuchTxnException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NoSuchTxnException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *NoSuchTxnException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoSuchTxnException(%+v)", *p)
}

func (p *NoSuchTxnException) Error() string {
	return p.String()
}

type TxnAbortedException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewTxnAbortedException() *TxnAbortedException {
	return &TxnAbortedException{}
}

func (p *TxnAbortedException) GetMessage() string {
	return p.Message
}
func (p *TxnAbortedException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TxnAbortedException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *TxnAbortedException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TxnAbortedException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TxnAbortedException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *TxnAbortedException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TxnAbortedException(%+v)", *p)
}

func (p *TxnAbortedException) Error() string {
	return p.String()
}

type TxnOpenException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewTxnOpenException() *TxnOpenException {
	return &TxnOpenException{}
}

func (p *TxnOpenException) GetMessage() string {
	return p.Message
}
func (p *TxnOpenException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TxnOpenException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *TxnOpenException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TxnOpenException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TxnOpenException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *TxnOpenException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TxnOpenException(%+v)", *p)
}

func (p *TxnOpenException) Error() string {
	return p.String()
}

type NoSuchLockException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewNoSuchLockException() *NoSuchLockException {
	return &NoSuchLockException{}
}

func (p *NoSuchLockException) GetMessage() string {
	return p.Message
}
func (p *NoSuchLockException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoSuchLockException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *NoSuchLockException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoSuchLockException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NoSuchLockException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *NoSuchLockException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoSuchLockException(%+v)", *p)
}

func (p *NoSuchLockException) Error() string {
	return p.String()
}
